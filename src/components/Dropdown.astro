---
import { Icon } from 'astro-icon/components';

export interface Props {
  label: string;
  items: Array<{ label: string; href?: string; icon?: string; divider?: boolean }>;
  position?: 'left' | 'right';
  className?: string;
  color?: 'primary' | 'accent' | 'neutral';
}

const {
  label,
  items,
  position = 'left',
  className = '',
  color = 'primary',
} = Astro.props;

const positionClasses = {
  left: 'left-0',
  right: 'right-0',
};

const colorClasses = {
  primary: 'text-primary-700 dark:text-primary-400 hover:bg-primary-50 dark:hover:bg-primary-900/20',
  accent: 'text-accent-700 dark:text-accent-400 hover:bg-accent-50 dark:hover:bg-accent-900/20',
  neutral: 'text-gray-900 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-800',
};
---

<div class={`relative inline-block ${className}`}>
  <button
    type="button"
    class="inline-flex items-center gap-2 px-4 py-2 text-sm font-bold bg-white dark:bg-gray-900 border-2 border-gray-900 dark:border-gray-200 rounded-md shadow-[2px_2px_0_rgba(0,0,0,0.15)] dark:shadow-[2px_2px_0_rgba(255,255,255,0.15)] hover:shadow-[3px_3px_0_rgba(0,0,0,0.2)] dark:hover:shadow-[3px_3px_0_rgba(255,255,255,0.2)] transition-all duration-200"
    data-dropdown-toggle
  >
    <span class="text-gray-900 dark:text-gray-200">{label}</span>
    <Icon name="ic:outline-keyboard-arrow-down" class="w-4 h-4 text-gray-900 dark:text-gray-200 transition-transform dropdown-arrow" />
  </button>

  <div
    class={`absolute ${positionClasses[position]} mt-2 w-56 bg-white dark:bg-gray-800 border-2 border-gray-900 dark:border-gray-200 rounded-md shadow-[4px_4px_0_rgba(0,0,0,0.15)] dark:shadow-[4px_4px_0_rgba(255,255,255,0.15)] opacity-0 invisible transition-all duration-200 z-50 dropdown-menu`}
  >
    <ul class="py-2">
      {items.map((item) => (
        item.divider ? (
          <li class="my-2">
            <hr class="border-t-2 border-gray-900 dark:border-gray-200" />
          </li>
        ) : (
          <li>
            {item.href ? (
              <a
                href={item.href}
                class={`flex items-center gap-3 px-4 py-2 text-sm font-medium transition-colors ${colorClasses[color]}`}
              >
                {item.icon && <Icon name={item.icon} class="w-4 h-4" />}
                <span>{item.label}</span>
              </a>
            ) : (
              <button
                type="button"
                class={`w-full flex items-center gap-3 px-4 py-2 text-sm font-medium text-left transition-colors ${colorClasses[color]}`}
              >
                {item.icon && <Icon name={item.icon} class="w-4 h-4" />}
                <span>{item.label}</span>
              </button>
            )}
          </li>
        )
      ))}
    </ul>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const dropdowns = document.querySelectorAll('[data-dropdown-toggle]');

    dropdowns.forEach((toggle) => {
      const menu = toggle.nextElementSibling as HTMLElement;
      const arrow = toggle.querySelector('.dropdown-arrow');

      toggle.addEventListener('click', (e) => {
        e.stopPropagation();

        // Close all other dropdowns
        document.querySelectorAll('.dropdown-menu').forEach((m) => {
          if (m !== menu) {
            m.classList.add('opacity-0', 'invisible');
            const otherArrow = m.previousElementSibling?.querySelector('.dropdown-arrow');
            otherArrow?.classList.remove('rotate-180');
          }
        });

        // Toggle current dropdown
        menu.classList.toggle('opacity-0');
        menu.classList.toggle('invisible');
        arrow?.classList.toggle('rotate-180');
      });
    });

    // Close on outside click
    document.addEventListener('click', () => {
      document.querySelectorAll('.dropdown-menu').forEach((menu) => {
        menu.classList.add('opacity-0', 'invisible');
        const arrow = menu.previousElementSibling?.querySelector('.dropdown-arrow');
        arrow?.classList.remove('rotate-180');
      });
    });
  });
</script>