---
interface Props {
  headings: Array<{
    depth: number;
    slug: string;
    text: string;
  }>;
}
const { headings } = Astro.props;
---

{
  !!headings.length && (
    <ul data-blog-toc class="leading-normal sticky top-0 max-h-screen overflow-y-auto">
      <li class="min-h-12 border-b border-primary-700 bg-primary-900 px-3 py-3 text-primary-50 flex items-center break-words">
        文章導覽
      </li>
      {headings.map(({ depth, slug, text }) => {
        let cls = '';
        switch (depth) {
          case 3:
            cls = 'indent-4';
            break;
          case 4:
            cls = 'indent-6';
            break;
          case 5:
            cls = 'indent-8';
            break;
          case 6:
            cls = 'indent-10';
            break;
          default:
            break;
        }
        return (
          <li class="min-h-12 border-b border-primary-700 text-primary-50 hover:bg-primary-700 hover:text-white">
            <a
              class={`block w-full cursor-pointer px-3 py-3 break-words ${cls}`}
              href={`#${slug}`}
              aria-label={`Scroll to section: ${text}`}
            >
              {text}
            </a>
          </li>
        );
      })}
    </ul>
  )
}

<script>
  const setCurrent: IntersectionObserverCallback = (entries) => {
    for (let entry of entries) {
      const { id } = entry.target;
      const tocHeadingEl = document.querySelector(
        `[data-blog-toc] a[href="#${id}"]`
      );
      if (!tocHeadingEl) return;
      if (entry.isIntersecting) {
        document
          .querySelectorAll('[data-blog-toc] a')
          .forEach((e) => e.classList.remove('active'));
        tocHeadingEl.classList.add('active');
      }
    }
  };

  const observerOption: IntersectionObserverInit = {
    root: null,
    rootMargin: '0px 0px -180px',
    threshold: 1.0,
  };
  const headingObserver = new IntersectionObserver(setCurrent, observerOption);
  document
    .querySelectorAll('article :is(h2,h3,h4)')
    .forEach((heading) => headingObserver.observe(heading));
</script>
<!-- https://www.fazzaamiarso.me/blog/toc-astro-spy/#create-the-component -->


<!-- <script>
    //---------------   Click Expand   ---------------
    let toggler = document.getElementsByClassName("toc_expand");
    for (let i = 0; i < toggler.length; i++) {
      toggler[i].addEventListener("click", function(e) {
        this.parentElement.parentElement.querySelector("ul")?.classList.toggle("hidden");
        this.parentElement.classList.toggle("expanded");
        e.preventDefault()
      });
    }


    //---------------   Scroll Spy   ---------------
    function escape_href(href){
        //the # bothers CSS.escape in case of id starting with a number
        return `#${CSS.escape(href.replace('#',''))}`
    }

    const article = document.querySelector( 'article.content' )
    const hrefs = document.getElementsByClassName("toc_href");
    const targets = [...hrefs].map(el => article.querySelector(escape_href(el.getAttribute('href'))))
    
    article.addEventListener("scroll", (event) => {
        let spy = null//if no element on screen, keep last match and do nothing
        for ( let t in targets ){//find first within visible scroll
            if(targets[ t ].offsetTop > article.scrollTop){
                spy = targets[ t ]
                break
            }
        }
        if(spy){
            document.querySelector(".toc_href.active")?.classList.remove("active");
            document.querySelector(".heading.active")?.classList.remove("active");
            const id = spy.id
            //console.log(id)
            document.querySelector(`a[href="#${id}"].toc_href`)?.classList.add("active")
            document.getElementById(id)?.classList.add("active")
        }
    })

    const href_els = document.querySelectorAll(".toc_href");
    href_els.forEach(element => {
        element.addEventListener('mouseenter',()=>{
            const href = element.getAttribute('href')
            const id = href.slice(1,href.length)
            document.getElementById(id)?.classList.add("hover")
        })        
        element.addEventListener('mouseout',()=>{
            const href = element.getAttribute('href')
            const id = href.slice(1,href.length)
            document.getElementById(id)?.classList.remove("hover")
        })        
    });
</script> -->