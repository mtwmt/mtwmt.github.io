[{"folder":"angular","slug":"ng_absolute_path","title":"如何在 Angular 取得當前頁面的絕對路徑","date":"2021/10/02","tags":["Angular","pipe","ironman2021"],"summary":"<h2 id=\"情境\">情境</h2>\n<p>當有一個連結需要另開新頁時，在 develop 或 production 需要對應到正確的路徑\nAngular 提供了這個方式 <a href=\"https://angular.tw/api/common/Location#prepareexternalurl\">https://angular.tw/api/common/Location#prepareexternalurl</a></p>\n<hr>\n<h2 id=\"實作一個外埠連結-url-的-pipe\">實作一個外埠連結 url 的 pipe</h2>\n<p>所以我就做了以下的 pipe，在有"},{"folder":"angular","slug":"ng_adapter-data","title":"Angular 轉換 API 資料格式 (Adapter)","date":"2021/09/29","tags":["Angular","TypeScript","ironman2021"],"summary":"<p>今天的內容屬於設計模式的一種。\n當我們從後端接到資料後，有時後資料格式往往不是如我們所想，所以會再加工做個轉換的動作。\n所以就要使用 <code>TypeScript</code> 來做個轉接器，轉成我們所需的資料！</p>\n<p>就拿前幾天的文章　<a href=\"https://ithelp.ithome.com.tw/articles/10270252\">Angular 如何取得 API 資料</a> 繼續做介紹囉</p>\n<hr>\n<h2 id=\"轉換資料格式\">轉換資料格式</h2>\n<p>這是原 api 取得的資料格式</p>\n<pre><code class=\"langua"},{"folder":"angular","slug":"ng_auth-guard-login","title":"Angular 路由守衛(登入篇)","date":"2021/10/07","tags":["Angular","ironman2021"],"summary":"<p>經過了昨天的介紹，今天就來看看使用登入範例囉</p>\n<p>今天的登入資料依然是使用 <a href=\"https://fakestoreapi.com/docs\">FakeStoreAPI</a></p>\n<h2 id=\"登入畫面\">登入畫面</h2>\n<p>這裡就做個簡單的驗証，沒填值就不能按按鈕</p>\n<pre><code class=\"language-html\">&lt;form [formGroup]=&quot;form&quot; (ngSubmit)=&quot;onSubmit()&quot;&gt;\n  &lt;div&gt;\n    &lt;label for="},{"folder":"angular","slug":"ng_auth-guard","title":"Angular 路由守衛","date":"2021/10/06","tags":["Angular","ironman2021"],"summary":"<p>我們在開發的過程中，經常會遇到需要某些權限才能進入的頁面，這時後就會需要路由守衛的機制啦，\n而它最常用在登入畫面時</p>\n<hr>\n<h2 id=\"快速建立\">快速建立</h2>\n<p>Angular CLI 提供了命令列工具，可以快速建立路由守衛框架檔案：</p>\n<pre><code class=\"language-bash\">ng generate guard auth\n</code></pre>\n<p>或</p>\n<pre><code class=\"language-bash\">ng g g auth\n</code></pre>\n<p>官網介紹：<a href=\"https:/"},{"folder":"angular","slug":"ng_breadcrumb","title":"如何在 Angular 建立 Breadcrumb (麵包屑)","date":"2020/06/12","tags":["Angular","ironman2021"],"summary":"<p>麵包屑 為提供網站裡的導航，讓使用者容易了解當下所在的位置\n剛好也呼應前一天使用 <code>router</code> 的部份</p>\n<blockquote>\n<p><code>現在位置：首頁 / 列表 / 內容</code></p>\n</blockquote>\n<h2 id=\"了解-router-架構\">了解 router 架構</h2>\n<p>Angular 裡的 router 架構 通常會命名為 <code>app-routing.module.ts</code></p>\n<pre><code class=\"language-js\">const routes: Routes ="},{"folder":"angular","slug":"ng_dynamic","title":"Angular 動態載入組件","date":"2019/07/21","tags":["Angular"],"summary":"<h1 id=\"動態載入組件\">動態載入組件</h1>\n<p>情境：tab 切換</p>\n<p>app.module.ts</p>\n<pre><code class=\"language-JS\">// ...略\nimport { TaskComponent } from './tab/task/task.component';\nimport { AnalysisComponent } from './tab/analysis/analysis.component';\nimport { SoundComponent } from './tab/sound/sound.component';\n\n@N"},{"folder":"angular","slug":"ng_emit","title":"Angular 組件傳值","date":"2019/07/20","tags":["Angular"],"summary":"<h1 id=\"父子組件互傳(-input-output-)\">父子組件互傳( input output )</h1>\n<p>一張圖說明 input 與 output 值的互相傳遞\n&lt;img src=“assets/images/angular/emit/input-output.png” /&gt;</p>\n<h2 id=\"父組件-傳值給-子組件\">父組件 傳值給 子組件</h2>\n<pre><code class=\"language-js\">// 父組件\nimport { Component } from '@angular/core';\n@Component({\n  selecto"},{"folder":"angular","slug":"ng_httpParams","title":"Angular HttpParams","date":"2020/11/03","tags":["Angular"],"summary":"<p>這篇記錄著關於如何使用 Angular <code>HttpParams</code>\n且 HttpParams 接收的參數值必定要轉為<code>字串</code>才可以</p>\n<p>在 service.ts 引入</p>\n<pre><code class=\"language-ts\">import { HttpClient, HttpParams } from '@angular/common/http';\n\nconstructor(\n  private http: HttpClient\n) {}\n</code></pre>\n<h2 id=\"get\">GET</h2>\n<pre><c"},{"folder":"angular","slug":"ng_lib-build-css","title":"如何將 Angular library 裡的 scss/sass 正確導出","date":"2021/01/17","tags":["Angular","Angular library"],"summary":"<p>因專案越來越龐大，需要將一些共用元件抽出來做 library 放到 npm 上，在其他專案在開\n發時也能一起使用，以便節省開發時間。</p>\n<p>照著官網的教學建立: <a href=\"https://angular.tw/guide/creating-libraries\">https://angular.tw/guide/creating-libraries</a></p>\n<pre><code class=\"language-cmd\">ng new angular-library-template --create-application=false\ncd angular-libr"}]