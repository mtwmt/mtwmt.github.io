[{"directory":"agGrid","layout":"agGrid","slug":"ad-gird_component","title":"更改 ag-grid 資料欄位顯示 ( ag-grid component )","date":"2019/10/19","categories":["agGrid"],"tags":["Angular","agGrid"],"summary":"在 gridOptions 加上 frameworkComponentsgridOptions = {  frameworkComponents: {    customizedComponent: ","content":"<p>在 gridOptions 加上 frameworkComponents</p>\n<pre><code class=\"language-js\">gridOptions = {\n  frameworkComponents: {\n    customizedComponent: CustomizedComponent,\n  },\n};\n</code></pre>\n<p>在相對應的 columnDefs 裡設定</p>\n<pre><code class=\"language-js\">columnDefs = [\n  {\n    headerName: 'Row',\n    field: 'row',\n    width: 150,\n    // 針對這一個欄位的內容做調整 可使用自訂義組件\n    cellRenderer: 'customizedComponent',\n    // 新增 component 內容參數\n    cellRendererParams: {\n      color: '#159',\n    },\n  },\n];\n</code></pre>\n<p><a target='_blank' href=\"https://www.ag-grid.com/javascript-grid-components/#registering-custom-components\">自訂義組件</a></p>\n<p>或</p>\n<pre><code class=\"language-js\">columnDefs = [\n  {\n    // 針對這一個欄位的內容做調整\n    cellRenderer: function(params) {\n      // return ...do something\n    },\n  },\n];\n</code></pre>\n<p>DEMO: <a target='_blank' href=\"https://stackblitz.com/edit/angular-aggrid-component\">angular_ag-grid_component</a></p>\n"},{"directory":"agGrid","layout":"agGrid","slug":"ag-grid_infinite","title":"使用 ag-grid 讀取 server 端分頁 ( Ag-grid server-side with paginated RESTful API and Angular )","date":"2019/08/19","categories":["agGrid"],"tags":["Angular","agGrid"],"summary":"先稍微介紹分頁會用到的 gridOptions 功能rowBuffer: 0; //在網格呈現的可滾動可視區域外部呈現的行數。預設為 20 有一個緩衝區意味著當用戶緩慢地垂直滾動時，表格將準備顯示行。","content":"<p>先稍微介紹分頁會用到的 gridOptions 功能</p>\n<ul>\n<li>rowBuffer: 0; //在網格呈現的可滾動可視區域外部呈現的行數。預設為 20 有一個緩衝區意味著當用戶緩慢地垂直滾動時，表格將準備顯示行。</li>\n<li>rowSelection: ‘multiple’; //多行選擇</li>\n<li>cacheOverflowSize: 2; //緩存大小</li>\n<li>maxConcurrentDatasourceRequests: 1; //最大並發數據源請求 發出 Requests 請求</li>\n<li>infiniteInitialRowCount: 1000; //最初允許在網格中滾動多少行。 一次幾行</li>\n<li>maxBlocksInCache: 10; //緩存中要保留多少頁面。</li>\n</ul>\n<h2 id=\"基本分頁設定\">基本分頁設定</h2>\n<ul>\n<li>pagination: true, // 是否開啟分頁功能 或 無限捲動</li>\n<li>rowModelType: ‘infinite’</li>\n<li>cacheBlockSize: 20 一次下載 20 筆總筆教</li>\n<li>paginationPageSize: 10 一頁呈現 10 筆</li>\n</ul>\n<pre><code class=\"language-ts\">import { IDatasource, IGetRowsParams, GridOptions, GridApi } from 'ag-grid-community';\n// 此部份需引入 GridOptions, GridApi\ngridApi: GridApi;\ngridOptions: GridOptions = {\n  pagination: true,\n  rowModelType: 'infinite',\n  cacheBlockSize: 20, // you can have your custom page size\n  paginationPageSize: 20, //pagesize\n};\n</code></pre>\n<p>getRows 函數為您提供特定頁面的開始和結束索引。\nparams.successCallback：它有兩個參數，\n第一個是 api 資料\n第二個是 api 資料總筆數\nAg-grid 使用第二個參數來決定總頁數。</p>\n<p>餵給 getRows 的資料必需是 observable 屬性 讓它可被訂閱 被 subscribe 時 必需是 getRows 格式</p>\n<p>如下</p>\n<pre><code class=\"language-ts\">rowData = [\n  { make: 'Toyota', model: 'Celica', price: 35000 },\n  { make: 'Ford', model: 'Mondeo', price: 32000 },\n  { make: 'Porsche', model: 'Boxter', price: 72000 },\n];\n</code></pre>\n<pre><code class=\"language-ts\">dataSource: IDatasource = {\n  getRows: (params: IGetRowsParams) =&gt; {\n    // Use startRow and endRow for sending pagination to Backend\n    // params.startRow : Start Page\n    // params.endRow : End Page\n    //replace this.apiService with your Backend Call that returns an Observable\n    this.apiService().subscribe((response) =&gt; {\n      params.successCallback(response.data, response.totalCount);\n    });\n  },\n};\n</code></pre>\n<p>初始化設定</p>\n<pre><code class=\"language-ts\">// API 讀取資料\napiService() {\n  return this.httpclient.get('https://raw.githubusercontent.com/ag-grid/ag-grid/master/packages/ag-grid-docs/src/olympicWinners.json')\n}\n\nonGridReady(params: any) {\n  this.gridApi = params.api;\n  // api資料來源\n  this.gridApi.setDatasource(this.dataSource) // replace dataSource with your datasource\n}\n</code></pre>\n<p>HTML 設定</p>\n<pre><code class=\"language-html\">&lt;ag-grid-angular\n  style=&quot;width: 100%; height: 100%;&quot;\n  class=&quot;ag-theme-balham&quot;\n  [gridOptions]=&quot;gridOptions&quot;\n  (gridReady)=&quot;onGridReady($event)&quot;\n&gt;\n&lt;/ag-grid-angular&gt;\n</code></pre>\n<p>DEMO: <a target='_blank' href=\"https://stackblitz.com/edit/angular-aggrid-pagination\">angular_ag-grid_infinite</a></p>\n<p>參考資料：<br>\n<a target='_blank' href=\"https://stackoverflow.com/questions/47338347/ag-grid-server-side-pagination\">https://stackoverflow.com/questions/47338347/ag-grid-server-side-pagination</a><br>\n<a target='_blank' href=\"https://www.ag-grid.com/javascript-grid-infinite-scrolling/\">https://www.ag-grid.com/javascript-grid-infinite-scrolling/</a></p>\n"},{"directory":"agGrid","layout":"agGrid","slug":"ag-grid_intro","title":"agGrid 介紹","date":"2020/03/28","categories":["agGrid"],"tags":["Angular","agGrid"],"summary":"agGrid 是個非常強大的表格套件在撰寫上 大部份都是使用配置的概念做設定在一開始 agGrid 分別做了 Grid Interface 與 Column Interface 兩大接口所有的設定就從","content":"<p>agGrid 是個非常強大的表格套件\n在撰寫上 大部份都是使用配置的概念做設定</p>\n<p>在一開始 agGrid 分別做了 Grid Interface 與 Column Interface 兩大接口\n所有的設定就從這兩大接口開始…</p>\n<p>以下將會以 Angular 的寫法來介紹</p>\n<hr>\n<h3 id=\"html-部份\">HTML 部份</h3>\n<pre><code class=\"language-html\">&lt;ag-grid-angular\n  style=&quot;width: 100%; height: 500px;&quot;\n  class=&quot;ag-theme-balham&quot;\n  [rowData]=&quot;rowData&quot;\n  [columnDefs]=&quot;columnDefs&quot;\n  [gridOptions]=&quot;gridOptions&quot;\n  (gridReady)=&quot;onGridReady($event)&quot;\n&gt;\n&lt;/ag-grid-angular&gt;\n</code></pre>\n<p>主要由 欄位名稱 (columnDefs) 與 資料列 (rowData) 組成</p>\n<ul>\n<li>[rowData]=“rowData”</li>\n<li>[columnDefs]=“columnDefs”\n… 等 表格載入設定資料</li>\n</ul>\n<p>接著由 <code>gridOptions</code> 載入各種表格裡的各種設定</p>\n<ul>\n<li>(gridReady)=“onGridReady($event)”</li>\n</ul>\n<p>當表格載入完成後 可接收 agGrid event 裡的 API 進而設定表格\n<a target='_blank' href=\"https://www.ag-grid.com/javascript-grid-api/\">Grid API</a></p>\n<p><a target='_blank' href=\"https://www.ag-grid.com/javascript-grid-events/#properties-and-hierarchy\">AGgrid 事件結構</a></p>\n<hr>\n<h3 id=\"js-部份\">JS 部份</h3>\n<pre><code class=\"language-js\">gridOptions: GridOptions = {\n  // 預設所有 column 配置\n  defaultColDef: {\n    headerValueGetter: (obj) =&gt; {  return obj; }   //設定標題預設值\n  }\n  // 欄位分類\n  columnTypes: {\n    &quot;nonEditableColumn&quot;: {editable: false},\n  }\n};\n\n// 針對各個 column 做配置\ncolumnDefs: [\n  {\n    field: 'make', // 主要用來對應 rowdata 的名字\n    headerName: 'make',\n    width : 100,\n    type: 'nonEditableColumn',\n    cellRenderer: '',\n    ...\n  },\n  { field: 'make' },\n  { field: 'price' },\n];\n\n//  對應到 rowData\nrowData = [\n  { make: 'Toyota', model: 'Celica', price: 35000 },\n  { make: 'Ford', model: 'Mondeo', price: 32000 },\n  { make: 'Porsche', model: 'Boxter', price: 72000 }\n];\n</code></pre>\n<hr>\n<h1 id=\"grid-屬性配置-(-grid-properties-)\">Grid 屬性配置 ( Grid Properties )</h1>\n<h2 id=\"gridoptions\">GridOptions</h2>\n<p>用於 agGrid 初始預設設定</p>\n<p><a target='_blank' href=\"https://www.ag-grid.com/javascript-grid-properties/\">所有配置表格的屬性 都在這裡設定</a></p>\n<h3 id=\"grid-api\">Grid API</h3>\n<p>用來更新 agGrid 初始設定</p>\n<h3 id=\"columndefs\">columnDefs</h3>\n<p>更多的 columnDefs 可觀看 <a target='_blank' href=\"https://github.com/ag-grid/ag-grid/blob/master/community-modules/core/src/ts/entities/colDef.ts#L75\">GIT 原始碼</a> 做挑選</p>\n<p>踩雷經驗：</p>\n<ul>\n<li>colId: 如果沒設會自動產生來確保唯一值，以比重來說 應該就像是 css 裡的 <code>!important</code> 吧，加上它之後 會將 column 提到最前面\n<blockquote>\n<p>雷點：在編輯欄位的時後若沒有設定，在欄位異動後 colId 則會再名字後面加上 <code>_1</code>，若是用 colID 來取值的話 就會很容易噴錯，後來我就使用 field 來取值了 ㄏㄏ</p>\n</blockquote>\n</li>\n</ul>\n<p><a target='_blank' href=\"https://www.ag-grid.com/javascript-grid-column-definitions/#column-ids\">https://www.ag-grid.com/javascript-grid-column-definitions/#column-ids</a></p>\n<h3 id=\"columntypes\">columnTypes</h3>\n<p>可對每個 column 做分類，分群組\n比如 可編輯的 column 一組，不可編輯的一組</p>\n<p>對應方式寫法如下</p>\n<pre><code class=\"language-js\">columnDefs: [\n  {\n    headerName: 'Make',\n    field: 'make',\n    type: 'nonEditableColumn',\n  },\n  {\n    headerName: 'Model',\n    field: 'model',\n    type: ['nonEditableColumn','numberColumn'],\n  },\n];\ncolumnTypes: {\n  nonEditableColumn: { editable: false },\n  numberColumn: {\n    width: 130,\n    filter: 'agTextColumnFilter',\n  },\n}\n\n</code></pre>\n<p><a target='_blank' href=\"https://www.ag-grid.com/javascript-grid-column-definitions/#default-column-definitions\">https://www.ag-grid.com/javascript-grid-column-definitions/#default-column-definitions</a></p>\n<hr>\n<h2 id=\"grid-api\">Grid API</h2>\n<p><a target='_blank' href=\"https://github.com/ag-grid/ag-grid/blob/master/community-modules/core/src/ts/gridApi.ts\">GIT 源碼</a></p>\n<p><a target='_blank' href=\"https://www.ag-grid.com/javascript-grid-api/\">https://www.ag-grid.com/javascript-grid-api/</a></p>\n<p>表格讀取完成後 可用來做後續的調整設定\n如：更新資料，新增欄或列</p>\n<hr>\n<h2 id=\"grid-events\">Grid Events</h2>\n<p><a target='_blank' href=\"https://www.ag-grid.com/javascript-grid-events/\">設定表格事件</a></p>\n<p>了解 agGrid 的層級架構\n<a target='_blank' href=\"https://www.ag-grid.com/javascript-grid-events/#properties-and-hierarchy\">https://www.ag-grid.com/javascript-grid-events/#properties-and-hierarchy</a></p>\n<p>才能知道事件需用在哪個地方 哪種設定的 api 會對應怎麼樣名稱的事件</p>\n<p>在每個 cell(單個小格) 裡 有時後需要做些各別的設定 就會使用到\n主要是設定在 <code>GridOptions</code> 裡，比如 欄位的編輯，呈現方式等</p>\n<p>就有待慢慢去挖掘了。</p>\n<p>附上 <a target='_blank' href=\"https://stackblitz.com/edit/angular-aggridsample\">Demo</a> 頁</p>\n<hr>\n<p>後記 在寫這篇的時後 發現 agGrid 已經更新到 23 版了\n多了許多 css 的樣式可以挑選 也可以自己定義樣式\n可至 <a target='_blank' href=\"https://www.ag-grid.com/javascript-grid-themes-provided/\">https://www.ag-grid.com/javascript-grid-themes-provided/</a> 觀看介紹</p>\n"},{"directory":"angular","layout":"Angular","slug":"material_expansion-panel_edit-height","title":"修改 Material Expansion Panel (手風琴) 標題高度","date":"2019/09/16","categories":["Angular Material"],"tags":["Angular","Angular Material"],"summary":"因為 Material Expansion Panel 展開後的高度是使用動畫高度產生所以css設定過後 仍會被蓋過除非是下 !important但在展開的過程中 會有先變高再縮回去的不順效果在 Ma","content":"<p>因為 Material Expansion Panel 展開後的高度是使用動畫高度產生\n所以css設定過後 仍會被蓋過\n除非是下 <code>!important</code></p>\n<p>但在展開的過程中 會有先變高再縮回去的不順效果</p>\n<p>在 Material 提供了我們兩個方式去設定\ncollapsedHeight  - 面板折疊時標題的高度。\nexpandedHeight  - 面板展開時標題的高度。</p>\n<pre><code class=\"language-html\">&lt;mat-expansion-panel&gt;\n  &lt;mat-expansion-panel-header \n    collapsedHeight=&quot;48px&quot;\n    expandedHeight=&quot;48px&quot;\n  &gt;\n    &lt;mat-panel-title&gt;Title&lt;/mat-panel-title&gt;\n    &lt;mat-panel-description&gt;&lt;/mat-panel-description&gt;\n  &lt;/mat-expansion-panel-header&gt;\n  Body\n&lt;/mat-expansion-panel&gt;\n</code></pre>\n<ul>\n<li>資料來源 <a target='_blank' href=\"\">https://github.com/angular/components/issues/8383</a></li>\n</ul>\n"},{"directory":"angular","layout":"Angular","slug":"ng-container-vs-template","title":"Angular ng-container 與 ng-template","date":"2021/09/26","categories":["Angular"],"tags":["Angular","ironman2021"],"summary":"接續昨天的範例。今天要聊的是 ng-container 與 ng-template&lt;ng-container *ngIf=&quot;(products$ | async)?.length &g","content":"<p>接續昨天的範例。\n今天要聊的是 <code>ng-container</code> 與 <code>ng-template</code></p>\n<pre><code class=\"language-html\">&lt;ng-container *ngIf=&quot;(products$ | async)?.length &gt; 0; else empty&quot;&gt;\n  &lt;ng-container *ngFor=&quot;let item of (products$ | async)&quot;&gt; ...略 &lt;/ng-container&gt;\n&lt;/ng-container&gt;\n&lt;ng-template #empty&gt; No Data &lt;/ng-template&gt;\n</code></pre>\n<p>上面程式碼所要表達的是，若是資料大於 0 筆，頁面上就會呈現列表，沒有資料的時後在畫面上顯示 No Data</p>\n<hr>\n<h2 id=\"ng-container\">ng-container</h2>\n<p>ng-container 在 Angular 的 template 裡，它不屬於任何一個 <code>tag</code>，也不會被渲染出來。\n而它通常都會被拿來處理一些邏輯的事情，如 <code>*ngIf</code> 或 <code>*ngFor</code>。</p>\n<p>雖然 <code>*ngIf</code>、<code>*ngFor</code> 這些也能寫在 <code>div</code> 上，不過 div 它會被呈現出來，有時後會影響排版，這時後 <code>ng-container</code> 就是我們的好朋友惹！</p>\n<hr>\n<h2 id=\"ng-template\">ng-template</h2>\n<p>因為在 <code>ng-container</code> 有使用到 <code>if/else</code>，所以這時後就需要一個 <code>ng-template</code> 來做搭配，通常它不會直接顯示出來，而是需要透過其他的指令，如<code>ngIf</code> 或是 <code>TemplateRef</code> 的搭配，當條件成立後，<code>ng-template</code> 裡的內容才會被呈現</p>\n<hr>\n<h2 id=\"templateref\">TemplateRef</h2>\n<p>.ts</p>\n<pre><code class=\"language-ts\">export class TemplateComponent implements OnInit, AfterViewInit {\n  @ViewChild('tpl') tplRef!: TemplateRef&lt;any&gt;;\n\n  constructor(private viewContainerRef: ViewContainerRef) {}\n\n  ngOnInit(): void {}\n\n  ngAfterViewInit() {\n    this.viewContainerRef.createEmbeddedView(this.tplRef);\n  }\n}\n</code></pre>\n<p>.html</p>\n<pre><code class=\"language-html\">&lt;ng-template #tpl&gt; Hello, Angular ! &lt;/ng-template&gt;\n</code></pre>\n<hr>\n<h2 id=\"ng-template-處理多重結構指令\">ng-template 處理多重結構指令</h2>\n<p>來看一下昨天的 <code>ngIf as</code> 的 範例</p>\n<pre><code class=\"language-html\">&lt;ng-container *ngIf=&quot;(products$ | async) as products;&quot;&gt;\n  &lt;ng-container *ngIf=&quot;products.length &gt; 0; else empty&quot;&gt;\n    &lt;ng-container *ngFor=&quot;let item of products&quot;&gt; ...略 &lt;/ng-container&gt;\n  &lt;/ng-container&gt;\n&lt;/ng-container&gt;\n&lt;ng-template #empty&gt; No Data &lt;/ng-template&gt;\n</code></pre>\n<p>光是 <code>ng-container</code> 就寫了三層，那有沒有辦法再更簡化一些呢!?\n那我們可以使用 <code>ng-template</code> 這樣處理</p>\n<pre><code class=\"language-html\">&lt;ng-container *ngIf=&quot;(products$ | async) as products; else empty&quot;&gt;\n  &lt;ng-template *ngIf=&quot;products.length &gt; 0&quot; ngFor let-item [ngForOf]=&quot;products&quot;&gt;\n    &lt;div class=&quot;products&quot;&gt;...略&lt;/div&gt;\n  &lt;/ng-template&gt;\n&lt;/ng-container&gt;\n</code></pre>\n<hr>\n<h2 id=\"後記\">後記</h2>\n<p>在 Angular 裡有一些 xxxOutlet 的指令\n如　<code>ngTemplateOutlet</code>、<code>ngComponentOutlet</code>\n接著 明天再來說說 ng-template 與 ngTemplateOutlet 這部份吧</p>\n<h2 id=\"參考資料\">參考資料</h2>\n<p><a target='_blank' href=\"https://angular.tw/api/common/NgForOf\">NgForOf</a>\n<a target='_blank' href=\"https://angular.tw/api/core/ViewContainerRef\">ViewContainerRef</a>\n<a target='_blank' href=\"https://stackoverflow.com/questions/49296784/angular-ngif-variable-with-async-pipe-multiple-conditions\">Angular *ngIf variable with async pipe multiple conditions</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_absolute_path","title":"如何在 Angular 取得當前頁面的絕對路徑","date":"2021/10/02","categories":["Angular"],"tags":["Angular","pipe","ironman2021"],"summary":"情境當有一個連結需要另開新頁時，在 develop 或 production 需要對應到正確的路徑Angular 提供了這個方式 https://angular.tw/api/common/Locat","content":"<h2 id=\"情境\">情境</h2>\n<p>當有一個連結需要另開新頁時，在 develop 或 production 需要對應到正確的路徑\nAngular 提供了這個方式 <a target='_blank' href=\"https://angular.tw/api/common/Location#prepareexternalurl\">https://angular.tw/api/common/Location#prepareexternalurl</a></p>\n<hr>\n<h2 id=\"實作一個外埠連結-url-的-pipe\">實作一個外埠連結 url 的 pipe</h2>\n<p>所以我就做了以下的 pipe，在有需要的時後，直接幫我轉換</p>\n<p>建立一個 pipe 名為 externalUrl</p>\n<pre><code class=\"language-bash\">ng g p externalUrl\n</code></pre>\n<p>pipe.ts</p>\n<pre><code class=\"language-ts\">import { Pipe, PipeTransform } from &quot;@angular/core&quot;;\nimport { Location } from &quot;@angular/common&quot;;\nimport { HttpParams } from &quot;@angular/common/http&quot;;\n\n@Pipe({\n  name: &quot;externalUrl&quot;,\n})\nexport class ExternalUrlPipe implements PipeTransform {\n  constructor(private location: Location) {}\n\n  transform(url: string, ...queryParams: Object[]): unknown {\n    const setQueryParams = queryParams.length\n      ? `?${String(this.getQueryParams(queryParams?.[0]))}`\n      : &quot;&quot;;\n    return this.location.prepareExternalUrl(url) + setQueryParams;\n  }\n\n  getQueryParams(source: any): HttpParams {\n    let target: HttpParams = new HttpParams();\n    Object.keys(source).forEach((key: string) =&gt; {\n      const value: string | number | boolean | Date = source[key];\n      if (typeof value !== &quot;undefined&quot; &amp;&amp; value !== null) {\n        target = target.append(key, value.toString());\n      }\n    });\n    return target;\n  }\n}\n</code></pre>\n<hr>\n<h2 id=\"使用-pipe\">使用 pipe</h2>\n<p>在 template 裡</p>\n<pre><code class=\"language-html\">&lt;a [href]=&quot;'../ithome/externalUrl' | externalUrl: {name: external}&quot;&gt;外部網址&lt;/a&gt;\n</code></pre>\n<p>實際網址 =&gt; <a target='_blank' href=\"http://xn--sesp6bl98dbcq//ithome/externalUrl?name=external\">http://外部網址//ithome/externalUrl?name=external</a></p>\n<hr>\n<p>用在 ts 裡，首先要先把 pipc 注入</p>\n<pre><code class=\"language-ts\">providers: [ExternalUrlPipe],\n</code></pre>\n<p>.ts</p>\n<pre><code class=\"language-ts\">this.externalUrlPipe.transform(&quot;../ithome/externalUrl&quot;, { name: &quot;external&quot; });\n</code></pre>\n<hr>\n<p>參考資料：\n<a target='_blank' href=\"https://angular.tw/guide/pipes#creating-pipes-for-custom-data-transformations\">為自訂資料轉換建立管道</a>\n<a target='_blank' href=\"https://angular.tw/api/common/Location#prepareexternalurl\">https://angular.tw/api/common/Location#prepareexternalurl</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_adapter-data","title":"Angular 轉換 API 資料格式 (Adapter)","date":"2021/09/29","categories":["Angular"],"tags":["Angular","TypeScript","ironman2021"],"summary":"今天的內容屬於設計模式的一種。當我們從後端接到資料後，有時後資料格式往往不是如我們所想，所以會再加工做個轉換的動作。所以就要使用 TypeScript 來做個轉接器，轉成我們所需的資料！就拿前幾天的文","content":"<p>今天的內容屬於設計模式的一種。\n當我們從後端接到資料後，有時後資料格式往往不是如我們所想，所以會再加工做個轉換的動作。\n所以就要使用 <code>TypeScript</code> 來做個轉接器，轉成我們所需的資料！</p>\n<p>就拿前幾天的文章　<a target='_blank' href=\"https://ithelp.ithome.com.tw/articles/10270252\">Angular 如何取得 API 資料</a> 繼續做介紹囉</p>\n<hr>\n<h2 id=\"轉換資料格式\">轉換資料格式</h2>\n<p>這是原 api 取得的資料格式</p>\n<pre><code class=\"language-json\">{\n  &quot;id&quot;: 1,\n  &quot;title&quot;: &quot;Fjallraven - Foldsack No. 1 Backpack, Fits 15 Laptops&quot;,\n  &quot;price&quot;: 109.95,\n  &quot;description&quot;: &quot;Your perfect pack for everyday use and walks in the forest...&quot;,\n  &quot;category&quot;: &quot;men's clothing&quot;,\n  &quot;image&quot;: &quot;https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_.jpg&quot;,\n  &quot;rating&quot;: {\n    &quot;rate&quot;: 3.9,\n    &quot;count&quot;: 120\n  }\n}\n</code></pre>\n<p>想轉換為這樣的資料格式</p>\n<pre><code class=\"language-json\">{\n  &quot;ngTitle&quot;: &quot;Fjallraven - Foldsack No. 1 Backpack, Fits 15 Laptops&quot;,\n  &quot;ngDescription&quot;: &quot;Your perfect pack for everyday use and walks in the forest...&quot;,\n  &quot;ngCategory&quot;: &quot;men's clothing&quot;,\n  &quot;ngImage&quot;: &quot;https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_.jpg&quot;\n}\n</code></pre>\n<hr>\n<h2 id=\"建立一個-model.ts\">建立一個 model.ts</h2>\n<p>model.ts</p>\n<pre><code class=\"language-ts\">// 欲轉成的資料格式\nexport class List {\n  constructor(\n    public ngTitle: string,\n    public ngCategory: string,\n    public ngImage: string,\n    public ngDescription: string\n  ) {}\n}\n\n// 注入到 root\n@Injectable({\n  providedIn: &quot;root&quot;,\n})\nexport class ListAdapter {\n  adapt(item: any): List {\n    return new List(item.title, item.category, item.image, item.description);\n  }\n}\n</code></pre>\n<hr>\n<p>service.ts</p>\n<pre><code class=\"language-ts\">import { HttpClient } from &quot;@angular/common/http&quot;;\nimport { Injectable } from &quot;@angular/core&quot;;\nimport { catchError, map, Observable } from &quot;rxjs&quot;;\nimport { List, ListAdapter } from &quot;./app.model&quot;;\n\n@Injectable()\nexport class AppService {\n  constructor(\n    private httpClient: HttpClient,\n    private listAdapter: ListAdapter\n  ) {}\n\n  fetchProd(): Observable&lt;List[]&gt; {\n    const url = `https://fakestoreapi.com/products`;\n    return this.httpClient.get&lt;any&gt;(url).pipe(\n      map((list) =&gt; {\n        // 接到資料後做轉換\n        return list.map((item) =&gt; this.listAdapter.adapt(item));\n      }),\n      catchError((err, caught) =&gt; {\n        throw err;\n      })\n    );\n  }\n}\n</code></pre>\n<p>資料就會轉成我們需要的格式了</p>\n<p><img src=\"assets/images/ironman/ng_adapter-data/3cRgvNU.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"後記\">後記</h2>\n<p>今天的文章比較偏向設計模式的應用，當專案越來越大時，程式碼藕合度越低越好，避免牽一髮而動全身，改了 A 壞了 B 而花更多時間找問題點</p>\n<hr>\n<p>範例：<a target='_blank' href=\"https://stackblitz.com/edit/angular-ivy-zsnxup\">https://stackblitz.com/edit/angular-ivy-zsnxup</a></p>\n<p>參考資料：\n<a target='_blank' href=\"https://dev.to/florimondmanca/consuming-apis-in-angular--the-model-adapter-pattern-3fk5/\">Consuming APIs in Angular: The Model-Adapter Pattern</a>\n<a target='_blank' href=\"https://refactoringguru.cn/design-patterns/adapter\">适配器模式</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_auth-guard-login","title":"Angular 路由守衛(登入篇)","date":"2021/10/07","categories":["Angular"],"tags":["Angular","ironman2021"],"summary":"經過了昨天的介紹，今天就來看看使用登入範例囉今天的登入資料依然是使用 FakeStoreAPI登入畫面這裡就做個簡單的驗証，沒填值就不能按按鈕&lt;form [formGroup]=&quot;fo","content":"<p>經過了昨天的介紹，今天就來看看使用登入範例囉</p>\n<p>今天的登入資料依然是使用 <a target='_blank' href=\"https://fakestoreapi.com/docs\">FakeStoreAPI</a></p>\n<h2 id=\"登入畫面\">登入畫面</h2>\n<p>這裡就做個簡單的驗証，沒填值就不能按按鈕</p>\n<pre><code class=\"language-html\">&lt;form [formGroup]=&quot;form&quot; (ngSubmit)=&quot;onSubmit()&quot;&gt;\n  &lt;div&gt;\n    &lt;label for=&quot;&quot;&gt;userName：&lt;/label&gt;\n    &lt;input type=&quot;text&quot; formControlName=&quot;username&quot; required /&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=&quot;&quot;&gt;passWord：&lt;/label&gt;\n    &lt;input type=&quot;password&quot; formControlName=&quot;password&quot; required /&gt;\n  &lt;/div&gt;\n  &lt;button [disabled]=&quot;!form.valid&quot;&gt;Login&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n<pre><code class=\"language-ts\">import { Component } from &quot;@angular/core&quot;;\nimport { FormControl, FormGroup } from &quot;@angular/forms&quot;;\nimport { Router } from &quot;@angular/router&quot;;\nimport { AuthService } from &quot;../auth.service&quot;;\n\n@Component({\n  selector: &quot;app-login&quot;,\n  templateUrl: &quot;./login.component.html&quot;,\n  styleUrls: [&quot;./login.component.css&quot;],\n})\nexport class LoginComponent {\n  form: FormGroup = new FormGroup({\n    username: new FormControl(&quot;&quot;),\n    password: new FormControl(&quot;&quot;),\n  });\n\n  constructor(private router: Router, private authService: AuthService) {}\n\n  onSubmit() {\n    const { username, password } = this.form.value;\n    this.authService.login(username, password).subscribe((res: any) =&gt; {\n      if (res.token) {\n        // 登入成功後的跳轉網址\n        this.router.navigate([&quot;&quot;]);\n      } else {\n        console.log(&quot;error&quot;, res);\n      }\n    });\n  }\n}\n</code></pre>\n<hr>\n<h2 id=\"api-service\">API Service</h2>\n<pre><code class=\"language-ts\">import { HttpClient, HttpHeaders } from &quot;@angular/common/http&quot;;\nimport { Injectable } from &quot;@angular/core&quot;;\nimport { BehaviorSubject } from &quot;rxjs&quot;;\nimport { tap } from &quot;rxjs/operators&quot;;\n\n@Injectable({\n  providedIn: &quot;root&quot;,\n})\nexport class AuthService {\n  setToken$: BehaviorSubject&lt;string&gt; = new BehaviorSubject(&quot;&quot;);\n  constructor(private httpClient: HttpClient) {}\n  login(username: string, password: string) {\n    const url = `https://fakestoreapi.com/auth/login`;\n\n    return this.httpClient\n      .post(\n        url,\n        JSON.stringify({\n          username,\n          password,\n        }),\n        {\n          headers: new HttpHeaders({\n            &quot;Content-Type&quot;: &quot;application/json&quot;,\n          }),\n        }\n      )\n      .pipe(\n        tap((res: any) =&gt; {\n          this.setToken$.next(res.token);\n        })\n      );\n  }\n}\n</code></pre>\n<p>若是有成功得到 <code>token</code> 就裝這狀態記錄在 <code>setToken$</code> 裡</p>\n<hr>\n<h2 id=\"路由守衛-auth.guard.ts\">路由守衛 auth.guard.ts</h2>\n<pre><code class=\"language-ts\">import { Injectable } from &quot;@angular/core&quot;;\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  Router,\n} from &quot;@angular/router&quot;;\nimport { map, Observable } from &quot;rxjs&quot;;\nimport { AuthService } from &quot;./auth.service&quot;;\n\n@Injectable({\n  providedIn: &quot;root&quot;,\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private router: Router, public authService: AuthService) {}\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable&lt;boolean&gt; | Promise&lt;boolean&gt; | boolean {\n    return this.canEnter();\n  }\n\n  canActivateChild(): Observable&lt;boolean&gt; {\n    return this.canEnter();\n  }\n\n  canEnter(): Observable&lt;boolean&gt; {\n    // 這裡提取剛剛記錄的狀態\n    return this.authService.setToken$.pipe(\n      map((isLogin) =&gt; {\n        if (!isLogin) {\n          this.router.navigate([&quot;/&quot;, &quot;login&quot;]);\n        }\n        return !!isLogin;\n      })\n    );\n  }\n}\n</code></pre>\n<p>在 <code>canEnter</code> 訂閱剛剛的 <code>setToken$</code> 狀態，若是沒有 <code>token</code> 則導回 login 頁</p>\n<hr>\n<h2 id=\"路由設定\">路由設定</h2>\n<pre><code class=\"language-ts\">import { NgModule } from &quot;@angular/core&quot;;\nimport { RouterModule, Routes } from &quot;@angular/router&quot;;\nimport { LoginComponent } from &quot;./login/login.component&quot;;\nimport { AuthGuard } from &quot;./auth.guard&quot;;\nimport { HomeComponent } from &quot;./home/home.component&quot;;\n\nconst routes: Routes = [\n  {\n    path: &quot;login&quot;,\n    component: LoginComponent,\n  },\n  {\n    path: &quot;&quot;,\n    component: HomeComponent,\n    canActivate: [AuthGuard], //新增路由守衛\n  },\n  {\n    path: &quot;&quot;,\n    pathMatch: &quot;full&quot;,\n    redirectTo: &quot;/&quot;,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n</code></pre>\n<hr>\n<p>今天的範例就放在這裡囉\n<a target='_blank' href=\"https://stackblitz.com/edit/angular-ivy-pwkhc4\">https://stackblitz.com/edit/angular-ivy-pwkhc4</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_auth-guard","title":"Angular 路由守衛","date":"2021/10/06","categories":["Angular"],"tags":["Angular","ironman2021"],"summary":"我們在開發的過程中，經常會遇到需要某些權限才能進入的頁面，這時後就會需要路由守衛的機制啦，而它最常用在登入畫面時快速建立Angular CLI 提供了命令列工具，可以快速建立路由守衛框架檔案：ng g","content":"<p>我們在開發的過程中，經常會遇到需要某些權限才能進入的頁面，這時後就會需要路由守衛的機制啦，\n而它最常用在登入畫面時</p>\n<hr>\n<h2 id=\"快速建立\">快速建立</h2>\n<p>Angular CLI 提供了命令列工具，可以快速建立路由守衛框架檔案：</p>\n<pre><code class=\"language-bash\">ng generate guard auth\n</code></pre>\n<p>或</p>\n<pre><code class=\"language-bash\">ng g g auth\n</code></pre>\n<p>官網介紹：<a target='_blank' href=\"https://angular.tw/cli/generate#guard\">guard</a></p>\n<p>執行後，Angular CLI 會問我們需要實現哪些介面，我們直接勾選即可</p>\n<pre><code class=\"language-bash\">? Which interfaces would you like to implement? (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)\n&gt;(*) CanActivate\n ( ) CanActivateChild\n ( ) CanDeactivate\n ( ) CanLoad\n</code></pre>\n<ul>\n<li>CanActivate: 控制路由是否可以啟用</li>\n<li>CanActivateChild: 控制子路由是否可以啟用</li>\n<li>CanDeactivate: 控制路由是否可以退出</li>\n<li>CanLoad: 控制模組（module）是否可以被載入</li>\n</ul>\n<p>建立完後 會生成一隻 auth.guard.ts</p>\n<pre><code class=\"language-ts\">import { Injectable } from &quot;@angular/core&quot;;\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n  UrlTree,\n} from &quot;@angular/router&quot;;\nimport { Observable } from &quot;rxjs&quot;;\n\n@Injectable({\n  providedIn: &quot;root&quot;,\n})\nexport class AuthGuard implements CanActivate {\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable&lt;boolean | UrlTree&gt;\n    | Promise&lt;boolean | UrlTree&gt;\n    | boolean\n    | UrlTree {\n    // 條件若符合的話 就能成功跳轉\n    return true;\n  }\n}\n</code></pre>\n<p>接著我們就可以在在這頁設定是否讓頁面跳轉</p>\n<hr>\n<h2 id=\"在-router-裡啟用路由\">在 router 裡啟用路由</h2>\n<pre><code class=\"language-ts\">const routes: Routes = [\n  {\n    path: &quot;login&quot;,\n    component: LoginComponent,\n  },\n  {\n    path: &quot;&quot;,\n    component: HomeComponent,\n    canActivate: [AuthGuard], // 啟用路由\n  },\n  {\n    path: &quot;&quot;,\n    pathMatch: &quot;full&quot;,\n    redirectTo: &quot;/&quot;,\n  },\n];\n</code></pre>\n<hr>\n<p>基本設定大概是這樣，明天就來介紹如何使用範例吧！</p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_bind","title":"Angular 繫結方式","date":"2019/07/17","categories":["Angular"],"tags":["Angular"],"summary":"Angular 共有四種資料繫結的方法內嵌繫結&lt;p&gt;{{ title }}&lt;/p&gt;屬性繫結[property]='statement'&lt;p [ngClass]=&quot","content":"<p>Angular 共有四種資料繫結的方法</p>\n<h2 id=\"內嵌繫結\">內嵌繫結</h2>\n<pre><code class=\"language-html\">&lt;p&gt;{{ title }}&lt;/p&gt;\n</code></pre>\n<h2 id=\"屬性繫結\">屬性繫結</h2>\n<p><code>[property]='statement'</code></p>\n<pre><code class=\"language-html\">&lt;p [ngClass]=&quot;{'is-on': item === true}&quot;&gt;這是內文&lt;/p&gt;\n</code></pre>\n<h2 id=\"事件繫結\">事件繫結</h2>\n<p><code>(event)='someMethod($event)'</code></p>\n<pre><code class=\"language-html\">&lt;button (click)=&quot;doFunction()&quot;&gt;&lt;/button&gt;\n</code></pre>\n<pre><code class=\"language-js\">doFunction(){\n  doSomeThing...\n\n  return result;\n}\n</code></pre>\n<h2 id=\"雙向繫結\">雙向繫結</h2>\n<p><code>[(ngModel)]='property'</code></p>\n<p>component.ts</p>\n<pre><code class=\"language-js\">export class Component {\n  keyword = '';\n}\n</code></pre>\n<p>component.html</p>\n<pre><code class=\"language-html\">&lt;input type=&quot;[(ngModel)]&quot;=&quot;keyword&quot; /&gt; {{keyword}}\n</code></pre>\n<p>app.module.ts 要多 import FormsModule 才能正常執行</p>\n<pre><code class=\"language-js\">import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\n\n// 新增\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule // 新增\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\n</code></pre>\n"},{"directory":"angular","layout":"Angular","slug":"ng_breadcrumb","title":"如何在 Angular 建立 Breadcrumb (麵包屑)","date":"2020/06/12","update":"2021/10/08","categories":["Angular"],"tags":["Angular","ironman2021"],"summary":"麵包屑 為提供網站裡的導航，讓使用者容易了解當下所在的位置剛好也呼應前一天使用 router 的部份現在位置：首頁 / 列表 / 內容了解 router 架構Angular 裡的 router 架構 ","content":"<p>麵包屑 為提供網站裡的導航，讓使用者容易了解當下所在的位置\n剛好也呼應前一天使用 <code>router</code> 的部份</p>\n<blockquote>\n<p><code>現在位置：首頁 / 列表 / 內容</code></p>\n</blockquote>\n<h2 id=\"了解-router-架構\">了解 router 架構</h2>\n<p>Angular 裡的 router 架構 通常會命名為 <code>app-routing.module.ts</code></p>\n<pre><code class=\"language-js\">const routes: Routes = [\n  {\n    path: &quot;&quot;,\n    children: [\n      {\n        path: &quot;about/:name&quot;,\n        component: AboutComponent,\n        data: {\n          breadcrumb: &quot;關於&quot;,\n        },\n      },\n      {\n        path: &quot;list&quot;,\n        component: ListComponent,\n        data: {\n          breadcrumb: &quot;列表&quot;,\n        },\n        children: [\n          {\n            path: &quot;detail&quot;,\n            component: DetailComponent,\n            data: {\n              breadcrumb: &quot;內容&quot;,\n            },\n          },\n        ],\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n</code></pre>\n<hr>\n<h2 id=\"如何建立麵包屑\">如何建立麵包屑</h2>\n<h3 id=\"監聽路由事件\">監聽路由事件</h3>\n<p>這裡會需要帶點 <code>rxjs</code> 的概念</p>\n<pre><code class=\"language-js\">\nbreadcrumbs$: Observable&lt;any&gt;;\n\nconstructor(\n  private router: Router,\n  private activatedRoute: ActivatedRoute,\n) {}\n\nngOnInit(): void {\n  this.breadcrumbs$ = this.router.events.pipe(\n    filter((event) =&gt; event instanceof NavigationEnd),\n    distinctUntilChanged(),\n    map((event) =&gt; {\n      let root: ActivatedRoute = this.activatedRoute.root;\n      return this.createBreadcrumbs(root);\n    })\n  );\n}\n\n</code></pre>\n<p>router 每次更改的時後 都會觸發許多事件，但我們只需要獲取 <code>NavigationEnd</code> 這個事\n件就可以了 <code>distinctUntilChanged</code> 只要 網址有更新 才會觸發此事件，可以檔掉許多連\n續觸發接下來再將拿到的參數進行操作</p>\n<hr>\n<h3 id=\"建立-breadcrumb-(-麵包屑-)\">建立 Breadcrumb ( 麵包屑 )</h3>\n<p>在 router 裡 我們可以得到一些資訊 如… 當前路徑當前路徑裡的參數子節點當前所使用\n的組件等…各種資訊</p>\n<p>可以在 <a target='_blank' href=\"https://angular.tw/api/router/ActivatedRoute\">Angular ActivatedRoute</a> 得\n到更多資訊</p>\n<hr>\n<h3 id=\"概念\">概念</h3>\n<blockquote>\n<p>每次一次來就檢測是否有下一個子節點，若是有的話 就繼續再跑一次迴圈如此重覆將麵\n包屑組起來，到達最後一個子節點時 會是一個 <code>null</code> 值，我們就能將先前組好的麵包\n屑回傳出來，這時後會是一個陣列，接著再將它拿到 HTML 上顯示！</p>\n</blockquote>\n<p>JS</p>\n<pre><code class=\"language-js\">createBreadcrumbs( route, url: string = '', breadcrumbs = [] ) {\n  const children = route.firstChild;\n\n  if( !children ) {\n    return breadcrumbs;\n  }\n\n  const routeURL: string = children.snapshot.url\n    .map(segment =&gt; segment.path)\n    .join('/');\n\n  const label = children.snapshot.data['breadcrumb'];\n\n  if( !label ) {\n    return this.createBreadcrumbs( children, url,  breadcrumbs)\n  }\n\n  if ( !routeURL ) {\n    url += `/${routeURL}`;\n  }\n\n  const breadcrumb = {\n    label: label,\n    params: children.snapshot.params,\n    url: routeURL\n  }\n\n  return this.createBreadcrumbs( children, url,  [...breadcrumbs, breadcrumb])\n}\n</code></pre>\n<p>先前我們將麵包屑建立為一個 Observable，就直接到 html 裡 使用 <code>async</code> 訂閱再來就\n可以撰寫出我們想要的麵包屑樣式囉</p>\n<p>HTML</p>\n<pre><code class=\"language-html\">&lt;ul class=&quot;breadcrumb&quot;&gt;\n  &lt;li *ngFor=&quot;let breadcrumb of breadcrumbs$ | async; last as isLast&quot;&gt;\n    &lt;a [routerLink]=&quot;breadcrumb?.url&quot; *ngIf=&quot;!isLast else last&quot;&gt;\n      {{ breadcrumb.label }}\n      &lt;ng-container *ngIf=&quot;breadcrumb?.params.name&quot;&gt;\n        - {{ breadcrumb?.params.name }}\n      &lt;/ng-container&gt;\n    &lt;/a&gt;\n    &lt;ng-template #last&gt;\n      {{ breadcrumb.label }}\n      &lt;ng-container *ngIf=&quot;breadcrumb?.params.name&quot;&gt;\n        - {{ breadcrumb?.params.name }}\n      &lt;/ng-container&gt;\n    &lt;/ng-template&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<hr>\n<p>實作如下： <a target='_blank' href=\"https://stackblitz.com/edit/angular-routing-breadcrumb\">https://stackblitz.com/edit/angular-routing-breadcrumb</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_bubbling-event","title":"Angular 冒泡事件","date":"2021/09/20","categories":["Angular"],"tags":["Angular","ironman2021"],"summary":"今天就來個說個在新手時期很常遇到，但卻不知為什麼會發生的問題來看一下我們前幾天的表單範例，與圖上 console 的部份在操控表單的時後，發現在點選新增欄位時，連submit 也一起被觸發了！這是怎麼","content":"<p>今天就來個說個在新手時期很常遇到，但卻不知為什麼會發生的問題</p>\n<p>來看一下我們前幾天的表單範例，與圖上 console 的部份</p>\n<p><img src=\"assets/images/ironman/ng_bubbling-event/dlMy78O.gif\" alt=\"\"></p>\n<p>在操控表單的時後，發現在點選新增欄位時，連<code>submit</code> 也一起被觸發了！\n這是怎麼一回事呢！！！，明明就沒有按送出呀！\n原來是 JavaScript 裡的冒泡事件。\n這對經驗豐富的前輩們來說，想必很快就能聯想到這之間的問題，但對還是新手時期的小嫩嫩，卻常常百思不得其解</p>\n<p>而且在表單裡很常遇到這問題，原因是因為通常表單的架構都會是這樣</p>\n<hr>\n<h2 id=\"表單架構\">表單架構</h2>\n<p>.html</p>\n<pre><code class=\"language-html\">&lt;!-- onSubmit --&gt;\n&lt;form [formGroup]=&quot;form&quot; (ngSubmit)=&quot;onSubmit()&quot;&gt;\n  &lt;div\n    formArrayName=&quot;favorites&quot;\n    *ngFor=&quot;let fav of favorites.controls; let idx = index&quot;\n  &gt;\n    &lt;div [formGroupName]=&quot;idx&quot;&gt;\n      &lt;ng-container *ngIf=&quot;idx === 0&quot;&gt;\n        &lt;label for=&quot;&quot;&gt;favorites：&lt;/label&gt;\n        &lt;!-- 新增 Button --&gt;\n        &lt;button (click)=&quot;addField()&quot;&gt;新增&lt;/button&gt;\n        &lt;br /&gt;\n      &lt;/ng-container&gt;\n      &lt;input formControlName=&quot;favorite&quot; type=&quot;text&quot; [value]=&quot;&quot; /&gt;\n      &lt;button (click)=&quot;removeField(idx)&quot;&gt;移除&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;p style=&quot;color:red&quot; *ngIf=&quot;form.errors?.phone&quot;&gt;YOUR PHONE ERROR&lt;/p&gt;\n  &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n<p>在 onSubmit() 事件的裡面，還有著其他事件，<code>新增</code>、<code>移除</code>，而當我點了新增按鈕後，同時也會觸發到 onSubmit() 這個事件</p>\n<p>詳細機制可參考以下，這裡就不詳細說明了</p>\n<p><a target='_blank' href=\"https://ithelp.ithome.com.tw/articles/10191970\">重新認識 JavaScript: Day 14 事件機制的原理</a>\n<a target='_blank' href=\"https://blog.techbridge.cc/2017/07/15/javascript-event-propagation/\">DOM 的事件傳遞機制：捕獲與冒泡</a></p>\n<hr>\n<h2 id=\"事件預設行為\">事件預設行為</h2>\n<p>Angular 裡的 <code>(click)</code> 會有一些預設行為，\n目標事件決定了 <code>$event</code> 物件的形態。如果目標事件是來自原生 DOM 元素的，那麼 <code>$event</code> 是一個<a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Event\">DOM 事件物件</a>，它具有 target 和 target.value 等屬性。</p>\n<p><a target='_blank' href=\"https://angular.tw/guide/event-binding-concepts#handling-events\">https://angular.tw/guide/event-binding-concepts#handling-events</a></p>\n<hr>\n<h3 id=\"該如何阻止它的行為產生呢？\">該如何阻止它的行為產生呢？</h3>\n<p>在 html 裡直接阻擋</p>\n<pre><code class=\"language-html\">&lt;button (click)=&quot;$event.preventDefault();addField()&quot;&gt;新增&lt;/button&gt;\n</code></pre>\n<hr>\n<p>在 ts 裡阻擋</p>\n<p>.html</p>\n<pre><code class=\"language-html\">&lt;button (click)=&quot;addField($event)&quot;&gt;新增&lt;/button&gt;\n</code></pre>\n<p>.ts</p>\n<pre><code class=\"language-ts\">addField(e?: MouseEvent) {\n  if (e) {\n    e.preventDefault();\n  }\n}\n</code></pre>\n<p>以上兩個方式都可以。\n把 click 的預設事件給阻檔掉就能避免其他事件被影響了！</p>\n<p>今天的介紹就到此告一段落囉</p>\n<p>參考資料：\n<a target='_blank' href=\"https://angular.tw/guide/event-binding-concepts#handling-events\">事件繫結的工作原理</a>\n<a target='_blank' href=\"https://ithelp.ithome.com.tw/articles/10191970\">重新認識 JavaScript: Day 14 事件機制的原理</a>\n<a target='_blank' href=\"https://blog.techbridge.cc/2017/07/15/javascript-event-propagation/\">DOM 的事件傳遞機制：捕獲與冒泡</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_cdk-overlay","title":"Angular 客製彈出視窗","date":"2021/10/04","categories":["Angular"],"tags":["Angular","ironman2021"],"summary":"因為我的這個 blog 需要一個彈出視窗做提示，而套件裡的樣式我都不喜歡，所以今天就來客製化一個吧！這次的彈出視窗會使用 Angular Material 裡的 cdk 來做開發前置作業安裝 cdkn","content":"<blockquote>\n<p>因為我的這個 blog 需要一個彈出視窗做提示，而套件裡的樣式我都不喜歡，所以今天就來客製化一個吧！</p>\n</blockquote>\n<p>這次的彈出視窗會使用 Angular Material 裡的 cdk 來做開發</p>\n<hr>\n<h2 id=\"前置作業\">前置作業</h2>\n<p>安裝 cdk</p>\n<pre><code class=\"language-bash\">npm i @angular/cdk\n</code></pre>\n<blockquote>\n<p>注意： 若發現 <code>@angular/cdk</code> 裡的某些功能不能掛載，可以看一下 <code>@angular/cdk</code> 與 <code>@angular/core</code> 的版本是否一樣，若一直報錯不能使用的話，就安裝成同個版本號處理試試 (當時一直踩到這個雷)。</p>\n</blockquote>\n<p>在 <code>styles.scss</code> 引入 css</p>\n<pre><code class=\"language-css\">@import &quot;~@angular/cdk/overlay-prebuilt.css&quot;;\n</code></pre>\n<p>在 <code>app.module.ts</code> 裡 引入 <code>OverlayModule</code></p>\n<pre><code class=\"language-ts\">import { NgModule } from &quot;@angular/core&quot;;\nimport { BrowserModule } from &quot;@angular/platform-browser&quot;;\nimport { FormsModule } from &quot;@angular/forms&quot;;\n\nimport { AppComponent } from &quot;./app.component&quot;;\nimport { OverlayModule } from &quot;@angular/cdk/overlay&quot;;\n\n@NgModule({\n  imports: [BrowserModule, FormsModule, OverlayModule],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n</code></pre>\n<hr>\n<h2 id=\"開始\">開始</h2>\n<p>template</p>\n<pre><code class=\"language-html\">&lt;button (click)=&quot;onClick()&quot; type=&quot;button&quot;&gt;Open&lt;/button&gt;\n\n&lt;ng-template #tpl&gt;\n  &lt;div class=&quot;modal&quot;&gt;\n    &lt;i class=&quot;modal__close&quot; (click)=&quot;onClose()&quot;&gt;X&lt;/i&gt;\n    &lt;div class=&quot;modal__container&quot;&gt;HI 我是彈出視窗內容&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/ng-template&gt;\n</code></pre>\n<p>建立 <code>ng-template</code> 這個是彈出視窗，讓點 button 的時後呼叫。\n可以看看前幾天寫的這篇文 <a target='_blank' href=\"https://ithelp.ithome.com.tw/articles/10273658\">Angular ElementRef、TemplateRef、viewContainerRef 的區別</a></p>\n<p>.ts</p>\n<pre><code class=\"language-ts\">import { Overlay, OverlayConfig, OverlayRef } from &quot;@angular/cdk/overlay&quot;;\nimport { TemplatePortal } from &quot;@angular/cdk/portal&quot;;\nimport {\n  Component,\n  ElementRef,\n  OnInit,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n} from &quot;@angular/core&quot;;\n\n@Component({\n  selector: &quot;my-app&quot;,\n  templateUrl: &quot;./app.component.html&quot;,\n  styleUrls: [&quot;./app.component.css&quot;],\n})\nexport class AppComponent implements OnInit {\n  @ViewChild(&quot;tpl&quot;) tplRef!: TemplateRef&lt;any&gt;;\n  overlayRef!: OverlayRef;\n\n  constructor(\n    private overlay: Overlay,\n    private viewContainerRef: ViewContainerRef\n  ) {}\n\n  ngOnInit(): void {\n    // 設定彈窗出來時的定位\n    const strategy = this.overlay\n      .position()\n      .global()\n      .centerHorizontally()\n      .centerVertically();\n\n    const configs = new OverlayConfig({\n      hasBackdrop: true,\n      positionStrategy: strategy,\n    });\n\n    this.overlayRef = this.overlay.create(configs);\n    this.overlayRef.backdropClick().subscribe((res) =&gt; {\n      this.overlayRef.detach();\n    });\n  }\n\n  onClick() {\n    this.overlayRef.attach(\n      new TemplatePortal(this.tplRef, this.viewContainerRef)\n    );\n  }\n\n  onClose() {\n    this.overlayRef.detach();\n  }\n}\n</code></pre>\n<hr>\n<h3 id=\"彈窗定位方式\">彈窗定位方式</h3>\n<p>彈窗定位：<a target='_blank' href=\"https://material.angular.tw/cdk/overlay/api#OverlayPositionBuilder\">OverlayPositionBuilder</a></p>\n<p>文件上寫的沒有很清楚</p>\n<p>這裡筆記一下</p>\n<p>原點定位 (中心點以 button 為主) <a target='_blank' href=\"https://material.angular.tw/cdk/overlay/api#ConnectedPosition\">https://material.angular.tw/cdk/overlay/api#ConnectedPosition</a></p>\n<blockquote>\n<p>在 constructor 要再多引入 ElementRef</p>\n</blockquote>\n<pre><code class=\"language-ts\">const strategy = this.overlay\n  .position()\n  .flexibleConnectedTo(this.elementRef)\n  .withPositions([\n    {\n      originX: &quot;start&quot;,\n      originY: &quot;bottom&quot;,\n      overlayX: &quot;start&quot;,\n      overlayY: &quot;top&quot;,\n    },\n  ]);\n</code></pre>\n<p>全域定位 (中心點以整個畫面為主) <a target='_blank' href=\"https://material.angular.tw/cdk/overlay/api#GlobalPositionStrategy\">https://material.angular.tw/cdk/overlay/api#GlobalPositionStrategy</a></p>\n<pre><code class=\"language-ts\">const strategy = this.overlay\n  .position()\n  .global()\n  .centerHorizontally()\n  .centerVertically();\n</code></pre>\n<hr>\n<h3 id=\"彈窗設定\">彈窗設定</h3>\n<pre><code class=\"language-ts\">const configs = new OverlayConfig({\n  hasBackdrop: true,\n  positionStrategy: strategy,\n});\n</code></pre>\n<p>這裡我只設定了兩種，</p>\n<p>更多設定方式可以看文件 <a target='_blank' href=\"https://material.angular.tw/cdk/overlay/api#OverlayConfig\">OverlayConfig</a></p>\n<hr>\n<h3 id=\"打開彈窗\">打開彈窗</h3>\n<pre><code class=\"language-ts\">onClick() {\n  this.overlayRef.attach(\n    new TemplatePortal(this.tplRef, this.viewContainerRef)\n  );\n}\n</code></pre>\n<p>建立浮動圖層 <a target='_blank' href=\"https://material.angular.tw/cdk/overlay/api#OverlayRef\">OverlayRef</a></p>\n<h3 id=\"關閉彈窗\">關閉彈窗</h3>\n<pre><code class=\"language-ts\">onClose() {\n  this.overlayRef.detach();\n}\n</code></pre>\n<p>範例：<a target='_blank' href=\"https://stackblitz.com/edit/angular-ivy-ujphmp\">https://stackblitz.com/edit/angular-ivy-ujphmp</a></p>\n<hr>\n<h2 id=\"後記\">後記</h2>\n<p>今天介紹的 cdk 的 overlay 的基本應用，在實作上會再將這個彈窗提出，處理成共用元件，有需要的話直接引入使用就可以囉。</p>\n<!-- https://mainawycliffe.dev/blog/how-to-build-a-reusable-modal-overlay-dialog-using-angular-cdk -->\n"},{"directory":"angular","layout":"Angular","slug":"ng_css","title":"Angular 筆記 css 樣式篇","date":"2021/10/05","categories":["Angular"],"tags":["Angular","ironman2021"],"summary":"今天就只是個筆記，單純記錄寫法如何使用，以便自己日後查找，畢竟人非聖賢、會忘難免 XDcss套用 className變數為 isDark，value 必需為 booleanisDark = true;","content":"<p>今天就只是個筆記，單純記錄寫法如何使用，以便自己日後查找，畢竟人非聖賢、會忘難免 XD</p>\n<h2 id=\"css\">css</h2>\n<p>套用 className</p>\n<p>變數為 isDark，value 必需為 boolean</p>\n<pre><code class=\"language-ts\">isDark = true;\n</code></pre>\n<p>在 html 的 dom 裡設定</p>\n<pre><code class=\"language-html\">&lt;p [ngClass]=&quot;isDark ? dark : light&quot;&gt;test&lt;/p&gt;\n</code></pre>\n<pre><code class=\"language-html\">&lt;p [ngClass]=&quot;{'isDark': true}&quot;&gt;test&lt;/p&gt;\n</code></pre>\n<p><a target='_blank' href=\"https://angular.tw/api/common/NgClass\">https://angular.tw/api/common/NgClass</a></p>\n<p><a target='_blank' href=\"https://github.com/angular/angular/issues/40623\">Document difference between [NgClass] and [class] [NgClass] 與 [class] 之間的差異</a></p>\n<hr>\n<h2 id=\"style\">style</h2>\n<p>在 html 的 dom 裡設定</p>\n<pre><code class=\"language-html\">&lt;p\n  [ngStyle]=&quot;{'background-color': '#159', 'color':'#fff', 'font-size': '20px'}&quot;\n&gt;\n  test\n&lt;/p&gt;\n</code></pre>\n<pre><code class=\"language-ts\">isDark = true;\n</code></pre>\n<pre><code class=\"language-html\">&lt;p [ngStyle]=&quot;isDark ? {'background-color': '#159', 'color':'#fff'} : {}&quot;&gt;\n  test\n&lt;/p&gt;\n</code></pre>\n<p>若 屬性的值為 value</p>\n<pre><code class=\"language-ts\">width = 60;\nheight = 20;\n</code></pre>\n<pre><code class=\"language-html\">&lt;p [ngStyle]=&quot;{'width.px': width, 'height.px': height}&gt;test&lt;/p&gt;\n</code></pre>\n<p><a target='_blank' href=\"https://angular.tw/api/common/NgStyle\">https://angular.tw/api/common/NgStyle</a></p>\n<hr>\n<h2 id=\":host-設定宿主(host)的樣式\">:host 設定宿主(host)的樣式</h2>\n<pre><code class=\"language-css\">:host {\n  display: block;\n  border: 1px solid black;\n}\n</code></pre>\n<p>在 css 裡加上條件式</p>\n<pre><code class=\"language-css\">:host(.active) {\n  border-width: 3px;\n}\n</code></pre>\n<hr>\n<h2 id=\"@hostbinding\">@HostBinding</h2>\n<p>在 ts 裡直接綁定 class 到 宿主上</p>\n<pre><code class=\"language-ts\">@HostBinding() class = `hey`;\n</code></pre>\n<p>直接綁定 id 到 宿主上</p>\n<pre><code class=\"language-ts\">@HostBinding() id = `hey`;\n</code></pre>\n<p>或是直接設定 style</p>\n<pre><code class=\"language-ts\">@HostBinding() style = `background: #159;display: block;`;\n</code></pre>\n<h3 id=\"套上變數\">套上變數</h3>\n<pre><code class=\"language-ts\">@Input() isColor!: string;\n\n@HostBinding('style.background') get color() {\n  return this.isColor;\n}\n</code></pre>\n<pre><code class=\"language-ts\">@HostBinding('class.value') get color() {\n  return true;\n}\n</code></pre>\n<p>若是 return true，class 會掛載 <code>value</code> 這個 class name</p>\n<pre><code class=\"language-ts\">@HostBinding('class') get color() {\n  return 'yoo';\n}\n</code></pre>\n<p>若 <code>HostBinding</code> 裡的 只有 class，則需 return 出一個字串，return 出來的字串則為 class name</p>\n<hr>\n"},{"directory":"angular","layout":"Angular","slug":"ng_deploy","title":"如何使用 Github Actions 自動部署 Angular 到 Github Pages","date":"2021/10/15","categories":["Angular"],"tags":["Angular","Github","ironman2021"],"summary":"Github 多了一個 Actions 的新功能，當 push 檔案到 Github 的時後，就會自動跑 CI/CD 部署這個功能真是太方便啦!!!Angular DeployAngular 有提供了","content":"<p>Github 多了一個 Actions 的新功能，當 <code>push</code> 檔案到 Github 的時後，就會自動跑 CI/CD 部署\n這個功能真是太方便啦!!!</p>\n<hr>\n<h2 id=\"angular-deploy\">Angular Deploy</h2>\n<p>Angular 有提供了一個 <a target='_blank' href=\"https://angular.tw/guide/deployment\">Deploy</a> 的功能\n這次選用了 <code>angular-cli-ghpages</code></p>\n<p>加入 <code>angular-cli-ghpages</code></p>\n<pre><code class=\"language-bash\">ng add angular-cli-ghpages\n</code></pre>\n<p>加入完後 在 <code>angular.json</code> 的最下面會多了 deploy 的設定</p>\n<pre><code class=\"language-json\">...略\n\n&quot;deploy&quot;: {\n  &quot;builder&quot;: &quot;angular-cli-ghpages:deploy&quot;,\n  &quot;options&quot;: {\n    &quot;baseHref&quot;: &quot;/&lt;路徑名稱&gt;/&quot;,\n    &quot;name&quot;: &quot;Mandy&quot;,\n    &quot;email&quot;: &quot;123@123.com&quot;\n  }\n}\n</code></pre>\n<p>在 <code>options</code> 裡依序填上 設定網址、名稱、mail</p>\n<hr>\n<h2 id=\"設定-actions-yaml-檔\">設定 Actions YAML 檔</h2>\n<p>在根目錄裡建立 <code>.github\\workflows</code> 資料夾\n再建立一支<code>yaml</code>檔</p>\n<p><img src=\"assets/images/angular/ng_deploy/001.png\" alt=\"\"></p>\n<p>設定檔如下：\n.yml</p>\n<pre><code class=\"language-yml\">name: Deploy\n\non:\n  push:\n    branches: [main]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [14.x]\n        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v2\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Prepare and deploy\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          npm install\n          npm run ng -- deploy --no-silent\n</code></pre>\n<p><code>name</code> 可以自行設定\n<code>uses</code> 使用其他人寫好的腳本\n<code>with</code> 再透過 with 傳遞腳本參數</p>\n<blockquote>\n<p>更詳細的設定可以到 GitHub 的文件裡看 <a target='_blank' href=\"https://docs.github.com/cn/actions/quickstart\">GitHub Actions</a></p>\n</blockquote>\n<hr>\n<h2 id=\"push-到-github\">push 到 github</h2>\n<p>push 上去後 github 會偵側到檔案自動執行</p>\n<p><img src=\"assets/images/angular/ng_deploy/002.png\" alt=\"\"></p>\n<p>點進去後可以看到部署的過程</p>\n<p><img src=\"assets/images/angular/ng_deploy/003.png\" alt=\"\"></p>\n<p>都沒問題後會顯示勾勾的狀態</p>\n<hr>\n<h2 id=\"設定發佈頁面\">設定發佈頁面</h2>\n<p>檔案發佈完後會看到多了一個 <code>gh-pages</code> 分支</p>\n<p><img src=\"assets/images/angular/ng_deploy/004.png\" alt=\"\"></p>\n<p>再到設定裡將發佈頁面設定到 <code>gh-pages</code> 就能網址上看到設定的頁面囉</p>\n<p><img src=\"assets/images/angular/ng_deploy/005.png\" alt=\"\"></p>\n<hr>\n<p>附錄：</p>\n<p><a target='_blank' href=\"https://github.com/settings/billing\">觀看 Github Actions 使用量</a></p>\n<p>感謝 <code>VP</code> 大大熱情釋疑</p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_detect-encoding","title":"使用 Angular 做檔案編碼檢測 (detect-encoding)","date":"2021/09/30","categories":["Angular"],"tags":["Angular","ironman2021"],"summary":"來由前一陣子，後端有個需求是在檔案上傳前，需要提前知道上傳的檔案編碼 是 UTF-8 或是 ascii 等，才能決定要不要將檔案放進資料庫，或是在這之前再做一次轉檔。今天的內容跟 Angular 比較","content":"<h2 id=\"來由\">來由</h2>\n<p>前一陣子，後端有個需求是在檔案上傳前，需要提前知道上傳的檔案編碼 是 UTF-8 或是 ascii 等，才能決定要不要將檔案放進資料庫，或是在這之前再做一次轉檔。</p>\n<p>今天的內容跟 Angular 比較沒有關係，屬於套件分享，但因也是使用 Angular 實作，所以也就放進來了。</p>\n<hr>\n<h2 id=\"實作\">實作</h2>\n<pre><code class=\"language-bash\">npm i jschardet\n</code></pre>\n<p>template</p>\n<pre><code class=\"language-html\">&lt;div class=&quot;form-group&quot;&gt;\n  &lt;label for=&quot;file&quot;&gt;Choose File&lt;/label&gt;\n  &lt;input type=&quot;file&quot; id=&quot;file&quot; (change)=&quot;fileChange($event)&quot; /&gt;\n&lt;/div&gt;\n\n&lt;br /&gt;\nYour Encoding：{{ encoding$ | async }}\n</code></pre>\n<p>.ts 檔</p>\n<pre><code class=\"language-ts\">import { Component, VERSION } from &quot;@angular/core&quot;;\nimport jschardet from &quot;jschardet&quot;;\nimport { Subject } from &quot;rxjs&quot;;\n\n@Component({\n  selector: &quot;my-app&quot;,\n  templateUrl: &quot;./app.component.html&quot;,\n  styleUrls: [&quot;./app.component.css&quot;],\n})\nexport class AppComponent {\n  fileToUpload: File = null;\n  encoding$ = new Subject();\n\n  fileChange(event: any): void {\n    const file = event.target.files[0];\n\n    const reader = new FileReader();\n    reader.onload = (e: any) =&gt; {\n      const csvResult = e.target.result.split(/\\r|\\n|\\r\\n/);\n      const encoding = jschardet.detect(csvResult.toString()).encoding;\n\n      this.encoding$.next(encoding);\n    };\n    reader.readAsBinaryString(file);\n  }\n}\n</code></pre>\n<hr>\n<p>範例：\n<a target='_blank' href=\"https://stackblitz.com/edit/angular-detect-encoding\">https://stackblitz.com/edit/angular-detect-encoding</a></p>\n<p>參考資料：\n<a target='_blank' href=\"https://guillim.github.io/javascript/2020/08/28/csv-encoding-detection-javascript.html\">csv-encoding-detection-javascript</a></p>\n<hr>\n<h2 id=\"附錄\">附錄</h2>\n<p>後來使用 node 寫成小工具</p>\n<p>git：<a target='_blank' href=\"https://github.com/mtwmt/detect-encoding\">https://github.com/mtwmt/detect-encoding</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_dynamic","title":"Angular 動態載入組件","date":"2019/07/21","categories":["Angular"],"tags":["Angular"],"summary":"動態載入組件情境：tab 切換app.module.ts// ...略import { TaskComponent } from './tab/task/task.component';import ","content":"<h1 id=\"動態載入組件\">動態載入組件</h1>\n<p>情境：tab 切換</p>\n<p>app.module.ts</p>\n<pre><code class=\"language-JS\">// ...略\nimport { TaskComponent } from './tab/task/task.component';\nimport { AnalysisComponent } from './tab/analysis/analysis.component';\nimport { SoundComponent } from './tab/sound/sound.component';\n\n@NgModule({\n  declarations: [\n    // ...略\n    TaskComponent,\n    AnalysisComponent,\n    SoundComponent,\n  ],\n  // 加入這串 將需被切換的組件放入\n  entryComponents: [\n    TaskComponent,\n    AnalysisComponent,\n    SoundComponent\n  ],\n})\nexport class AppModule { }\n\n</code></pre>\n<p>component.html</p>\n<pre><code class=\"language-html\">&lt;div class=&quot;tab&quot;&gt;\n  &lt;div (click)=&quot;doCurrect('task')&quot;&gt;&lt;/div&gt;\n  &lt;div (click)=&quot;doCurrect('analysis')&quot;&gt;&lt;/div&gt;\n  &lt;div (click)=&quot;doCurrect('sound')&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;tab-cont&quot;&gt;\n  &lt;!-- 要切換的地方 --&gt;\n  &lt;ng-container *ngComponentOutlet=&quot;comps.get(currect)&quot;&gt;&lt;/ng-container&gt;\n&lt;/div&gt;\n</code></pre>\n<p>component.ts <code>新增預載入的component</code></p>\n<pre><code class=\"language-JS\">// ...略\nimport { TaskComponent } from './task/task.component';\nimport { AnalysisComponent } from './analysis/analysis.component';\nimport { SoundComponent } from './sound/sound.component';\n\ncurrect = '';\ncomps = new Map&lt;string, any&gt;(\n  [\n    ['task', TaskComponent],\n    ['analysis', AnalysisComponent],\n    ['sound', SoundComponent],\n  ]\n);\ndoCurrect(el: string) {\n  this.currect = el;\n}\n</code></pre>\n<p>另一種做法可以使用 if else 來做</p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_ElementRef-TemplateRef-viewContainerRef","title":"Angular ElementRef、TemplateRef、viewContainerRef 的區別","date":"2021/09/28","categories":["Angular"],"tags":["Angular","ironman2021"],"summary":"今天就來聊聊 ElementRef、TemplateRef、viewContainerRef，者實說，在這之前一直都沒很認真搞懂這部份就趁著這次機會一起來看看吧！ElementRef用於檢視 HTML","content":"<p>今天就來聊聊 <code>ElementRef</code>、<code>TemplateRef</code>、<code>viewContainerRef</code>，者實說，在這之前一直都沒很認真搞懂這部份\n就趁著這次機會一起來看看吧！</p>\n<h2 id=\"elementref\">ElementRef</h2>\n<p>用於檢視 HTML DOM 元素，可以在瀏覽器中取得 DOM 的原生 Element</p>\n<p><a target='_blank' href=\"https://angular.tw/api/core/ElementRef\">ElementRef</a></p>\n<p>.html</p>\n<pre><code class=\"language-html\">&lt;span #elRef&gt;I am span&lt;/span&gt;\n</code></pre>\n<p>.ts</p>\n<pre><code class=\"language-ts\">export class TemplateComponent implements AfterViewInit {\n  @ViewChild(&quot;elRef&quot;) elRef!: ElementRef;\n\n  ngAfterViewInit() {\n    console.log(&quot;ElementRef&quot;, this.elRef.nativeElement.textContent); //I am span\n  }\n}\n</code></pre>\n<hr>\n<h2 id=\"templateref\">TemplateRef</h2>\n<p>屬於模板元素的一種，在頁面裡不會呈現，但可透過 <code>ViewContainerRef</code> 將它渲染出來</p>\n<p>.html</p>\n<pre><code class=\"language-html\">&lt;ng-template #tpRef&gt;&lt;span&gt;I am span in template&lt;/span&gt;&lt;/ng-template&gt;\n</code></pre>\n<p>.ts</p>\n<pre><code class=\"language-ts\">export class TemplateComponent implements AfterViewInit {\n  @ViewChild('tpRef') tplRef!: TemplateRef&lt;any&gt;;\n\n  ngAfterViewInit() {\n    console.log(&quot;TemplateRef&quot;, this.tplRef.elementRef.nativeElement); //&lt;!--container--&gt;\n    console.log(&quot;TemplateRef&quot;, this.tplRef.elementRef.textContent); //container\n  }\n}\n</code></pre>\n<p>這裡可以看到 把 TemplateRef console 出來會是一個 container，在 html 上是就只是一個註解。</p>\n<hr>\n<h2 id=\"viewcontainerref\">viewContainerRef</h2>\n<p>它用來操控顯示的內容\n有著 host 與 embedded view 來建立動態顯示</p>\n<p>接續著剛剛的 <code>TemplateRef</code></p>\n<p>.html</p>\n<pre><code class=\"language-html\">&lt;span&gt;I am first span&lt;/span&gt;\n&lt;ng-container #vc&gt;&lt;/ng-container&gt;\n&lt;span&gt;I am last span&lt;/span&gt;\n\n&lt;ng-template #tpRef\n  &gt;&lt;span style=&quot;color:red;&quot;&gt;I am span in template&lt;/span&gt;&lt;/ng-template\n&gt;\n\n&lt;!-- 加兩顆按鈕，試著操控 TemplateRef --&gt;\n&lt;button (click)=&quot;onRemoveTpl()&quot;&gt;removeTpl&lt;/button&gt;\n&lt;button (click)=&quot;onAddTpl()&quot;&gt;addTpl&lt;/button&gt;\n</code></pre>\n<p>.ts</p>\n<pre><code class=\"language-ts\">export class TemplateComponent implements AfterViewInit {\n  @ViewChild('tpRef') tplRef!: TemplateRef&lt;any&gt;;\n\n  ngAfterViewInit() {\n    const elem = this.tplRef.createEmbeddedView(null);\n    this.vc.insert(elem);\n  }\n\n  onRemoveTpl() {\n    this.vc.remove();\n  }\n\n  onAddTpl() {\n    this.vc.createEmbeddedView(this.tplRef);\n  }\n}\n</code></pre>\n<p>試著玩玩看範例吧！</p>\n<p>範例：<a target='_blank' href=\"https://stackblitz.com/edit/angular-ivy-sffarv\">https://stackblitz.com/edit/angular-ivy-sffarv</a></p>\n<hr>\n<p>參考資料：</p>\n<p><a target='_blank' href=\"https://indepth.dev/posts/1052/exploring-angular-dom-manipulation-techniques-using-viewcontainerref\">Exploring Angular DOM manipulation techniques using ViewContainerRef</a></p>\n<p><a target='_blank' href=\"https://segmentfault.com/a/1190000008672478\">Angular 2 TemplateRef &amp; ViewContainerRef</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_emit","title":"Angular 組件傳值","date":"2019/07/20","categories":["Angular"],"tags":["Angular"],"summary":"父子組件互傳( input output )一張圖說明 input 與 output 值的互相傳遞父組件 傳值給 子組件// 父組件import { Component } from '@angula","content":"<h1 id=\"父子組件互傳(-input-output-)\">父子組件互傳( input output )</h1>\n<p>一張圖說明 input 與 output 值的互相傳遞\n<img src=\"assets/images/angular/emit/input-output.png\"  loading=\"lazy\" /></p>\n<h2 id=\"父組件-傳值給-子組件\">父組件 傳值給 子組件</h2>\n<pre><code class=\"language-js\">// 父組件\nimport { Component } from '@angular/core';\n@Component({\n  selector: 'app-root',\n  template: ` &lt;app-child [dataSource]=&quot;data&quot;&gt;&lt;/app-child&gt; `,\n  styleUrls: [''],\n})\nexport class AppComponent {\n  data = '我是一筆資料';\n  constructor() {}\n}\n\n// child 子組件\nimport { Component, Input } from '@angular/core';\n@Component({\n  selector: 'app-child',\n  template: ` &lt;div&gt;{{ dataSource }}&lt;/div&gt; `,\n  styleUrls: [''],\n})\nexport class ListComponent {\n  @Input() dataSource: string;\n  constructor() {}\n}\n</code></pre>\n<h2 id=\"透過-setting-監聽\">透過 setting 監聽</h2>\n<p><a target='_blank' href=\"https://angular.tw/guide/component-interaction#intercept-input-property-changes-with-a-setter\">透過 setter 截聽輸入屬性值的變化</a></p>\n<pre><code class=\"language-html\">&lt;!-- html 傳值 --&gt;\n&lt;app-name [name]=&quot;'this is a value'&quot;&gt;&lt;/app-name&gt;\n</code></pre>\n<pre><code class=\"language-js\">// name.ts\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-name',\n  template: '&lt;h3&gt;&quot;{{name}}&quot;&lt;/h3&gt;'\n})\nexport class NameChildComponent {\n  private _name = '';\n  @Input()\n  set name(params: string) {\n    // 傳進來的 params =&gt; this is a value\n    // do Something....\n    params = 'aaa'  // 將 params 改為 aaa 後\n    this._name = params;\n  }\n\n  get name(): string {\n    // 回傳出去的值 就是 aaa\n    return this._name;\n  }\n}\n</code></pre>\n<h2 id=\"子組件-傳值給-父組件\">子組件 傳值給 父組件</h2>\n<pre><code class=\"language-js\">// 父組件\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: ` &lt;app-child (doOpen)=&quot;getOpen($event)&quot;&gt;&lt;/app-child&gt; `,\n  styleUrls: [''],\n})\nexport class AppComponent {\n  isOpen;\n  constructor() {}\n  getOpen(data: any) {\n    this.isOpen = data;\n  }\n}\n\n// child 子組件\nimport { Component, Output, EventEmitter } from '@angular/core';\n@Component({\n  selector: 'app-child',\n  templateUrl: './child.component.html',\n  styleUrls: [''],\n})\nexport class ChildComponent {\n  @Output() doOpen: EventEmitter&lt;any&gt; = new EventEmitter();\n  isOpen = false;\n  constructor() {}\n  open() {\n    this.isOpen = !this.isOpen;\n    this.doOpen.emit(this.isOpen);\n  }\n}\n</code></pre>\n<hr>\n<h1 id=\"組件與組件之間的傳值(service)\">組件與組件之間的傳值(service)</h1>\n<p>把需要傳遞的 data 存到 service 裡然後再到 service 裡存取需要用的值</p>\n<p>分別建立一個 list 跟 detail 的 compontent</p>\n<ul>\n<li>list compontent</li>\n</ul>\n<pre><code class=\"language-js\">import { Component, OnInit } from '@angular/core';\nimport { StoreService } from '../store.service';\n@Component({\n  selector: 'app-list',\n  template: `&lt;ul class=&quot;tab&quot;&gt;\n    &lt;li (click)=&quot;doTab('about')&quot;&gt;about&lt;/li&gt;\n    &lt;li (click)=&quot;doTab('news')&quot;&gt;news&lt;/li&gt;\n    &lt;li (click)=&quot;doTab('contact')&quot;&gt;contact&lt;/li&gt;\n  &lt;/ul&gt;`,\n  styleUrls: ['./list.component.css']\n})\nexport class ListComponent implements OnInit {\n\n  constructor(\n    private storeService: StoreService\n  ) { }\n\n  ngOnInit() {\n  }\n  doTab( str:string ){\n    this.storeService.getTabVal( str )\n  }\n}\n</code></pre>\n<ul>\n<li>detail compontent</li>\n</ul>\n<pre><code class=\"language-js\">import { Component, OnInit } from '@angular/core';\nimport { StoreService } from '../store.service';\n@Component({\n  selector: 'app-detail',\n  template: `\n  &lt;hr /&gt;\n  &lt;p&gt;{{ detailData }}&lt;/p&gt;`,\n  styleUrls: ['./detail.component.css']\n})\nexport class DetailComponent implements OnInit {\n\n  detailData;\n\n  constructor(\n    private storeService: StoreService\n  ) { }\n\n  ngOnInit() {\n    this.storeService.tabVal.subscribe( res =&gt; {\n      this.detailData = res;\n    })\n  }\n}\n</code></pre>\n<ul>\n<li>store.service (用來負責存取資料的地方 當做一個小型資料庫)</li>\n</ul>\n<pre><code class=\"language-js\">import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoreService {\n  tabVal$ = new Subject();\n  constructor() {}\n  getTabVal(str: string) {\n    this.tabVal$.next(str);\n  }\n}\n</code></pre>\n<p><a target='_blank' href=\"https://stackblitz.com/edit/angular-service-passvalue\">https://stackblitz.com/edit/angular-service-passvalue</a></p>\n<p>參考資料：</p>\n<p><a target='_blank' href=\"https://angular.tw/guide/component-interaction\">Angular - 元件之間的互動</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_form-controlValueAccessor","title":"Angular ControlValueAccessor (客製表單控制項)","date":"2022/03/13","categories":["Angular"],"tags":["Angular","Angular Form"],"summary":"當需要做 component 裡的表單特定值的連動，就會 ControlValueAccessor 就是不可或缺的要件ControlValueAccessor建立新的 component 透過 imp","content":"<p>當需要做 <code>component</code> 裡的表單特定值的連動，就會 <code>ControlValueAccessor</code> 就是不可或缺的要件</p>\n<h2 id=\"controlvalueaccessor\">ControlValueAccessor</h2>\n<p>建立新的 component 透過 implements <code>ControlValueAccessor</code> 達到表單值與不同 component 間的串連</p>\n<p>可以看到官網裡 <a target='_blank' href=\"https://angular.tw/api/forms/ControlValueAccessor\">https://angular.tw/api/forms/ControlValueAccessor</a></p>\n<p>使用 ControlValueAccessor 定義一個介面，這個介面充當 Angular 表單 API 和 DOM 中的原生元素之間的橋樑。</p>\n<h3 id=\"開始建立\">開始建立</h3>\n<p>在 <code>@Component</code> 註冊 <code>NG_VALUE_ACCESSOR</code></p>\n<pre><code class=\"language-ts\">{\n  provide: NG_VALUE_ACCESSOR,\n  multi: true,\n  useExisting: forwardRef(() =&gt; CustomFormComponent),\n},\n</code></pre>\n<p>interface 裡包含了四個必須加入的 function，以便與父層連動，分別為</p>\n<ul>\n<li>writeValue\n從這裡會接收到父層傳進來的值，或是外部的值有被更動過，都會從這裡接收到</li>\n</ul>\n<pre><code class=\"language-ts\">writeValue(obj: any) {}\n</code></pre>\n<ul>\n<li>registerOnChange\n註冊一個方法，當使用 <code>this.onChange( u r value )</code> 在這一層所更動的值，會同步更新至父層的 formValue</li>\n</ul>\n<pre><code class=\"language-ts\">onChange = (value: any) =&gt; value;\n\nregisterOnChange(onChange: any) {\n  this.onChange = onChange;\n}\n</code></pre>\n<ul>\n<li>registerOnTouched\n如同 registerOnChange，只要被 Touched(bulr) 過後 同時狀態也會被更新</li>\n</ul>\n<pre><code class=\"language-ts\">onTouched = () =&gt; {};\n\nregisterOnTouched(onTouched: any) {\n  this.onTouched = onTouched;\n}\n</code></pre>\n<ul>\n<li>setDisabledState\n更新 disable 的狀態。</li>\n</ul>\n<pre><code class=\"language-js\">disabled = false;\n\nsetDisabledState(disabled: boolean) {\n  this.disabled = disabled;\n}\n</code></pre>\n<hr>\n<h2 id=\"實現-controlvalueaccessor\">實現 ControlValueAccessor</h2>\n<p>ts</p>\n<pre><code class=\"language-ts\">@Component({\n  selector: 'app-custom-form',\n  templateUrl: './custom-form.component.html',\n  styleUrls: ['./custom-form.component.css'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: forwardRef(() =&gt; CustomFormComponent),\n    },\n  ],\n})\nexport class CustomFormComponent implements ControlValueAccessor\n{\n  // 預設表單\n  public form: FormGroup = new FormGroup({\n    age: new FormControl(),\n    desc: new FormControl(),\n  });\n\n  onChange: (value) =&gt; value;\n  onTouched: () =&gt; {};\n\n  // 用來接收 touched 的狀態\n  touched = false;\n  // 用來接收 disabled 的狀態\n  disabled = false;\n\n  writeValue(obj: any): void {\n    // 父層做有被更新的話，會在這裡更新\n    this.form.patchValue(obj);\n  }\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  onInputChange() {\n    // 當 formValue 被更新時，需觸發 onTouched 與 onChange\n    this.onTouched();\n    this.onChange(this.form.value)\n  }\n</code></pre>\n<p>html</p>\n<pre><code class=\"language-html\">&lt;form [formGroup]=&quot;form&quot;&gt;\n  &lt;div&gt;\n    &lt;label for=&quot;&quot;&gt;age:&lt;/label&gt;\n    &lt;input formControlName=&quot;age&quot; type=&quot;text&quot; (change)=&quot;onInputChange()&quot; /&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=&quot;&quot;&gt;desc:&lt;/label&gt;\n    &lt;input formControlName=&quot;desc&quot; type=&quot;tel&quot; (change)=&quot;onInputChange()&quot; /&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n</code></pre>\n<p>範例：<a target='_blank' href=\"https://stackblitz.com/edit/angular-ivy-huhcgi\">https://stackblitz.com/edit/angular-ivy-huhcgi</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_form-setValue-vs-patchValue","title":"Angular Reactive Form 表單 setValue 與 patchValue 差異","date":"2021/09/16","categories":["Angular"],"tags":["Angular","ironman2021"],"summary":"今天就來說說 setValue 與 patchValue 差異這部份吧一開始不太能理解這 setValue 與 patchValue 到底差在哪裡(官網的說明讓我不是很懂，理解力太差了 XD)，不是一","content":"<p>今天就來說說 setValue 與 patchValue 差異這部份吧</p>\n<p>一開始不太能理解這 setValue 與 patchValue 到底差在哪裡(官網的說明讓我不是很懂，理解力太差了 XD)，不是一樣都是賦值給 form 嗎</p>\n<p>這幾天在使用的過程中，踩了一些雷後才懂，一個下午就這樣不見了，但！是值得的，只是我又要加班了 XDDDD</p>\n<h2 id=\"踩雷過程\">踩雷過程</h2>\n<p>這是表單裡的格式與所要塞入表單裡的資料</p>\n<pre><code class=\"language-ts\">data = {\n  name: &quot;Mandy&quot;,\n  phone: &quot;0912345678&quot;,\n  favoritesOptions: [\n    { id: 1, favorite: &quot;book&quot; },\n    { id: 2, favorite: &quot;sleep&quot; },\n    { id: 3, favorite: &quot;shopping&quot; },\n  ],\n};\n\nexport class FormComponent implements OnInit {\n  form: FormGroup = new FormGroup({\n    name: new FormControl(),\n    phone: new FormControl(),\n    favorites: new FormArray([]),\n  });\n}\n</code></pre>\n<p>一開始要賦予初始值，我是這樣寫的\n.ts</p>\n<pre><code class=\"language-ts\"> ngOnInit(): void {\n    this.form.setValue({\n      name: this.data.name,\n      phone: this.data.phone,\n    });\n\n    this.data.favoritesOptions.forEach((e) =&gt; {\n      this.favorites.push(\n        new FormGroup({\n          id: new FormControl(e.id),\n          favorite: new FormControl(e.favorite),\n        })\n      );\n    });\n }\n</code></pre>\n<p>當時我以為對 form 表單已經很熟了，結果 想不到啊想不到，就噴了這個錯\n<img src=\"assets/images/ironman/ng_form-setValue-vs-patchValue/ZLJUlxk.png\" alt=\"\"></p>\n<p>試著將 forEach 這串拿掉後，錯誤依然在\n接著我將 code 改為</p>\n<pre><code class=\"language-ts\">this.form.setValue({\n  name: this.data.name,\n  phone: this.data.phone,\n  favorites: [],\n});\n</code></pre>\n<p>錯誤才消失，但這不是我的要結果啊啊啊，陣列裡的值沒有出來。\n後來我試著將 code 裡面的 setValue 改 patchValue</p>\n<pre><code class=\"language-ts\">this.form.patchValue({\n  name: this.data.name,\n  phone: this.data.phone,\n});\n</code></pre>\n<p>疑！錯誤消失了！！\n接著再將之前拿掉的 forEach 補回去\n哇！！！是我要的結果</p>\n<p>接著再回官網裡看說明，<a target='_blank' href=\"https://angular.tw/guide/reactive-forms#updating-parts-of-the-data-model\">更新部分資料模型</a></p>\n<hr>\n<h2 id=\"setvalue\">setValue</h2>\n<p>官網說明：\n使用 setValue() 方法來為單個控制元件設定新值。\nsetValue() <code>方法會嚴格遵循表單組的結構，並整體性替換控制元件的值。</code></p>\n<p>意思就是，表單裡的結構有哪些資料，必須 <code>1:1</code> 的放上去，缺一不可。</p>\n<p>若想使用 <code>setValue</code> 單獨修改表單裡其中一個值的部份，可以這樣做</p>\n<pre><code class=\"language-ts\">this.form.get(&quot;name&quot;)?.setValue(this.data.name);\n</code></pre>\n<hr>\n<h2 id=\"patchvalue\">patchValue</h2>\n<p>官網說明：\n使用 patchValue() 方法可以用物件中所定義的任何屬性為表單模型進行替換。</p>\n<p>意思就是，我可以隨心所欲，想更新哪個值就更新哪個值\n後來估狗翻譯了一下 patch 為修補的意思 (我為我的英文能力哀悼)\n所以 patchValue 定義為我要修改裡面的值，不受表單的結構限制</p>\n<hr>\n<p>到這裡才算完整了解這兩者的差異性 XD</p>\n<p>參考資料：\n<a target='_blank' href=\"https://angular.tw/guide/reactive-forms#updating-parts-of-the-data-model\">更新部分資料模型</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_form","title":"Angular Reactive Form 表單","date":"2021/09/13","categories":["Angular"],"tags":["Angular","Angular Form","ironman2021"],"summary":"表單表單在實作上是件常見的的處理，為什麼會寫這篇呢？實在是因為我太容易忘了 XD還記得一開始接觸到表單操控時， Angular reactive form 的官方文件它雖然寫的很清楚，但對於當時剛趟入","content":"<h2 id=\"表單\">表單</h2>\n<p>表單在實作上是件常見的的處理，為什麼會寫這篇呢？實在是因為我太容易忘了 XD\n還記得一開始接觸到表單操控時， Angular reactive form 的官方文件它雖然寫的很清楚，但對於當時剛趟入 Angular 領域的我 還是看的一頭霧水，尤其是在 formArray 的應用上，那麼，就趁著這次機會記錄下來吧！</p>\n<hr>\n<h2 id=\"實作\">實作</h2>\n<p>app.module.ts</p>\n<pre><code class=\"language-ts\">@NgModule({\n  declarations: [\n    ...\n  ],\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    ...\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n</code></pre>\n<p>務必在 app.module.ts 裡加上 FormsModule 與 ReactiveFormsModule，否則會報錯。</p>\n<hr>\n<p>.ts</p>\n<pre><code class=\"language-ts\">export class FormComponent implements OnInit {\n  form: FormGroup = new FormGroup({\n    name: new FormControl(),\n    phone: new FormControl(),\n    favorites: new FormArray([]),\n  });\n\n  get favorites() {\n    return this.form.get(&quot;favorites&quot;) as FormArray;\n  }\n\n  // 新增\n  addField(e?: MouseEvent, value?: any) {\n    if (e) {\n      e.preventDefault();\n    }\n\n    const id =\n      this.favorites.controls.length &gt; 0\n        ? this.favorites.value[this.favorites.value.length - 1].id + 1\n        : 0;\n\n    this.favorites.push(\n      new FormGroup({\n        id: new FormControl(id),\n        favorite: new FormControl(),\n      })\n    );\n  }\n\n  // 移除\n  removeField(index: number, e?: MouseEvent): void {\n    if (e) {\n      e.preventDefault();\n    }\n    if (this.favorites.value.length &gt; 1) {\n      this.favorites.removeAt(index);\n    }\n  }\n\n  onSubmit(): void {\n    console.log(&quot;onSubmit&quot;, this.form.value);\n  }\n}\n</code></pre>\n<p>.html</p>\n<pre><code class=\"language-html\">&lt;form [formGroup]=&quot;form&quot; (ngSubmit)=&quot;onSubmit()&quot;&gt;\n  &lt;div&gt;\n    &lt;label for=&quot;&quot;&gt;name：&lt;/label&gt;\n    &lt;input formControlName=&quot;name&quot; type=&quot;text&quot; /&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=&quot;&quot;&gt;phone：&lt;/label&gt;\n    &lt;input formControlName=&quot;phone&quot; type=&quot;tel&quot; /&gt;\n  &lt;/div&gt;\n  &lt;div\n    formArrayName=&quot;favorites&quot;\n    *ngFor=&quot;let fav of favorites.controls; let idx = index&quot;\n  &gt;\n    &lt;div [formGroupName]=&quot;idx&quot;&gt;\n      &lt;ng-container *ngIf=&quot;idx === 0&quot;&gt;\n        &lt;label for=&quot;&quot;&gt;favorites：&lt;/label&gt;\n        &lt;button (click)=&quot;addField($event)&quot;&gt;新增&lt;/button&gt;\n        &lt;br /&gt;\n      &lt;/ng-container&gt;\n      &lt;input formControlName=&quot;favorite&quot; type=&quot;text&quot; [value]=&quot;&quot; /&gt;\n      &lt;button (click)=&quot;removeField(idx, $event)&quot;&gt;移除&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"關於-reactive-form-裡的一些架構\">關於 reactive form 裡的一些架構</h2>\n<p>官方文件的解釋：\n<code>FormGroup</code> 用於追蹤一個表單控制元件組的值和狀態。\n<code>FormControl</code> 實例用於追蹤單個表單控制元件的值和驗證狀態。\n<code>FormArray</code> 用於追蹤表單控制元件陣列的值和狀態。</p>\n<p>我的理解：\n<code>FormGroup</code> 將需要被賦值與操控的表單群組起來 = 物件\n<code>FormControl</code> 主要是查看 value 與 驗證的狀態 = 物件裡的值\n<code>FormArray</code> 表單裡的陣列\n使用陣列時，需要再包一層 FormGroup 才能使用 FormControl 新增</p>\n<p>若需要賦予一組值時，需要先新增 FormControl 去做對應，否則會報錯</p>\n<hr>\n<p>文件：<a target='_blank' href=\"https://angular.tw/guide/forms-overview#setting-up-the-form-model\">https://angular.tw/guide/forms-overview#setting-up-the-form-model</a>\nAPI：<a target='_blank' href=\"https://angular.tw/api/forms\">https://angular.tw/api/forms</a></p>\n<hr>\n<p>今天先來個實際範例，明天來說說 formControl 這部份</p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_formArray","title":"Angular Reactive Form 響應式表單 (formArray)","date":"2021/09/15","categories":["Angular"],"tags":["Angular","Angular Form","ironman2021"],"summary":"昨天介紹了 formControl 如何使用今天來介紹 formArray這部份老實說花了我不少時間才懂 XD今天要在表單裡加上喜好，喜好會有很多，所以我們來使用 formArray 處理，預設值先給","content":"<p>昨天介紹了 formControl 如何使用\n今天來介紹 formArray\n這部份老實說花了我不少時間才懂 XD</p>\n<hr>\n<p>今天要在表單裡加上喜好，喜好會有很多，所以我們來使用 formArray 處理，預設值先給它一個空陣列</p>\n<h2 id=\"建立動態表單-(formarray)\">建立動態表單 (FormArray)</h2>\n<p>ts 程式裡的 favorites 是一組 formArray\n我們先將這組 formArray 獨立出來操控它</p>\n<pre><code class=\"language-ts\">export class FormComponent implements OnInit {\n  form: FormGroup = new FormGroup({\n    name: new FormControl(),\n    phone: new FormControl(),\n    favorites: new FormArray([]),\n  });\n\n  get favorites() {\n    return this.form.get(&quot;favorites&quot;) as FormArray;\n  }\n}\n</code></pre>\n<p>.html</p>\n<pre><code class=\"language-html\">...略\n&lt;div\n  formArrayName=&quot;favorites&quot;\n  *ngFor=&quot;let fav of favorites.controls; let idx = index&quot;\n&gt;\n  &lt;div [formGroupName]=&quot;idx&quot;&gt;\n    &lt;ng-container *ngIf=&quot;idx === 0&quot;&gt;\n      &lt;label for=&quot;&quot;&gt;favorites：&lt;/label&gt;\n      &lt;br /&gt;\n    &lt;/ng-container&gt;\n    &lt;input formControlName=&quot;favorite&quot; type=&quot;text&quot; [value]=&quot;&quot; /&gt;\n    &lt;button (click)=&quot;removeField(idx, $event)&quot;&gt;移除&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>到目前為止，畫面上是沒東西的，原因是我們還沒為 FormArray 做表單控制元件</p>\n<hr>\n<h2 id=\"為-formarray-新增一組-formgroup\">為 FormArray 新增一組 FormGroup</h2>\n<p>.html</p>\n<pre><code class=\"language-html\">&lt;div [formGroupName]=&quot;idx&quot;&gt;\n  &lt;ng-container *ngIf=&quot;idx === 0&quot;&gt;\n    &lt;label for=&quot;&quot;&gt;favorites：&lt;/label&gt;\n    &lt;!-- 加上新增按鈕 --&gt;\n    &lt;button (click)=&quot;addField()&quot;&gt;新增&lt;/button&gt;\n    &lt;br /&gt;\n  &lt;/ng-container&gt;\n  &lt;input formControlName=&quot;favorite&quot; type=&quot;text&quot; /&gt;\n  &lt;button (click)=&quot;removeField(idx)&quot;&gt;移除&lt;/button&gt;\n&lt;/div&gt;\n</code></pre>\n<p>建立一個新增方法 <code>addField</code> 在 ngOnInit 時執行它，同時也在 html 裡加上新增按鈕</p>\n<p>.ts</p>\n<pre><code class=\"language-ts\">ngOnInit(): void {\n  this.addField();\n}\n\naddField(): void {\n  this.favorites.push(\n    new FormGroup({\n      id: new FormControl(),\n      favorite: new FormControl(),\n    })\n  )\n}\n</code></pre>\n<p>favorites 裡會是一個陣列，\n所以當我們要新增一組陣列的時後就則是使用 push 的方式新增一組 FormGroup, 裡面再包 FormControl，如此一來 formArray 就新增一組新的資料了</p>\n<hr>\n<h2 id=\"formarray-一開始需要呈現多筆資料\">FormArray 一開始需要呈現多筆資料</h2>\n<p>在實作裡常常從 api 裡撈出一些資料 需要一開始的時後就呈現，所以在 ngOnInit 讀到資料的時後，就將資料餵給表單</p>\n<p>.ts</p>\n<pre><code class=\"language-ts\">// 預設資料表\nfavoritesOptions = [\n  { id: 1, favorite: &quot;book&quot; },\n  { id: 2, favorite: &quot;sleep&quot; },\n  { id: 3, favorite: &quot;shopping&quot; },\n];\n\nngOnInit(): void {\n  this.favoritesOptions.forEach((e) =&gt; {\n    this.favorites.push(\n      new FormGroup({\n        id: new FormControl(e.id),\n        favorite: new FormControl(e.favorite),\n      })\n    );\n  });\n}\n</code></pre>\n<hr>\n<h3 id=\"formarray-移除一筆資料\">FormArray 移除一筆資料</h3>\n<p>在 template 做一個移除按鈕</p>\n<p>.html</p>\n<pre><code class=\"language-html\">&lt;ng-container\n  formArrayName=&quot;favorites&quot;\n  *ngFor=&quot;let fav of favorites.controls; let idx = index&quot;\n&gt;\n  &lt;div [formGroupName]=&quot;idx&quot;&gt;\n    &lt;mat-form-field appearance=&quot;legacy&quot;&gt;\n      &lt;mat-label&gt;favorites&lt;/mat-label&gt;\n      &lt;input formControlName=&quot;favorite&quot; type=&quot;text&quot; matInput /&gt;\n      &lt;!-- 新增移除按鈕 --&gt;\n      &lt;mat-icon (click)=&quot;removeField(idx)&quot; matSuffix&gt;delete&lt;/mat-icon&gt;\n    &lt;/mat-form-field&gt;\n  &lt;/div&gt;\n&lt;/ng-container&gt;\n</code></pre>\n<p>.ts</p>\n<pre><code class=\"language-ts\">removeField(index: number): void {\n  // 剩下一筆時不給刪！\n  if (this.favorites.value.length &gt; 1) {\n    this.favorites.removeAt(index);\n  }\n}\n</code></pre>\n<p>這裡要注意的是，removeAt 裡面要帶的值 是 formArray value 裡的 <code>index</code> (索引)\n如此一來，就能對表單做移除的動作了！</p>\n<hr>\n<p>參考資料：</p>\n<ul>\n<li><a target='_blank' href=\"https://angular.tw/api/forms/FormArray\">FormArray Api</a></li>\n</ul>\n<hr>\n<p>明天就來說說 setValue 與 patchValue 的差異，這裡也是踩了不少雷 XD</p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_formControl","title":"Angular Reactive Form 響應式表單 (formControl)","date":"2021/09/14","categories":["Angular"],"tags":["Angular","Angular Form","ironman2021"],"summary":"昨天我們看了 一長串的表單使用範例都是經過理解消化後所寫出來的 code ，那麼今天就來聊一聊消化的過程吧！表單宣告一開始 建立一個新的 form 表單，它會是一組的 groupexport clas","content":"<p>昨天我們看了 一長串的表單使用範例\n都是經過理解消化後所寫出來的 code ，那麼今天就來聊一聊消化的過程吧！</p>\n<h2 id=\"表單宣告\">表單宣告</h2>\n<p>一開始 建立一個新的 form 表單，它會是一組的 group</p>\n<pre><code class=\"language-ts\">export class FormComponent implements OnInit {\n  form!: FormGroup;\n}\n</code></pre>\n<blockquote>\n<p>form 後面加上<code>!</code> 是 Typescript 2.0 的 <code>non-null</code>\n可參考 <a target='_blank' href=\"https://angular.tw/guide/template-expression-operators\">非空斷言運算子（ ! ）</a> &gt; <a target='_blank' href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator\">Non-null assertion operator</a></p>\n</blockquote>\n<p>一開始 form 裡 沒有給他任何的屬性與值，所以初始化時可使用 <code>FormBuilder</code> 來生成一個表單，在 formBuilder.group 裡會自動產生一個 FormControl 讓預設的值塞入，預設為空值</p>\n<pre><code class=\"language-ts\">this.form = this.formBuilder.group({\n  name: &quot;&quot;,\n  phone: &quot;&quot;,\n});\n</code></pre>\n<p>對應到 html 上的</p>\n<pre><code class=\"language-html\">&lt;form [formGroup]=&quot;form&quot;&gt;\n  &lt;div&gt;\n    &lt;label for=&quot;&quot;&gt;name：&lt;/label&gt;\n    &lt;input formControlName=&quot;name&quot; type=&quot;text&quot; /&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=&quot;&quot;&gt;phone：&lt;/label&gt;\n    &lt;input formControlName=&quot;phone&quot; type=&quot;tel&quot; /&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n</code></pre>\n<blockquote>\n<p>注意：form 表單裡的 FormControl 必須與 template 裡的 formControlName 互相對應，不然會報錯</p>\n</blockquote>\n<p>如圖： 這是 form 裡沒有命名為 phone 的 FormControl，所以出現了以下錯誤，這時後會覺得 Angular 非常的貼心 XD\n<img src=\"assets/images/ironman/ng_formControl/ViQgwS9.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"另一種宣告方式\">另一種宣告方式</h2>\n<p>因為我已經知道我的 form 表單裡會需要有哪些內容\n所以我在一開始的時後就直接將 form 裡所需操控的部份設定好</p>\n<pre><code class=\"language-ts\">export class FormComponent implements OnInit {\n  form: FormGroup = new FormGroup({\n    name: new FormControl(),\n    phone: new FormControl(),\n  });\n}\n</code></pre>\n<p>預設為空值，若需要帶預設值的時後會在 <code>ngOnInit</code> 裡讀到值後再將值變更塞入</p>\n<pre><code class=\"language-ts\">ngOnInit(): void {\n   this.form.setValue({\n    name: 'Mandy',\n    phone: '0912345678',\n  });\n}\n</code></pre>\n<h2 id=\"取得表單裡的資料\">取得表單裡的資料</h2>\n<p>.ts</p>\n<pre><code class=\"language-ts\">this.form.value;\n</code></pre>\n<h3 id=\"取得特定資料\">取得特定資料</h3>\n<p>.ts</p>\n<pre><code class=\"language-ts\">// 取得 name 的值\nthis.form.get(&quot;name&quot;).value;\n</code></pre>\n<hr>\n<p>參考資料：</p>\n<ul>\n<li><a target='_blank' href=\"https://angular.tw/guide/reactive-forms\">響應式表單</a></li>\n<li><a target='_blank' href=\"https://angular.tw/api/forms/FormControl\">FormControl Api</a></li>\n</ul>\n<hr>\n<p>明天就來說說 formArray 的部份</p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_formValidator","title":"Angular Reactive Forms 自訂表單驗証器","date":"2021/09/19","categories":["Angular"],"tags":["Angular","Angular Form","ironman2021"],"summary":"有表單 當然少不了驗証，這次的情境是名字是必填欄位。手機不一定會是必填，但填了後必須符合手機的格式，09 開頭 共 10 碼來囉！！加上表單驗証在這個 form 表單的下方 新增一個驗証方式，動態驗証","content":"<p>有表單 當然少不了驗証，這次的情境是</p>\n<p>名字是必填欄位。\n手機不一定會是必填，但填了後必須符合手機的格式，09 開頭 共 10 碼</p>\n<p>來囉！！</p>\n<hr>\n<h2 id=\"加上表單驗証\">加上表單驗証</h2>\n<p>在這個 form 表單的下方 新增一個驗証方式，動態驗証就寫在 validator 這裡面</p>\n<pre><code class=\"language-ts\">export class FormComponent implements OnInit {\n  form: FormGroup = new FormGroup(\n    {\n      name: new FormControl(&quot;&quot;, Validators.required),\n      phone: new FormControl(&quot;&quot;),\n      favorites: new FormArray([]),\n    },\n    { validators: validator }\n  );\n}\n</code></pre>\n<hr>\n<h2 id=\"自訂驗証器\">自訂驗証器</h2>\n<p>.ts</p>\n<pre><code class=\"language-ts\">export const validator: ValidatorFn = (\n  control: AbstractControl\n): ValidationErrors | null =&gt; {\n  const { name, phone, favorites } = control.value;\n  // 手機號碼正規化\n  const regPhone = RegExp(/^09[0-9]{8}$/);\n  return !phone ? null : regPhone.test(phone) ? null : { phone: true };\n};\n</code></pre>\n<p>若是號碼填寫錯誤，把 form 的 console 叫出來 會是像圖上這樣\n<img src=\"assets/images/ironman/ng_formValidator/rAf9BXH.png\" alt=\"\"></p>\n<p>一開始我們有設定名字為必填，圖上紅色框起來就是沒填到名字所出現的訊息\n<img src=\"assets/images/ironman/ng_formValidator/fG6ckyD.png\" alt=\"\"></p>\n<p>若無誤則會是 null，這樣我們就可以在 tmeplate 上做顯示讓使用使知道表單哪裡有問題</p>\n<hr>\n<h2 id=\"把錯誤訊息-show-出來！\">把錯誤訊息 show 出來！</h2>\n<p>在 html 裡加上錯誤訊息</p>\n<pre><code class=\"language-html\">&lt;form [formGroup]=&quot;form&quot; (ngSubmit)=&quot;onSubmit()&quot;&gt;\n  &lt;div&gt;\n    &lt;label for=&quot;&quot;&gt;name：&lt;/label&gt;\n    &lt;input formControlName=&quot;name&quot; type=&quot;text&quot; /&gt;\n    &lt;!-- 錯誤訊息判斷 --&gt;\n    &lt;p style=&quot;color:red&quot; *ngIf=&quot;form.get('name')?.errors?.required&quot;&gt;\n      Name Required\n    &lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=&quot;&quot;&gt;phone：&lt;/label&gt;\n    &lt;input formControlName=&quot;phone&quot; type=&quot;tel&quot; /&gt;\n  &lt;/div&gt;\n  ...略\n  &lt;!-- 錯誤訊息判斷 --&gt;\n  &lt;p style=&quot;color:red&quot; *ngIf=&quot;form.errors?.phone&quot;&gt;Your phone Error&lt;/p&gt;\n  &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n<hr>\n<p>下圖為判斷 form 裡的驗証訊息，來決定要不要讓表單送出\n<img src=\"assets/images/ironman/ng_formValidator/HLirYwJ.png\" alt=\"\"></p>\n<p>參考文件：</p>\n<p><a target='_blank' href=\"https://angular.tw/guide/form-validation#adding-custom-validators-to-reactive-forms\">把自訂驗證器新增到響應式表單中</a>\n<a target='_blank' href=\"https://angular.tw/api/forms/ValidatorFn\">https://angular.tw/api/forms/ValidatorFn</a></p>\n<hr>\n<p>小記：本來是有點懶的打這篇的，但前幾天，同事對我說，之後我們的表單都要有動態驗証哦！\n我…嗯，…好 XDDD 然後就把久遠的回憶翻回來，再次熟悉了一下，這篇因此而生</p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_highlight","title":"在 Angular 文章裡幫程式碼加上語法高亮 (highlight)","date":"2022/01/29","categories":["Angular"],"tags":["Angular","highlight"],"summary":"highlight.jsInstallnpm i highlight.jsCreatecreate highlight.serviceimport hljs from &quot;highlight.","content":"<h2 id=\"highlight.js\">highlight.js</h2>\n<h3 id=\"install\">Install</h3>\n<pre><code class=\"language-bash\">npm i highlight.js\n</code></pre>\n<h3 id=\"create\">Create</h3>\n<p>create highlight.service</p>\n<pre><code class=\"language-ts\">import hljs from &quot;highlight.js&quot;;\n\n@Injectable({\n  providedIn: &quot;root&quot;,\n})\nexport class HighlightService {\n  constructor(@Inject(PLATFORM_ID) private platformId: Object) {}\n\n  highlightAll() {\n    if (isPlatformBrowser(this.platformId)) {\n      hljs.highlightAll();\n    }\n  }\n}\n</code></pre>\n<h3 id=\"import-css\">Import CSS</h3>\n<p>在 styles.scss 引入 (可選自己喜歡的樣式引入)</p>\n<pre><code class=\"language-scss\">@import &quot;~highlight.js/scss/atom-one-dark&quot;;\n</code></pre>\n<p>Themes\n<a target='_blank' href=\"https://highlightjs.org/static/demo/\">https://highlightjs.org/static/demo/</a></p>\n<hr>\n<h2 id=\"prismjs\">prismjs</h2>\n<p>prismjs 不只提供了 higtlight 樣式，也提供了一些外掛讓使用者套用\n如：<code>copy-to-clipboard</code></p>\n<h3 id=\"install\">Install</h3>\n<pre><code class=\"language-bash\">npm i prismjs\n</code></pre>\n<h3 id=\"create\">Create</h3>\n<p>create highlight.service</p>\n<pre><code class=\"language-ts\">// 也可這樣寫\n// import * as Prism from 'prismjs';\n\nimport &quot;prismjs&quot;;\n\n// 加入語言樣式\nimport &quot;prismjs/plugins/toolbar/prism-toolbar&quot;;\nimport &quot;prismjs/plugins/copy-to-clipboard/prism-copy-to-clipboard&quot;;\nimport &quot;prismjs/components/prism-bash&quot;;\nimport &quot;prismjs/components/prism-css&quot;;\nimport &quot;prismjs/components/prism-javascript&quot;;\nimport &quot;prismjs/components/prism-json&quot;;\nimport &quot;prismjs/components/prism-markup&quot;;\nimport &quot;prismjs/components/prism-typescript&quot;;\ndeclare var Prism: any;\n\n@Injectable({\n  providedIn: &quot;root&quot;,\n})\nexport class HighlightService {\n  constructor(@Inject(PLATFORM_ID) private platformId: Object) {}\n\n  highlightAll() {\n    if (isPlatformBrowser(this.platformId)) {\n      Prism.highlightAll();\n    }\n  }\n}\n</code></pre>\n<h3 id=\"import-css\">Import CSS</h3>\n<p>在 styles.scss 引入 (可選自己喜歡的樣式引入)</p>\n<pre><code class=\"language-scss\">@import &quot;prismjs/themes/prism-tomorrow&quot;;\n\n// 加入 prismjs plugins css\n@import &quot;prismjs/plugins/toolbar/prism-toolbar&quot;;\n</code></pre>\n<p>styles.scss\n<a target='_blank' href=\"https://prismjs.com/\">https://prismjs.com/</a></p>\n<h3 id=\"啟用-plugins\">啟用 plugins</h3>\n<p>在 angular.json 裡加上這一段</p>\n<pre><code class=\"language-json\">&quot;allowedCommonJsDependencies&quot;: [\n  &quot;prismjs/plugins/copy-to-clipboard/prism-copy-to-clipboard&quot;\n],\n</code></pre>\n<p>如下圖：\n<img src=\"assets/images/angular/ng_highlight/001.jpg\"  width=100%  loading=\"lazy\" /></p>\n<hr>\n<h2 id=\"文章-heightlight-引用\">文章 heightlight 引用</h2>\n<p>要等內文載入後才會有效果</p>\n<pre><code class=\"language-ts\">\nngAfterViewInit(): void {\n  this.highlightService.highlightAll();\n}\n</code></pre>\n"},{"directory":"angular","layout":"Angular","slug":"ng_httpget","title":"Angular 如何取得 API 資料","date":"2021/09/23","categories":["Angular"],"tags":["Angular","RxJS","ironman2021"],"summary":"既然昨天已經說了 http post 這件事，那今天就來說說 http get 這部份吧！今天的資料依然使用 FakeStoreAPI樣式套用 Angular Material情境從 api 取得列表","content":"<p>既然昨天已經說了 http post 這件事，那今天就來說說 http get 這部份吧！</p>\n<p>今天的資料依然使用 <a target='_blank' href=\"https://fakestoreapi.com/docs\">FakeStoreAPI</a>\n樣式套用 <a target='_blank' href=\"https://material.angular.io/\">Angular Material</a></p>\n<h2 id=\"情境\">情境</h2>\n<p>從 api 取得列表後，把資料渲染到 html 上</p>\n<hr>\n<h2 id=\"import-module\">import Module</h2>\n<p><code>app.module.ts</code> import HttpClientModule，</p>\n<pre><code class=\"language-ts\">import { NgModule } from &quot;@angular/core&quot;;\nimport { BrowserModule } from &quot;@angular/platform-browser&quot;;\nimport { FormsModule } from &quot;@angular/forms&quot;;\n\nimport { AppComponent } from &quot;./app.component&quot;;\nimport { MaterialModule } from &quot;./material-module&quot;;\nimport { HttpClientModule } from &quot;@angular/common/http&quot;;\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    HttpClientModule, // 使用於 http 請求\n    FormsModule,\n    MaterialModule, // Angular Material\n  ],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n</code></pre>\n<hr>\n<h2 id=\"建立服務\">建立服務</h2>\n<p>建立一個 service 放置 api\nservice.ts</p>\n<pre><code class=\"language-ts\">import { HttpClient } from &quot;@angular/common/http&quot;;\nimport { Injectable } from &quot;@angular/core&quot;;\nimport { catchError, Observable } from &quot;rxjs&quot;;\n\n@Injectable()\nexport class AppService {\n  constructor(private httpClient: HttpClient) {}\n\n  fetchProd(): Observable&lt;any&gt; {\n    const url = `https://fakestoreapi.com/products`;\n    return this.httpClient.get&lt;any&gt;(url).pipe(\n      catchError((err, caught) =&gt; {\n        console.error(err);\n        throw err;\n      })\n    );\n  }\n}\n</code></pre>\n<p>記得 <code>catchError</code> 這裡可以處理 API 錯誤時，決定怎麼樣的動作</p>\n<hr>\n<h2 id=\"取得-api-資料-渲染到頁面上\">取得 API 資料 渲染到頁面上</h2>\n<p>.ts</p>\n<pre><code class=\"language-ts\">import { Component, OnInit } from &quot;@angular/core&quot;;\nimport { Observable, tap } from &quot;rxjs&quot;;\nimport { AppService } from &quot;./app.service&quot;;\n\n@Component({\n  selector: &quot;my-app&quot;,\n  templateUrl: &quot;./app.component.html&quot;,\n  styleUrls: [&quot;./app.component.css&quot;],\n  providers: [AppService], // 將 AppService 的服務注入\n})\nexport class AppComponent implements OnInit {\n  products$ = new Observable&lt;any&gt;();\n\n  constructor(private appService: AppService) {}\n\n  ngOnInit(): void {\n    this.products$ = this.appService.fetchProd();\n  }\n}\n</code></pre>\n<p>.html</p>\n<pre><code class=\"language-html\">&lt;ng-container *ngIf=&quot;products$ | async as products&quot;&gt;\n  &lt;ng-container *ngFor=&quot;let item of products&quot;&gt;\n    &lt;div class=&quot;products&quot;&gt;\n      &lt;mat-card&gt;\n        &lt;mat-card-header&gt;\n          &lt;mat-card-title&gt;{{ item.title }}&lt;/mat-card-title&gt;\n          &lt;mat-card-subtitle&gt;{{ item.category }}&lt;/mat-card-subtitle&gt;\n        &lt;/mat-card-header&gt;\n        &lt;img mat-card-image src=&quot;{{ item.image }}&quot; /&gt;\n        &lt;mat-card-content&gt;\n          &lt;p&gt;{{ item.description }}&lt;/p&gt;\n        &lt;/mat-card-content&gt;\n      &lt;/mat-card&gt;\n    &lt;/div&gt;\n  &lt;/ng-container&gt;\n&lt;/ng-container&gt;\n</code></pre>\n<p>這裡使用 Async Pipe 將資料渲染出來，直接從 template 訂閱資料即可</p>\n<hr>\n<p>範例：<a target='_blank' href=\"https://stackblitz.com/edit/angular-ivy-6bbh3n\">https://stackblitz.com/edit/angular-ivy-6bbh3n</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_httpParams","title":"Angular HttpParams","date":"2020/11/03","categories":["Angular"],"tags":["Angular"],"summary":"這篇記錄著關於如何使用 Angular HttpParams且 HttpParams 接收的參數值必定要轉為字串才可以在 service.ts 引入import { HttpClient, HttpP","content":"<p>這篇記錄著關於如何使用 Angular <code>HttpParams</code>\n且 HttpParams 接收的參數值必定要轉為<code>字串</code>才可以</p>\n<p>在 service.ts 引入</p>\n<pre><code class=\"language-ts\">import { HttpClient, HttpParams } from '@angular/common/http';\n\nconstructor(\n  private http: HttpClient\n) {}\n</code></pre>\n<h2 id=\"get\">GET</h2>\n<pre><code class=\"language-ts\">fetchRepos( params ):Observable&lt;any&gt; {\n  const url = `localhost:4000/`\n  return this.httpClient.get(url, {\n    params: new HttpParams()\n      .set('page', params.page)\n      .set('sort', params.name)\n  })\n}\n// localhost:4000/?page=2&amp;sort=name\n</code></pre>\n<hr>\n<p>以上是基本的傳參數方式，然而 Angular 提供了一些方法讓我們使用</p>\n<h3 id=\"httpparams.set\">HttpParams.set</h3>\n<pre><code class=\"language-ts\">set(param: string, value: string): HttpParams;\n</code></pre>\n<p>若參數已存在 則後面會取代前面</p>\n<pre><code class=\"language-ts\">params = new HttpParams().set('page', '2').set('page', '3').set('sort', 'name');\n\nconsole.log(params.toString()); //Returns page=3&amp;sort=name\n</code></pre>\n<p>或</p>\n<pre><code class=\"language-ts\">let params = new HttpParams();\n\nparams = params.set('page', '2');\nparams = params.set('sort', 'name');\n\nconsole.log(params.toString()); //Returns page=2&amp;sort=name\n</code></pre>\n<h3 id=\"httpparams.append\">HttpParams.append</h3>\n<pre><code class=\"language-ts\">append(param: string, value: string): HttpParams;\n</code></pre>\n<p>無論參數是否存在 都會附加上去</p>\n<pre><code class=\"language-ts\">params = new HttpParams().set('page', '2').append('page', '3').set('sort', 'name');\n\nconsole.log(params.toString()); //Returns page=2&amp;page=3&amp;sort=name\n</code></pre>\n<p>或</p>\n<pre><code class=\"language-ts\">let params = new HttpParams();\n\nparams = params.append('page', '2');\nparams = params.append('sort', 'name');\n\nconsole.log(params.toString()); //Returns page=2&amp;sort=name\n</code></pre>\n<hr>\n<h2 id=\"另一種傳遞方式\">另一種傳遞方式</h2>\n<h3 id=\"參數如果是字串\">參數如果是字串</h3>\n<pre><code class=\"language-ts\">let params = new HttpParams({\n  fromString: 'page=' + PageNo + '&amp;sort=' + SortOn,\n});\n</code></pre>\n<h3 id=\"參數如果是物件\">參數如果是物件</h3>\n<pre><code class=\"language-ts\">let params = new HttpParams({\n  fromObject: { page: PageNo, sort: SortOn },\n});\n</code></pre>\n<hr>\n<p>最後 如果傳來的參數很多 且需要過瀘空值的話 那個寫個 function 來處理吧</p>\n<pre><code class=\"language-ts\">getQueryParams(source: Object): HttpParams {\n  let target: HttpParams = new HttpParams();\n  Object.keys(source).forEach((key: string) =&gt; {\n    const value: string | number | boolean | Date = source[key];\n    if (typeof value !== 'undefined' &amp;&amp; value !== null) {\n      target = target.append(key, value.toString());\n    }\n  });\n  return target;\n}\n</code></pre>\n<hr>\n<p>參考資料：\n<a target='_blank' href=\"https://github.com/angular/angular/issues/23856\">https://github.com/angular/angular/issues/23856</a>\n<a target='_blank' href=\"https://www.tektutorialshub.com/angular/angular-pass-url-parameters-query-strings/\">URL Parameters, Query Parameters, httpparams in Angular HttpClient</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_if-async-as","title":"Angular ngIf 與 Async Pipe","date":"2021/09/25","categories":["Angular"],"tags":["Angular","RxJS","ironman2021"],"summary":"情境當我們在 template 訂閱一組資料，而需要對它做一些邏輯處理的時後。不好的方式.tsexport class TemplateComponent {  products$: Observab","content":"<h2 id=\"情境\">情境</h2>\n<p>當我們在 template 訂閱一組資料，而需要對它做一些邏輯處理的時後。</p>\n<h2 id=\"不好的方式\">不好的方式</h2>\n<p>.ts</p>\n<pre><code class=\"language-ts\">export class TemplateComponent {\n  products$: Observable&lt;any&gt; = this.apiService.fetchProd();\n  constructor(public apiService: ApiService) {}\n}\n</code></pre>\n<p>.html</p>\n<pre><code class=\"language-html\">&lt;ng-container *ngIf=&quot;(products$ | async)?.length &gt; 0; else empty&quot;&gt;\n  &lt;ng-container *ngFor=&quot;let item of (products$ | async)&quot;&gt; ...略 &lt;/ng-container&gt;\n&lt;/ng-container&gt;\n&lt;ng-template #empty&gt; No Data &lt;/ng-template&gt;\n</code></pre>\n<p>若像上述這樣的寫法，會造成重覆訂閱而增加 server 的負擔，所以在實作上，通常會避免這情況發生</p>\n<hr>\n<h2 id=\"解決方式\">解決方式</h2>\n<h3 id=\"使用-ngif-as\">使用 ngIf as</h3>\n<p>將 html 寫法稍做修改</p>\n<pre><code class=\"language-html\">&lt;ng-container *ngIf=&quot;products$ | async as products;&quot;&gt;\n  &lt;ng-container *ngIf=&quot;products.length &gt; 0; else empty&quot;&gt;\n    &lt;ng-container *ngFor=&quot;let item of products&quot;&gt; ...略 &lt;/ng-container&gt;\n  &lt;/ng-container&gt;\n&lt;/ng-container&gt;\n&lt;ng-template #empty&gt; No Data &lt;/ng-template&gt;\n</code></pre>\n<p>將 <code>products$ | async</code> 定義為 <code>products</code>。\n這樣就只會被訂閱一次，而這麼做的好處也可以使程式碼更容易閱讀，</p>\n<hr>\n<h2 id=\"加上-sharereplay\">加上 shareReplay</h2>\n<p>在 ts 檔裡加上 shareReplay\n.ts</p>\n<pre><code class=\"language-ts\">export class TemplateComponent {\n  products$: Observable&lt;any&gt; = this.apiService.fetchProd().pipe(shareReplay());\n  constructor(public apiService: ApiService) {}\n}\n</code></pre>\n<hr>\n<p>還有一點要注意的是，在 ng-container 裡，不能同時使用 <code>ngIf</code> 與 <code>ngFor</code> 否則會報錯唷唷唷～</p>\n<p>附錄：<a target='_blank' href=\"https://ithelp.ithome.com.tw/articles/10253517\">RxJS Multicast 類 Operator (1) - multicast / publish / refCount / share / shareReplay</a></p>\n<!-- https://www.jianshu.com/p/0f5332f2bbf8 -->\n"},{"directory":"angular","layout":"Angular","slug":"ng_image-upload","title":"Angular 圖片上傳之日記文","date":"2021/09/17","categories":["Angular"],"tags":["Angular","ironman2021"],"summary":"插播本來預定今天要發佈的文章延後了，今天要要來分享這一兩天的踩雷心路歷，花了一半天時間，連鐵人都沒時間寫，還好有一些些存檔 !這次公司專案需要做到圖片上傳這部份的處理，因這次的套件對於手動上傳沒有支援","content":"<h2 id=\"插播\">插播</h2>\n<p>本來預定今天要發佈的文章延後了，今天要要來分享這一兩天的踩雷心路歷，花了一半天時間，連鐵人都沒時間寫，還好有一些些存檔 !</p>\n<p>這次公司專案需要做到圖片上傳這部份的處理，因這次的套件對於手動上傳沒有支援太多，所以需要自己處理這部份，接著就是一連串的踩雷過程…</p>\n<hr>\n<h2 id=\"踩雷開始\">踩雷開始</h2>\n<p>一般我們在傳檔給後端的時後，都需要把檔案轉為 <code>Binary</code> 上傳文件的格式，</p>\n<p>如圖：\n<img src=\"assets/images/ironman/ng_image-upload/8ZxtHgM.png\" alt=\"\"></p>\n<hr>\n<p>因為這次上傳的是圖片，所以也一起將 <code>http Resquest Headers</code> 裡的 <code>responseType</code> 改為 <code>blob</code> (註 1)\n改 <code>blob</code> 後，發現回傳的 <code>response</code> 變這樣\n<img src=\"assets/images/ironman/ng_image-upload/s11aelm.png\" alt=\"\"></p>\n<p>取不到後端給我的 success 資料</p>\n<p>如圖：\n<img src=\"assets/images/ironman/ng_image-upload/xs8gTsk.png\" alt=\"\"></p>\n<p>因為我需要 success 後，後端回給我的的 imageId 才能接續打下一支 api</p>\n<hr>\n<p>在公司試了好久，也把所想得到的關鍵字都餵給估狗，一直找不到原因。\n到家後，為了重現情境 還到了 <code>imgur</code> 圖床申請檔案上傳 api，搞了好久後，終於好了\n結果 <code>imgur</code> 一直報 429 (*註 2) 給我就是一直沒辦法傳，大吐血！！！明明我就剛才申請好！！\n然後…時間好晚了，放棄先睡覺，隔天再到公司試。</p>\n<hr>\n<p>後來才發現將 <code>responseType</code> 改為 <code>text</code></p>\n<pre><code class=\"language-js\">createImage(formData: any) {\n  return this.httpClient\n    .post(url, formData, {\n      responseType: 'text', //這裡\n      reportProgress: true,\n      observe: 'events',\n      withCredentials: true,\n    })\n    .pipe(\n      tap(event =&gt; {\n        console.log('createImage', event);\n      })\n    );\n  }\n}\n</code></pre>\n<p>就能同時得到上傳的進度條與 如圖：</p>\n<p><img src=\"assets/images/ironman/ng_image-upload/gRdrrsh.png\" alt=\"\"></p>\n<p>這才結束了半天多的踩雷之旅…\n嗯…要說是踩雷嗎？也不算是，只能說自己的經驗太少，很少碰到這一部份，也算是繳了學費(時間) 囧~~~~</p>\n<hr>\n<h2 id=\"附錄\">附錄</h2>\n<p>這個是之前的遇到的問題。\n因為一開始在規劃架構時，有在 <code>interceptors</code> 裡的 <code>http Resquest Headers</code> 加上下面這一行做預設，</p>\n<pre><code class=\"language-js\">'Content-Type': contentType || 'application/json'\n</code></pre>\n<p>結果上傳的檔案都變成這種格式\n<img src=\"assets/images/ironman/ng_image-upload/3fGnVVj.png\" alt=\"\"></p>\n<p>…將上面那一行拿掉就可以成功執行了 !</p>\n<hr>\n<p>這篇文，是為了我逝去的青春做記念</p>\n<hr>\n<p>註 1：<a target='_blank' href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/responseType\">XMLHttpRequest.responseType</a>\n註 2：<a target='_blank' href=\"https://stackoverflow.com/questions/31704941/the-server-responded-with-a-status-of-429-too-many-requests-intltelinput-js\">the server responded with a status of 429 (Too Many Requests) intlTelInput.js</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_lib-build-css","title":"如何將 Angular library 裡的 scss/sass 正確導出","date":"2021/01/17","categories":["Angular"],"tags":["Angular","Angular library"],"summary":"因專案越來越龐大，需要將一些共用元件抽出來做 library 放到 npm 上，在其他專案在開發時也能一起使用，以便節省開發時間。照著官網的教學建立: https://angular.tw/guide","content":"<p>因專案越來越龐大，需要將一些共用元件抽出來做 library 放到 npm 上，在其他專案在開\n發時也能一起使用，以便節省開發時間。</p>\n<p>照著官網的教學建立: <a target='_blank' href=\"https://angular.tw/guide/creating-libraries\">https://angular.tw/guide/creating-libraries</a></p>\n<pre><code class=\"language-cmd\">ng new angular-library-template --create-application=false\ncd angular-library-template\nng g library mandy-lib\n</code></pre>\n<p>建立完後 將所需要抽出來的共用元件加上因要使用 scss 編譯，所以需在根目錄的\n<code>angular.json</code> 加上這一段設定</p>\n<img src=\"assets/images/angular/lib_build_css/001.jpg\"  loading=\"lazy\" />\n<pre><code class=\"language-ts\">&quot;schematics&quot;: {\n  &quot;@schematics/angular:component&quot;: {\n    &quot;style&quot;: &quot;scss&quot;,\n    &quot;skipTests&quot;: true //不產測試檔 .spec\n  }\n}\n</code></pre>\n<p>接著建立元件 <code>ng g c &lt;your-component&gt;</code></p>\n<p>過程中，若是不能建立 component\n<code>Could not find an NgModule. Use the skip-import option to skip importing in NgModule.</code>\n可以參考這裡的解法 <a target='_blank' href=\"https://forum.angular.tw/t/topic/972/9\">https://forum.angular.tw/t/topic/972/9</a></p>\n<p>component 添加完後在 cmd 執行 <code>ng run build</code></p>\n<hr>\n<p>因為專案需要，讓使用者可以調整 theme 的顏色設定做切換， 發現 component 裡的 scss\n檔沒有被產出來</p>\n<p>所以需要另外在 <code>ng-package.json</code> 裡多加一段 assets 配置</p>\n<img src=\"assets/images/angular/lib_build_css/002.jpg\" />\n<pre><code class=\"language-ts\">&quot;assets&quot;: [\n  &quot;**/**.scss&quot;\n],\n</code></pre>\n<p>結果 build 出來的 ts 檔 跟 scss 檔沒有在同一個資料夾裡</p>\n<img src=\"assets/images/angular/lib_build_css/003.jpg\" />\n<p>會發現產出來的 scss 檔外多了一層 src 的資料夾，但這不是我要的呀 XDDD</p>\n<hr>\n<p>過程中試了很多解法，最後的解決方案，在 build 後，將檔案複製到對應的資料裡，然後\n再將原本 src 的資料夾清掉</p>\n<p>新增 cpx</p>\n<pre><code class=\"language-bash\">npm i cpx -D\n</code></pre>\n<p>在根目錄的 package.json 檔裡修改 script 指令</p>\n<img src=\"assets/images/angular/lib_build_css/004.jpg\" />\n<pre><code class=\"language-json\">{\n  &quot;scripts&quot;: {\n    //修改\n    &quot;build&quot;: &quot;ng build &amp;&amp; npm run copy:lib &amp;&amp; npm run clean&quot;,\n    // 新增\n    &quot;copy:lib&quot;: &quot;cpx \\&quot;./dist/mandy-lib/src/lib/**/*\\&quot; \\&quot;./dist/mandy-lib/lib\\&quot;&quot;,\n    &quot;clean&quot;: &quot;rimraf \\&quot;./dist/mandy-lib/src\\&quot;&quot;\n  }\n}\n</code></pre>\n<p>再來執行一次 <code>ng run build</code></p>\n<img src=\"assets/images/angular/lib_build_css/005.jpg\" />\n<p>成功!!!</p>\n<hr>\n<p>為了這個設定花了我快兩天的時間，必須紀錄 XDDD</p>\n<hr>\n<p><a target='_blank' href=\"https://github.com/mtwmt/angular-library-template\">angular-library-template sourse code</a></p>\n<p>參考資料：</p>\n<p><a target='_blank' href=\"https://www.usefuldev.com/post/Angular%209%20update:%20creating%20a%20library%20that%20supports%20Angular%20Material%20theming%20is%20easier%20now\">Angular 9 update: creating a library that supports Angular Material theming is easier now</a>\n<a target='_blank' href=\"https://github.com/angular/angular-cli/issues/10869\">Angular (+ CLI) 6.0.0: Global styles for libraries</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_ngif-viewchild-undefined","title":"Angular viewchild undefined with ngIf","date":"2020/12/27","categories":["Angular"],"tags":["Angular"],"summary":"情境當 angular 裡的 範本變數裡使用到 ngIf，在執行範本變數的時後會報錯，出現 undefined，無法操控程式碼如下html&lt;app-child *ngIf=&quot;isSho","content":"<h2 id=\"情境\">情境</h2>\n<p>當 angular 裡的 範本變數裡使用到 ngIf，在執行範本變數的時後會報錯，出現 undefined，無法操控</p>\n<p>程式碼如下</p>\n<p>html</p>\n<pre><code class=\"language-html\">&lt;app-child *ngIf=&quot;isShow&quot; #child&gt;&lt;/app-child&gt;\n</code></pre>\n<p>component</p>\n<pre><code class=\"language-ts\">export class AppComponent {\n  @ViewChild('child') childElement: any;\n\n  isShow: boolean;\n\n  updatChild(): void {\n    this.isShow = !this.isShow;\n  }\n}\n</code></pre>\n<h2 id=\"原因\">原因</h2>\n<p>使用 ngIf 時，一開始執行 <code>ngOnInit</code>，這個 dom 是不存在的，所以去操控這個 dom 的時後 就會報錯</p>\n<h2 id=\"解決方式\">解決方式</h2>\n<ol>\n<li>\n<p>使用 <code>ChangeDetectorRef</code> 再次偵測 dom\n因為 <code>ViewChild</code> 在只會執行一次，所以當 ngIf 條件變更為 true 的時後 不會重新抓取 dom， 這時後可以注入 <code>ChangeDetectorRef</code> 透過裡面的 <code>detectChanges</code> 方式，去偵測 dom 是不是有變更過，若是有變更的話 <code>ViewChild</code> 會再進行抓取</p>\n<p><a target='_blank' href=\"https://angular.tw/api/core/ChangeDetectorRef\">https://angular.tw/api/core/ChangeDetectorRef</a></p>\n</li>\n<li>\n<p>不使用 ngIf 改用 hidden\n在 Angular 裡 有提供 <code>[hidden]</code> 這個屬性，它在 html 裡是屬 <code>display: none</code> 所以 dom 是存在的 只是被隱藏，所以一開始 <code>ViewChild</code> 就能取得範本變數</p>\n</li>\n</ol>\n<hr>\n<p>範例：\n<a target='_blank' href=\"https://stackblitz.com/edit/angular-viewchild-undefined-ngif\">https://stackblitz.com/edit/angular-viewchild-undefined-ngif</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_ngTemplateOutlet","title":"Angular ng-template 與 ngTemplateOutlet","date":"2021/09/27","categories":["Angular"],"tags":["Angular","ironman2021"],"summary":"ngTemplateOutletngTemplateOutlet 這裡我解釋為 ng-template 裡的插槽來看看實際上會是如何使用先來段程式碼，這裡為一筆物件資料json = {  key: `","content":"<h2 id=\"ngtemplateoutlet\">ngTemplateOutlet</h2>\n<p>ngTemplateOutlet 這裡我解釋為 ng-template 裡的插槽</p>\n<p>來看看實際上會是如何使用\n先來段程式碼，這裡為一筆物件資料</p>\n<pre><code class=\"language-ts\">json = {\n  key: `1`,\n  name: &quot;Joe Black&quot;,\n  age: 32,\n  address: &quot;Sidney No. 1 Lake Park&quot;,\n};\n</code></pre>\n<p>HTML</p>\n<pre><code class=\"language-html\">&lt;ng-container\n  [ngTemplateOutlet]=&quot;jsonData&quot;\n  [ngTemplateOutletContext]=&quot;{ $implicit: json }&quot;\n&gt;&lt;/ng-container&gt;\n\n&lt;ng-template #jsonData let-data&gt; {{ data.name }} {{ data.age }} &lt;/ng-template&gt;\n</code></pre>\n<p>ngTemplateOutlet 這個插槽的名字 我們取做 <code>jsonData</code>\n在 ng-template 的插頭就要叫設定為 <code>#jsonData</code></p>\n<p>當它們這組名字對應到的時後 ng-template 裡的內容 就會在 ngTemplateOutlet 的地方呈現出來</p>\n<p><code>$implicit</code>： 為 ngTemplateOutlet 裡的預設值\n在 ng-template 裡我們 設一個 叫 data 的變數 <code>let-data</code>\n此時 <code>let-data</code> 就是對應到 上面 <code>ts</code> 傳進的 josn 資料物件</p>\n<hr>\n<p>註：ngTemplateOutlet 的 另一種寫法</p>\n<pre><code class=\"language-html\">&lt;ng-container\n  *ngTemplateOutlet=&quot;jsonData; context: { $implicit: json }&quot;\n&gt;&lt;/ng-container&gt;\n</code></pre>\n<hr>\n<h2 id=\"在-ngtemplateoutletcontext-裡多做一些變數\">在 ngTemplateOutletContext 裡多做一些變數</h2>\n<p>來看看程式碼</p>\n<pre><code class=\"language-html\">&lt;ng-container\n  [ngTemplateOutlet]=&quot;jsonData&quot;\n  [ngTemplateOutletContext]=&quot;{ $implicit: json, name: 'Mandy' }&quot;\n&gt;&lt;/ng-container&gt;\n\n&lt;ng-template #jsonData let-data let-myname=&quot;name&quot;&gt;\n  {{ data.name }} {{ data.age }} {{ myname }}&lt;/ng-template\n&gt;\n</code></pre>\n<p>在 ngTemplateOutletContext 多設一個新的值 <code>name: Mandy</code>\nng-template 設一個新的變數叫 <code>myname</code> 裡的值會對應到 ngTemplateOutletContext 裡面的 name\n以此類推</p>\n<hr>\n<p>參考資料：<a target='_blank' href=\"https://stackoverflow.com/questions/45055384/what-is-implicit-in-angular-2\">https://stackoverflow.com/questions/45055384/what-is-implicit-in-angular-2</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_pipe","title":"Angular Pipe (管道)","date":"2020/05/03","categories":["Angular"],"tags":["Angular"],"summary":"在 Angular 裡用來做一個簡單的數據轉換這次做的是數值對應 ASCII Table對照表在 terminal 裡鍵入ng g pipe my-new-pipe或ng g p my-new-pip","content":"<p>在 Angular 裡用來做一個簡單的數據轉換</p>\n<p>這次做的是數值對應 ASCII Table\n<a target='_blank' href=\"https://www.cs.cmu.edu/~pattis/15-1XX/common/handouts/ascii.html\">對照表</a></p>\n<p>在 terminal 裡鍵入</p>\n<pre><code class=\"language-bash\">ng g pipe my-new-pipe\n或\nng g p my-new-pipe\n</code></pre>\n<p>建立一個新的 pipe</p>\n<hr>\n<p>pipe.ts</p>\n<pre><code class=\"language-js\">import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'fromCharCode', //pipe 轉換使用名稱\n})\nexport class FromCharCodePipe implements PipeTransform {\n  transform(value: any, args: any): any {\n    return String.fromCharCode(+value + args);\n  }\n}\n</code></pre>\n<p>在 module.ts 引入</p>\n<pre><code class=\"language-js\">import { FromCharCodePipe } from './pipe/from-char-code/from-char-code.pipe';\n\n@NgModule({\n    declarations: [FromCharCodePipe], //聲明這個Module的內部成員\n    exports: [FromCharCodePipe]  // 用來控制將哪些內部成員暴露給外部使用 若沒 exports, 在 template 上使用會出錯\n})\n</code></pre>\n<hr>\n<p>html</p>\n<pre><code class=\"language-html\">&lt;!-- 引入 pipe function 值 對照 --&gt;\n&lt;div&gt;{{ value | fromCharCode: args }}&lt;/div&gt;\n</code></pre>\n<p>ts</p>\n<pre><code class=\"language-js\">import { FromCharCodePipe } from '../../pipe/from-char-code/from-char-code.pipe';\n\n@Component({\n  selector: 'app-file',\n  templateUrl: './file.component.html',\n  styleUrls: ['./file.component.scss'],\n  providers: [FromCharCodePipe],\n})\n\nexport class AppComponent implements OnInit {\n    constructor(\n        private fromCharCodePipe.: FromCharCodePipe\n    ){}\n    ngOnInit() {\n      // 在 ts 裡的使用方式\n      this.fromCharCodePipe.transform( value, 'args' )\n    }\n}\n</code></pre>\n"},{"directory":"angular","layout":"Angular","slug":"ng_providers","title":"Angular Providers","date":"2021/10/10","categories":["Angular"],"tags":["Angular","ironman2021"],"summary":"一直以來對 Angular Providers 這部份都還是有存在著半知半解的狀態，就趁著這次機會一次搞懂它吧！Providers 提供了四種注入方式Class Provider : useClass","content":"<p>一直以來對 <code>Angular Providers</code> 這部份都還是有存在著半知半解的狀態，就趁著這次機會一次搞懂它吧！</p>\n<p>Providers 提供了四種注入方式</p>\n<ul>\n<li>Class Provider : useClass</li>\n<li>Value Provider: useValue</li>\n<li>Factory Provider: useFactory</li>\n<li>Aliased Class Provider: useExisting</li>\n</ul>\n<h2 id=\"useclass\">useClass</h2>\n<p>將 <code>service</code> 的服務注入進來</p>\n<p>product.ts</p>\n<pre><code class=\"language-ts\">export class Product {\n  constructor(productID: number, name: string, price: number) {\n    this.productID = productID;\n    this.name = name;\n    this.price = price;\n  }\n\n  productID: number;\n  name: string;\n  price: number;\n}\n</code></pre>\n<p>product.service</p>\n<pre><code class=\"language-ts\">import { Injectable } from &quot;@angular/core&quot;;\nimport { Product } from &quot;./product&quot;;\n\n@Injectable()\nexport class ProductService {\n  constructor() {}\n\n  public getProducts() {\n    let products: Product[];\n    products = [new Product(1, &quot;Memory Card&quot;, 100)];\n    return products;\n  }\n}\n</code></pre>\n<p>component.ts</p>\n<pre><code class=\"language-ts\">@Component({\n  ...略\n  providers: [ProductService],\n})\n\nexport class AppComponent implements OnInit {\n  constructor(\n    private productService: ProductService,\n\n  ) {\n    cosnole.log(\n      this.productService.getProducts()\n      // {productID: 1, name: 'Memory Card', price: 100}\n    )\n  }\n}\n</code></pre>\n<hr>\n<h2 id=\"usevalue\">useValue</h2>\n<p>直接在 providers 裡的 <code>useValue</code> 設定想提供的值</p>\n<pre><code class=\"language-ts\">\nconst APP_CONFIG = Object.freeze({\n  serviceURL: 'mtwmt.github.io',\n  IsDevleomentMode: true,\n});\n\n@Component({\n  ...略\n  providers: [\n    { provide: 'USE_FAKE', useValue: true },\n    { provide: 'APP_CONFIG', useValue: APP_CONFIG },\n    {\n      provide: 'FUNC',\n      useValue: () =&gt; {\n        return 'hello world';\n      },\n    },\n    {\n      provide: TestService,\n      useClass: TestService,\n    },\n  ],\n})\n\nexport class AppComponent implements OnInit {\n  constructor(\n    @Inject('USE_FAKE') public useFake: string,\n    @Inject('APP_CONFIG') public appConfig: any,\n    @Inject('FUNC') public func: any\n  ) {\n    cosnole.log(\n      useFake,  // true\n      appConfig,\n      // {\n      //   serviceURL: 'mtwmt.github.io',\n      //   IsDevleomentMode: true,\n      // }\n      func() // hello world\n    )\n\n  }\n}\n</code></pre>\n<hr>\n<h2 id=\"usefactory\">useFactory</h2>\n<p>有時後會需要拿 <code>useValue</code> 的值 注到其他服務裡做判斷，這時後就可以使用 <code>useFactory</code>，來處理一些邏輯上的事情</p>\n<p>續上例：</p>\n<p>這裡多做了一個 <code>MoreProductService</code></p>\n<p>more-product.service</p>\n<pre><code class=\"language-ts\">import { Injectable } from &quot;@angular/core&quot;;\nimport { Product } from &quot;./product&quot;;\n\n@Injectable()\nexport class MoreProductService {\n  constructor() {}\n\n  public getProducts() {\n    let products: Product[];\n\n    products = [\n      new Product(1, &quot;Memory Card&quot;, 500),\n      new Product(2, &quot;Pen Drive&quot;, 750),\n      new Product(3, &quot;Power Bank&quot;, 100),\n      new Product(4, &quot;Laptop&quot;, 10000),\n      new Product(5, &quot;Desktop&quot;, 100),\n    ];\n    return products;\n  }\n}\n</code></pre>\n<p>component.ts</p>\n<pre><code class=\"language-ts\">import { Component, Inject, VERSION } from &quot;@angular/core&quot;;\nimport { MoreProductService } from &quot;./more-product.service&quot;;\nimport { ProductService } from &quot;./product.service&quot;;\n\n@Component({\n  selector: &quot;my-app&quot;,\n  templateUrl: &quot;./app.component.html&quot;,\n  styleUrls: [&quot;./app.component.css&quot;],\n  providers: [\n    MoreProductService,\n    {\n      provide: &quot;GET_MORE&quot;,\n      useValue: false,\n    },\n    {\n      provide: ProductService,\n      // 取得 GET_MORE 的 value，判斷要產生的實體\n      useFactory: (isMore) =&gt; {\n        return isMore ? new MoreProductService() : new ProductService();\n      },\n      // 注入相依的 service\n      deps: [&quot;GET_MORE&quot;, MoreProductService],\n    },\n  ],\n})\nexport class AppComponent {\n  products = [];\n\n  constructor(\n    @Inject(&quot;GET_MORE&quot;) public getMore: string,\n    private productService: ProductService\n  ) {\n    this.products = this.productService.getProducts();\n  }\n}\n</code></pre>\n<hr>\n<h2 id=\"useexisting\">useExisting</h2>\n<p>當想有新的 <code>provide</code> 想取代舊的 <code>provide</code> 時，可以使用 <code>useExisting</code> 來做取代，而不用再將源有的重新注入</p>\n<hr>\n<p>實作如下：<a target='_blank' href=\"https://stackblitz.com/edit/angular-ivy-zhtp2w\">https://stackblitz.com/edit/angular-ivy-zhtp2w</a></p>\n<hr>\n<p>參考文章：\n<a target='_blank' href=\"https://medium.com/ngconf/this-wont-hurt-a-bit-dependency-injection-tokens-in-angular-2fa5f6e6293\">This Won’t Hurt a Bit — Dependency Injection Tokens in Angular</a>\n<a target='_blank' href=\"https://www.tektutorialshub.com/angular/angular-providers/\">Angular Providers: useClass, useValue, useFactory &amp; useExisting</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_reactive_form_Error","title":"Reactive Forms in Angular Disabled Warning ( 響應式表單 Disabled Warning )","date":"2020/09/26","categories":["Angular"],"tags":["Angular","error"],"summary":"Disabled Warning當我們在使用 Angular Reactive Forms 時 如&lt;input [formControl]=&quot;formControl&quot; [di","content":"<h2 id=\"disabled-warning\">Disabled Warning</h2>\n<p>當我們在使用 Angular Reactive Forms 時 如</p>\n<pre><code class=\"language-html\">&lt;input [formControl]=&quot;formControl&quot; [disable]=&quot;condition&quot; /&gt;\n</code></pre>\n<p>用到 disable 時 console 會噴出以下警告訊息</p>\n<pre><code class=\"language-bash\">It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\nwhen you set up this control in your component class, the disabled attribute will actually be set in the DOM for\nyou. We recommend using this approach to avoid 'changed after checked' errors.\n\nExample:\nform = new FormGroup({\n  first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n  last: new FormControl('Drew', Validators.required)\n});\n</code></pre>\n<p>Angular 官方是建議在 ts 檔裡處理，但某些時後 在 html 裡處理會比在 ts 裡處理還要來的簡潔 便利 如：</p>\n<pre><code class=\"language-html\">&lt;input [formControl]=&quot;formControl&quot; [disable]=&quot;isArr$ | async&quot; /&gt;\n</code></pre>\n<p>有時後資料來源是 observe 在 template 裡可以直接使用 async 將資料 subscribe(訂閱) 出來</p>\n<p>於是在網路上找到了兩個解法</p>\n<h2 id=\"解法一-屬性綁定\">解法一 屬性綁定</h2>\n<pre><code class=\"language-html\">&lt;input [formControl]=&quot;formControl&quot; [attr.disable]=&quot;isArr$ | async&quot; /&gt;\n</code></pre>\n<p>資料來源：</p>\n<p><a target='_blank' href=\"https://stackoverflow.com/questions/46790342/why-does-disabled-candisable-will-not-work-for-angular2-reactive-forms\">https://stackoverflow.com/questions/46790342/why-does-disabled-candisable-will-not-work-for-angular2-reactive-forms</a></p>\n<hr>\n<h2 id=\"解法二-新增-directive-(適用-angular-9-以上版本)\">解法二 新增 Directive (適用 Angular 9 以上版本)</h2>\n<ul>\n<li>Directive</li>\n</ul>\n<pre><code class=\"language-ts\">import { Directive, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\n@Directive({\n  selector: '[appDisableControl], [disableControl]',\n})\nexport class DisableControlDirective implements OnChanges {\n  isDisabled: boolean;\n\n  @Input() set disableControl(condition: boolean) {\n    this.isDisabled = condition;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['disableControl']) {\n      const action = this.isDisabled ? 'disable' : 'enable';\n      this.ngControl.control[action]();\n    }\n  }\n\n  constructor(private ngControl: NgControl) {}\n}\n</code></pre>\n<ul>\n<li>html 引用</li>\n</ul>\n<pre><code class=\"language-html\">&lt;input type=&quot;text&quot; name=&quot;userName&quot; formControlName=&quot;userName&quot; appDisableControl [disableControl]=&quot;true&quot; /&gt;\n</code></pre>\n<p>資料來源：</p>\n<p><a target='_blank' href=\"https://netbasal.com/disabling-form-controls-when-working-with-reactive-forms-in-angular-549dd7b42110\">Disabling Form Controls When Working With Reactive Forms in Angular</a>\n<a target='_blank' href=\"https://stackoverflow.com/questions/60075561/directives-not-working-with-formcontrol-after-upgrading-to-angular-9\">Directives not working with FormControl after upgrading to Angular 9</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_router","title":"Angular Router 筆記","date":"2020/10/20","categories":["Angular"],"tags":["Angular"],"summary":"在 app.module.ts 引入 RouterModuleimport { RouterModule } from '@angular/router';@NgModule({  RouterMod","content":"<p>在 app.module.ts 引入 RouterModule</p>\n<pre><code class=\"language-ts\">import { RouterModule } from '@angular/router';\n\n@NgModule({\n  RouterModule.forRoot(routes)\n})\n</code></pre>\n<h2 id=\"router-設定\">router 設定</h2>\n<p><code>ps.注意：路徑不包含斜線</code></p>\n<pre><code class=\"language-ts\">const routes: Routes = [\n  {\n    path: &quot;home&quot;,\n    component: HomeComponent,\n  },\n  {\n    path: &quot;blog&quot;,\n    loadChildren: () =&gt; import(&quot;./blog/blog.module&quot;).then((m) =&gt; m.BlogModule),\n  },\n  { path: &quot;404&quot;, component: NotFoundComponent },\n  { path: &quot;**&quot;, component: NotFoundComponent },\n];\n</code></pre>\n<p>Route Guards 路由守衛</p>\n<pre><code class=\"language-ts\">class AlwaysAuthGuard implements CanActivate {\n  canActivate() {\n    return true;\n  }\n}\n</code></pre>\n<pre><code class=\"language-ts\">const routes: Routes = [\n  { path: &quot;home&quot;, component: HomeComponent },\n  { path: &quot;blog/:id&quot;, component: BlogCompoent, canActivate: [AlwaysAuthGuard] },\n  { path: &quot;**&quot;, component: PageNotFoundComponent },\n];\n</code></pre>\n<p>預設導址</p>\n<pre><code class=\"language-ts\">{\n    path: '**',\n    redirectTo: 'list',\n},\n</code></pre>\n<hr>\n<h2 id=\"網址傳參數\">網址傳參數</h2>\n<h3 id=\"path\">path</h3>\n<p>網址 <a target='_blank' href=\"http://localhost:4200/list/%E7%B6%B2%E5%9D%80%E8%AE%8A%E6%95%B8\">http://localhost:4200/list/網址變數</a></p>\n<p>routing.module</p>\n<pre><code class=\"language-ts\">{\n    path: 'blog',\n    data: { //這一層要給它的資料\n      breadcrumb: 'NAV.blog',\n    },\n    loadChildren: () =&gt; import('./blog/blog.module').then((m) =&gt; m.BlogModule)\n    canActivateChild: [AlwaysAuthGuard],  //路由守衛\n},\n</code></pre>\n<pre><code class=\"language-ts\">{\n    path: 'blog/:slug',  //有加「:」就是變數\n    component: BlogComponent,\n},\n</code></pre>\n<p>ts 設定網址連結 (path)</p>\n<pre><code class=\"language-ts\">constructor(private router: Router) { }\n\nthis.router.navigate(['blog/', 'taiwan']);\n</code></pre>\n<p>html template 設定網址連結</p>\n<pre><code class=\"language-html\">&lt;a [routerLink]=&quot;['blog', 'taiwan']&quot; routerLinkActive=&quot;active&quot;&gt;Prodcuts&lt;/a&gt;\n</code></pre>\n<p><code>routerLinkActive=&quot;active&quot;</code> 若是在當下這頁面 會新增一個 ‘active’ 的 class</p>\n<p>ts 取得網址參數方式</p>\n<pre><code class=\"language-ts\">constructor(private activatedRoute: ActivatedRoute) { }\n\nthis.activatedRoute.paramMap.subscribe((params: Params)=&gt; {\n    //params: { slug: 'taiwan' }\n    console.log( params.get('slug') )  // 'taiwan'\n})\n</code></pre>\n<hr>\n<h3 id=\"queryparam\">queryParam</h3>\n<p>網址 <a target='_blank' href=\"http://localhost:4200/list?%E5%8F%83%E6%95%B8%E5%90%8D=%E8%AE%8A%E6%95%B8\">http://localhost:4200/list?參數名=變數</a></p>\n<p>routing.module 不變</p>\n<pre><code class=\"language-ts\">{\n  path: 'list',\n  component: ListComponent,\n},\n</code></pre>\n<p>ts:</p>\n<pre><code class=\"language-ts\">constructor(private router: Router) { }\n\nthis.router.navigate(['list/'], { queryParams: { page: pageNumber, test: '字串也可' } });\n</code></pre>\n<p>template</p>\n<pre><code class=\"language-html\">&lt;a [routerLink]=&quot;['list']&quot; [queryParams]=&quot;{ page: pageNumber }&quot;&gt;Prodcuts&lt;/a&gt;\n</code></pre>\n<p>取得參數方式</p>\n<pre><code class=\"language-ts\">constructor(private activatedRoute: ActivatedRoute) { }\n\nthis.activatedRoute.queryParamMap.subscribe( (params: ParamMap) =&gt; {\n    //params: { page: '1' }\n    console.log( params.get('page') )  // '1'\n})\n</code></pre>\n<hr>\n<p>activatedRoute 裡的 queryParamMap 跟 paramMap 都是可觀察物件 接下來就是需要理解 rxjs 後 才能活用了</p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_router_change_bug","title":"Angular Router Change 踩雷日記","date":"2020/09/13","categories":["Angular"],"tags":["Angular","life"],"summary":"最近在專案上出現了一個，點導址按鈕導頁後，出現 api 重覆打的情形而且還是在特定會在 side bar 點了才會出現這 bug奇怪了，之前做的都沒遇過這問題呀，寫的方式也都是一樣花了好多間找問題點 ","content":"<p>最近在專案上出現了一個，點導址按鈕導頁後，出現 api 重覆打的情形\n而且還是在特定會在 side bar 點了才會出現這 bug\n奇怪了，之前做的都沒遇過這問題呀，寫的方式也都是一樣</p>\n<p>花了好多間找問題點 怎麼找都找不到 找過 <code>router</code>, <code>reslover</code> 各種設定都看過 也都試過了 就還是試不出來 餵狗也餵了好久 就是想不透</p>\n<p>就這就盲目的試了好久 花了好多時間\n後來 就去上了個洗手間 在解放的過程中 突然想到同事曾經過我說過我這個 bug 的關鍵字 <code>last navigator to </code>，當時還拿筆記了下來</p>\n<p>但為時已晚 就收收下班回家了</p>\n<p>到家後，打了同事說的關鍵字，估狗到了這篇文 <a target='_blank' href=\"https://stackoverflow.com/questions/41038970/how-to-determine-previous-page-url-in-angular\">How to determine previous page URL in Angular?</a></p>\n<p>試著把網址變化 console 出來\n結果發現 原來第二次還有在網址上多加了預設參數</p>\n<hr>\n<p>專案情境\n先取得當下的時間 然後利用當下的時間 去取得 a 資料\n再利用 a 資料 當參數取得 b 資料</p>\n<p>所以我把參數丟到網址上 當網址有變化時 就會再打一次api\n而我這裡又有設定 網址有變化時 就會去要一次api</p>\n<p>真相一切都大白了!!!\n雷都是自己埋的RRRRRRRRRRRRR</p>\n<p>找到問題點後 就好處理了 QQ</p>\n<hr>\n<p>此篇是為了記念自己逝去的青春 😭😭😭😭</p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_rxjs-create","title":"Angular 如何將多筆資料上傳後，取得全部回傳資料，再送到另一支 API","date":"2021/09/22","categories":["Angular"],"tags":["Angular","RxJS","ironman2021"],"summary":"來回顧一下前幾天的日記文Angular 圖片上傳之…日記文程式碼流程規劃之…日記文與今天介紹的內容有關，如何將多筆資料上傳後，取得全部回傳資料後再將其資料整理，送到另一支 API這次將會使用 RxJS","content":"<p>來回顧一下前幾天的日記文</p>\n<p><a target='_blank' href=\"https://ithelp.ithome.com.tw/articles/10264083\">Angular 圖片上傳之…日記文</a>\n<a target='_blank' href=\"https://ithelp.ithome.com.tw/articles/10266565\">程式碼流程規劃之…日記文</a></p>\n<p>與今天介紹的內容有關，如何將多筆資料上傳後，取得全部回傳資料後\n再將其資料整理，送到另一支 API\n這次將會使用 RxJS 來做處理</p>\n<h2 id=\"情境\">情境</h2>\n<p>我有一筆訂單，裡面有許多的產品，需要先將產品上傳後，取得產品回傳後的 id，再將這些 id 塞到這筆訂單裡，此筆訂單才算完成。</p>\n<h2 id=\"狀況\">狀況</h2>\n<p>因為是打 API，所以會有不同步的問題產生，首先必需要先克服這一點，才能繼續下一步</p>\n<hr>\n<h2 id=\"實作\">實作</h2>\n<blockquote>\n<p>假資料 API <a target='_blank' href=\"https://fakestoreapi.com/docs\">FakeStoreAPI</a></p>\n</blockquote>\n<p>在 service 裡先建立兩支 post api\n一支是 <code>createProd</code> 用來建立產品資料\n另一搬是 <code>createOrder</code> 用來建立訂單資料</p>\n<p>service.ts</p>\n<pre><code class=\"language-js\">createProd(data: any): Observable&lt;any&gt; {\n  const url = `https://fakestoreapi.com/products`;\n  const newData = JSON.stringify(data);\n  return this.httpClient.post(url, newData, {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  });\n}\n\ncreateOrder(data: any): Observable&lt;any&gt; {\n  const url = `https://fakestoreapi.com/carts`;\n  const newData = JSON.stringify(data);\n  return this.httpClient.post(url, newData, {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  });\n}\n</code></pre>\n<p>在 template 裡做一個 submit 的按鈕</p>\n<pre><code class=\"language-html\">&lt;button (click)=&quot;onSubmit()&quot;&gt;Create Product In Cart&lt;/button&gt;\n</code></pre>\n<p>建立預設傳入資料\n.ts</p>\n<pre><code class=\"language-js\">products = [\n  {\n    title: 101,\n    price: &quot;11&quot;,\n    quantity: 1,\n  },\n  {\n    title: 102,\n    price: &quot;22&quot;,\n    quantity: 35,\n  },\n  {\n    title: 103,\n    price: &quot;33&quot;,\n    quantity: 10,\n  },\n];\n\norder = {\n  userId: 5,\n  date: new Date().toJSON(),\n};\n</code></pre>\n<hr>\n<p>重頭戲來囉！！</p>\n<p>.ts</p>\n<pre><code class=\"language-js\">onSubmit(): void {\n  const maydata = {\n    products: this.products,\n    order: this.order,\n  };\n\n  of(maydata)\n    .pipe(\n      concatMap((data) =&gt; {\n        const update$ = data.products.map((product) =&gt; {\n          return this.appService.createProd(product).pipe(\n            map((res) =&gt; {\n              return {\n                productId: res._id,\n                quantity: product.quantity,\n              };\n            })\n          );\n        });\n        return combineLatest(update$ as Array&lt;Observable&lt;any&gt;&gt;).pipe(\n          map((d) =&gt; {\n            const combineData = { ...data.order, products: d };\n            return combineData;\n          })\n        );\n      }),\n      switchMap((data) =&gt; {\n        return this.appService.createOrder(data);\n      })\n    )\n    .subscribe();\n}\n</code></pre>\n<p>如圖所示：\n<img src=\"assets/images/ironman/ng_rxjs-create/JnNZsr8.gif\" alt=\"\"></p>\n<hr>\n<h2 id=\"案例解說-(rxjs-連續技使用)\">案例解說 (RxJs 連續技使用)</h2>\n<p>這裡我先將所有要傳入的資料包成一個物件，然後使用 rxjs 裡的 <code>concatMap</code> (註一)去處理產品上傳這部份，\n<code>concatMap</code> 的特性就是等所有資料都回傳回來後，才會進行下一步動作，接著再使用 <code>combineLatest</code>(註二) 的特性處理回傳回來後的資料，再使用 <code>switchMap</code>(註一)，打一下筆 API</p>\n<p>說起來簡單 但實際上若是不熟 RxJs 會卡蠻久的 (沒錯，我就是苦主之一 XDDD)</p>\n<hr>\n<h2 id=\"附錄\">附錄</h2>\n<p>範例：<a target='_blank' href=\"https://stackblitz.com/edit/angular-ivy-qiwggq\">https://stackblitz.com/edit/angular-ivy-qiwggq</a></p>\n<p>註一：<a target='_blank' href=\"https://ithelp.ithome.com.tw/articles/10248745\">RxJS 轉換類型 Operators (2) - switchMap / concatMap / mergeMap / exhaustMap</a>\n註二：<a target='_blank' href=\"https://ithelp.ithome.com.tw/articles/10247915\">RxJS 組合/建立類型 Operators (2) - combineLatest / forkJoin / race</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_select-default-value","title":"Angular 下拉選單如何選定預設值","date":"2021/09/21","categories":["Angular"],"tags":["Angular","ironman2021"],"summary":"情境當表單送出後，資料庫會記錄送出後的值，下次再進來時，會需要重現上一次所填寫過的內容，這在實作上是很常遇到的事情。解決方式原以為這是件很簡單的事，讀取資料後，直接把值填上後即可(我想得太簡單了)，當","content":"<h2 id=\"情境\">情境</h2>\n<p>當表單送出後，資料庫會記錄送出後的值，下次再進來時，會需要重現上一次所填寫過的內容，這在實作上是很常遇到的事情。</p>\n<h2 id=\"解決方式\">解決方式</h2>\n<p>原以為這是件很簡單的事，讀取資料後，直接把值填上後即可(我想得太簡單了)，\n當實作時，卻怎麼樣也選不了預設值，後來發現在需要在 select 裡 加上 <code>compareWith</code> 比對，下拉選單才會正確選到所設定的遇設值。</p>\n<hr>\n<h2 id=\"實作\">實作</h2>\n<p>這裡有套用到 <a target='_blank' href=\"https://material.angular.io/\">Angular Material</a></p>\n<p>以下是以複選值做範例</p>\n<p>template</p>\n<pre><code class=\"language-html\">&lt;mat-form-field&gt;\n  &lt;mat-label&gt;Label&lt;/mat-label&gt;\n  &lt;mat-select multiple [formControl]=&quot;selected&quot; [compareWith]=&quot;compareFn&quot;&gt;\n    &lt;mat-option *ngFor=&quot;let option of options&quot; [value]=&quot;option&quot;&gt;\n      {{ option.label }}\n    &lt;/mat-option&gt;\n  &lt;/mat-select&gt;\n&lt;/mat-form-field&gt;\n</code></pre>\n<p>component</p>\n<pre><code class=\"language-ts\">interface option {\n  label: string;\n  value: string;\n}\n\nexport class ExampleComponent implements OnInit {\n  selected = new FormControl();\n\n  options: option[] = [\n    {\n      label: &quot;apple&quot;,\n      value: &quot;apple&quot;,\n    },\n    {\n      label: &quot;kiwi&quot;,\n      value: &quot;kiwi&quot;,\n    },\n    {\n      label: &quot;banana&quot;,\n      value: &quot;banana&quot;,\n    },\n    {\n      label: &quot;cherry&quot;,\n      value: &quot;cherry&quot;,\n    },\n  ];\n\n  ngOnInit(): void {\n    // 若 api 來的值是 fruits = ['banana', 'banana']\n    // 先將值轉為 option 格式\n\n    // 模擬api來的值\n    of([&quot;banana&quot;, &quot;kiwi&quot;])\n      .pipe(\n        take(1),\n        map((fruits: string[]) =&gt; {\n          return fruits.map((e) =&gt; {\n            return {\n              label: e,\n              value: e,\n            };\n          });\n        })\n      )\n      .subscribe((options: option[]) =&gt; {\n        this.selected.setValue(options);\n      });\n  }\n  compareFn(a: option, b: option): boolean {\n    return a &amp;&amp; b ? a.value === b.value : a === b;\n  }\n}\n</code></pre>\n<p>若是需要單選的話，將 html 裡的 <code>multiple</code> 移除</p>\n<p>這裡需要注意的是，FormControl 裡的值，需與 options 裡選單的格式是一樣，值才會被正常選中</p>\n<hr>\n<h2 id=\"程式碼解說\">程式碼解說</h2>\n<p>這裡需要有 rxjs 的概念\n範例使用 of 模擬 observable api 讀取進來的資料\nrxjs operators 的 <code>take</code> 執行一次後\n再使用 map 轉成我們需要的格式\n接著再 subscribe (訂閱) 出來 將值塞到 FormControl 裡</p>\n<p>範例：<a target='_blank' href=\"https://stackblitz.com/edit/angular-ivy-phixnz\">https://stackblitz.com/edit/angular-ivy-phixnz</a></p>\n<hr>\n<p>參考資料：<a target='_blank' href=\"https://angular.tw/api/forms/SelectControlValueAccessor\">https://angular.tw/api/forms/SelectControlValueAccessor</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_shallowCopy-vs-deepCopy","title":"Angular 淺拷貝之日記文","date":"2021/10/01","categories":["Angular"],"tags":["Angular","ironman2021"],"summary":"又踩雷啦啊哈哈哈哈哈。來重現一下遇到的情境吧bug 出現export class AppComponent implements OnInit {  fruit : any = {    apple:","content":"<p>又踩雷啦啊哈哈哈哈哈。\n來重現一下遇到的情境吧</p>\n<hr>\n<h2 id=\"bug-出現\">bug 出現</h2>\n<pre><code class=\"language-ts\">\nexport class AppComponent implements OnInit {\n  fruit : any = {\n    apple: {},\n    banana: {},\n  };\n\n  ngOnInit() {\n    this.fruit = {\n      apple: {\n        id: 1,\n        isSelect: false,\n      },\n      banana: {\n        id: 2,\n        isSelect: false,\n      },\n    };\n  }\n\n  onClick(isSelect: boolean) {\n    this.fruit = {\n      apple: {\n        id: 1,\n        isSelect,\n      },\n    };\n  }\n\n</code></pre>\n<ul>\n<li>一開始建了一個 <code>fruit</code> 的物件，裡面有 <code>apple</code> 與 <code>banana</code> 這兩樣空物件</li>\n<li>在 <code>OnInit</code> 時，賦予了 <code>apple</code> 與 <code>banana</code> 值</li>\n<li>當我按下 button Click 的 時後， apple 裡的 isSelect 為 true</li>\n</ul>\n<hr>\n<h2 id=\"啊！踩到雷了！\">啊！踩到雷了！</h2>\n<p>如圖，按下去後，噴錯了！</p>\n<p><img src=\"assets/images/ironman/ng_shallowCopy-vs-deepCopy/n0KX6uJ.gif\" alt=\"\"></p>\n<p>發現 banana 的 id 不見了，原來是我把 <code>this.fruit</code> 整個值給改掉了\n本以為上述的寫法，只會修改我有填的值 XD</p>\n<hr>\n<h2 id=\"解法：解構賦值-=&gt;-淺拷貝(shallow-copy)\">解法：解構賦值 =&gt; 淺拷貝(shallow copy)</h2>\n<p>這裡我使用了 js 裡的<code>解構賦值</code>處理，也可以用來做 <code>淺拷貝(shallow copy)</code>\n將 onClick 的寫測改成這樣</p>\n<pre><code class=\"language-ts\">onClick(isSelect: boolean) {\n  this.fruit = {\n    ...this.fruit,  // shallow copy\n    apple: {\n      id: 1,\n      isSelect,\n    },\n  };\n}\n</code></pre>\n<p>來看看成果。嗯…沒噴錯了 XD 結案！</p>\n<p><img src=\"assets/images/ironman/ng_shallowCopy-vs-deepCopy/tDm3C0c.gif\" alt=\"\"></p>\n<hr>\n<h2 id=\"筆記：深拷貝-(deep-copy)\">筆記：深拷貝 (deep copy)</h2>\n<p>將原本的物件轉字串後再轉成物件，就會又是全新的一個物件了！</p>\n<p><code>JSON.parse(JSON.stringify(objArray));</code></p>\n<p>objArray 為要帶入的物件</p>\n<hr>\n<h2 id=\"後記：\">後記：</h2>\n<p>本來以為是淺(深)拷貝的問題，後來仔細一看，原來是我自己搞錯了，將 <code>this.fruit</code> 裡面的整個值都蓋掉，所以才會噴錯，不過剛好也來認識一下 深拷貝與淺拷貝的這件事囉。</p>\n<p>案例：<a target='_blank' href=\"https://stackblitz.com/edit/angular-ivy-wvmptw\">https://stackblitz.com/edit/angular-ivy-wvmptw</a></p>\n<p>參考資料：</p>\n<p><a target='_blank' href=\"https://es6.ruanyifeng.com/#docs/destructuring\">变量的解构赋值</a>\n<a target='_blank' href=\"https://blog.techbridge.cc/2018/06/23/javascript-call-by-value-or-reference/\">深入探討 JavaScript 中的參數傳遞：call by value 還是 reference？</a>\n<a target='_blank' href=\"https://medium.com/andy-blog/%E9%97%9C%E6%96%BCjs%E4%B8%AD%E7%9A%84%E6%B7%BA%E6%8B%B7%E8%B2%9D-shallow-copy-%E4%BB%A5%E5%8F%8A%E6%B7%B1%E6%8B%B7%E8%B2%9D-deep-copy-5f5bbe96c122\">關於 JS 中的淺拷貝(shallow copy)以及深拷貝(deep copy)</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_urlInfo","title":"如何在 Angular 獲取 URL 資訊","date":"2021/10/09","categories":["Angular"],"tags":["Angular","ironman2021"],"summary":"在實作裡，很多時後我們會將一些必要資訊記錄在網址上，直接在網址裡就能得到我們要的訊息不用再透過組件將資訊層層傳遞，達到解耦合的效果。URL註：一切一切 都只是我用來舉例，不代表為鐵人賽網址真正的實際規","content":"<p>在實作裡，很多時後我們會將一些必要資訊記錄在網址上，直接在網址裡就能得到我們要的訊息\n不用再透過組件將資訊層層傳遞，達到解耦合的效果。</p>\n<hr>\n<h2 id=\"url\">URL</h2>\n<p>註：一切一切 都只是我用來舉例，不代表為鐵人賽網址真正的實際規劃哦！</p>\n<p>例如：我的鐵人賽主題網址為\n<a target='_blank' href=\"https://ithelp.ithome.com.tw/users/20093270/ironman/4623?page=2\">https://ithelp.ithome.com.tw/users/20093270/ironman/4623?page=2</a></p>\n<p>我們試著將網址解析出</p>\n<blockquote>\n<p>user =&gt; 使用者\n20093270 =&gt; 使用者編號\nironman =&gt; 鐵人賽檔案\n4623 =&gt; 鐵人賽主題編號</p>\n</blockquote>\n<blockquote>\n<p>page =&gt; 我正在第 2 頁</p>\n</blockquote>\n<p>從這裡可以推測出來，我們可以利用上面的編號去打 API 得到我們需要的資料，或是將這些資料的資料顯示在頁面上</p>\n<hr>\n<h2 id=\"route-規劃\">route 規劃</h2>\n<p>由此可得知，我們可以將 route 做這樣的規劃</p>\n<pre><code class=\"language-ts\">const routes: Routes = [\n  {\n    path: &quot;user/:userId&quot;,\n    component: UserComponent,\n    children: [\n      {\n        path: &quot;ironman&quot;,\n        component: IronmanComponent,\n        children: [\n          {\n            path: &quot;:ironmanId&quot;,\n            component: IronmanListComponent,\n          },\n        ],\n      },\n    ],\n  },\n  {\n    path: &quot;**&quot;,\n    redirectTo: &quot;user/:userId&quot;,\n  },\n];\n</code></pre>\n<p>可以看到 有些 path 上的設裡有加「:」，這個代表變數</p>\n<hr>\n<h2 id=\"設定網址連結\">設定網址連結</h2>\n<p>當我們架構寫出來後，實作上就可以開始使用了</p>\n<h3 id=\"html-設定網址連結\">html 設定網址連結</h3>\n<p>在 html 上 可以這樣寫</p>\n<pre><code class=\"language-html\">&lt;a\n  [routerLink]=&quot;['user', userId, 'ironman', ironmanId]&quot;\n  [queryParams]=&quot;{ page: pageNum }&quot;\n  &gt;Angular 常見問題大小事 列表&lt;/a\n&gt;\n</code></pre>\n<h3 id=\"ts-設定網址連結\">ts 設定網址連結</h3>\n<p>在 ts 裡的寫法為</p>\n<pre><code class=\"language-ts\">// 將 Router 注入\nconstructor(private router: Router) { }\n\nthis.router.navigate(\n  ['user', userId, 'ironman', ironmanId], {\n    queryParams: { page: pageNum }\n  }\n);\n\n</code></pre>\n<p>若是要加上其他額外的資訊，在不影響其他網址的情況下，可以這麼做</p>\n<pre><code class=\"language-ts\">this.router.navigate([], {\n  queryParams: { msg: &quot;newMsg&quot; },\n  queryParamsHandling: &quot;merge&quot;,\n});\n</code></pre>\n<p>得到的網址就會變成\n<code>https://ithelp.ithome.com.tw/users/20093270/ironman/4623?page=2&amp;msg=newMsg</code></p>\n<p><a target='_blank' href=\"https://angular.tw/api/router/QueryParamsHandling\">QueryParamsHandling</a></p>\n<hr>\n<h2 id=\"取得網址上的資訊\">取得網址上的資訊</h2>\n<h3 id=\"path-路徑取得\">path 路徑取得</h3>\n<p>在 <code>UserComponent</code> 裡執行\n取得 <code>userId</code> 與 <code>ironmanId</code></p>\n<pre><code class=\"language-ts\">constructor(private activatedRoute: ActivatedRoute) { }\n\n// userId\nthis.activatedRoute.paramMap.subscribe( (params: Params) =&gt; {\n  console.log( 'userId', params.get('userId') )\n})\n\n// ironmanId\n\nthis.activatedRoute.firstChild?.firstChild?.paramMap.subscribe( (params: Params) =&gt; {\n  console.log( 'ironmanId', params.get('ironmanId') )\n})\n</code></pre>\n<p>因為 ironmanId 設定在 UserComponent 的下下一層，所以使用了兩次 <code>firstChild</code></p>\n<h3 id=\"query-參數\">query 參數</h3>\n<pre><code class=\"language-ts\">this.activatedRoute.queryParamMap.subscribe((params: Params) =&gt; {\n  console.log(&quot;page&quot;, params.get(&quot;page&quot;));\n});\n</code></pre>\n<hr>\n<p>因為懶的再開新專案，今天範例就與昨天的放一起囉～\n實作如下：\n<a target='_blank' href=\"https://stackblitz.com/edit/angular-routing-breadcrumb?file=src%2Fapp%2Fuser%2Fuser.component.ts\">https://stackblitz.com/edit/angular-routing-breadcrumb?file=src%2Fapp%2Fuser%2Fuser.component.ts</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_ViewChild-ViewChildren","title":"Angular ViewChild 與 ViewChildren 介紹","date":"2021/10/03","categories":["Angular"],"tags":["Angular","ironman2021"],"summary":"ViewChild 這個屬性在 Angular 是屬於很常用的一部份今天就來了解一下 ViewChild 與 ViewChildren 的差別與使用方式吧！先做一個子組件HelloComponent ","content":"<p>ViewChild 這個屬性在 Angular 是屬於很常用的一部份</p>\n<p>今天就來了解一下 ViewChild 與 ViewChildren 的差別與使用方式吧！</p>\n<h2 id=\"先做一個子組件\">先做一個子組件</h2>\n<blockquote>\n<p>HelloComponent 子組件</p>\n</blockquote>\n<pre><code class=\"language-ts\">import { Component, Input } from &quot;@angular/core&quot;;\n\n@Component({\n  selector: &quot;hello&quot;,\n  template: `&lt;h1&gt;Hello {{ name }}!&lt;/h1&gt;`,\n  styles: [\n    `\n      h1 {\n        font-family: Lato;\n      }\n    `,\n  ],\n})\nexport class HelloComponent {\n  @Input() name: string;\n}\n</code></pre>\n<hr>\n<h2 id=\"viewchild\">ViewChild</h2>\n<p>屬性裝飾器，用於配置一個檢視查詢。 變更檢測器會在檢視的 DOM 中查詢能匹配上該選擇器的第一個元素或指令。 如果檢視的 DOM 發生了變化，出現了匹配該選擇器的新的子節點，該屬性就會被更新。\n它支援 Type 類型或 string 類型的選擇器，同時支持設置 read 查詢條件，以獲取不同類型的實例。比如 ElementRef 和 ViewContainerRef.</p>\n<blockquote>\n<p>父組件</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;hello #hello name=&quot;{{ name }}&quot;&gt;&lt;/hello&gt;\n</code></pre>\n<pre><code class=\"language-ts\">import { AfterViewInit, Component, VERSION, ViewChild } from &quot;@angular/core&quot;;\nimport { HelloComponent } from &quot;./hello.component&quot;;\n\n@Component({\n  selector: &quot;my-app&quot;,\n  templateUrl: &quot;./app.component.html&quot;,\n  styleUrls: [&quot;./app.component.css&quot;],\n})\nexport class AppComponent implements AfterViewInit {\n  name = &quot;Angular &quot; + VERSION.major;\n\n  @ViewChild(&quot;hello&quot;) helloElement: HelloComponent;\n  ngAfterViewInit() {\n    // child is set\n    console.log(&quot;helloElement&quot;, this.helloElement);\n  }\n}\n</code></pre>\n<p><img src=\"assets/images/ironman/ng_ViewChild-ViewChildren/BhgFPcK.png\" alt=\"\"></p>\n<p><code>console</code> 出來可以直接取到子組件裡的變數</p>\n<hr>\n<h2 id=\"viewchildren\">ViewChildren</h2>\n<p>用於配置檢視查詢的引數裝飾器。</p>\n<blockquote>\n<p>父組件</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;ng-container *ngFor=&quot;let item of arrName&quot;&gt;\n  &lt;hello #item [name]=&quot;item&quot;&gt;&lt;/hello&gt;\n&lt;/ng-container&gt;\n</code></pre>\n<pre><code class=\"language-ts\">import { AfterViewInit, Component, VERSION, ViewChild } from &quot;@angular/core&quot;;\nimport { HelloComponent } from &quot;./hello.component&quot;;\n\n@Component({\n  selector: &quot;my-app&quot;,\n  templateUrl: &quot;./app.component.html&quot;,\n  styleUrls: [&quot;./app.component.css&quot;],\n})\nexport class AppComponent implements AfterViewInit {\n  arrName = [&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;];\n  @ViewChildren(&quot;item&quot;) itemElement: QueryList&lt;HelloComponent&gt;;\n\n  ngAfterViewInit() {\n    this.itemElement.map((e) =&gt; {\n      console.log(&quot;itemElement&quot;, e.name); // 依序提出子組件裡的值\n    });\n  }\n}\n</code></pre>\n<p>此為 console <code>this.itemElement</code> 的畫面\n<img src=\"assets/images/ironman/ng_ViewChild-ViewChildren/ENj8gMU.png\" alt=\"\"></p>\n<p>注意：\n<code>ViewChildren</code> 一定要搭配 <code>QueryList</code> 一起使用，不然就不能實現列表更新這件事了\n因生命週期關係 <code>ViewChild</code> 與 <code>ViewChildren</code> 要在 <code>ngAfterViewInit</code> 裡才能實現</p>\n<hr>\n<p>範例：<a target='_blank' href=\"https://stackblitz.com/edit/angular-ivy-cdn6fp\">https://stackblitz.com/edit/angular-ivy-cdn6fp</a></p>\n<p>參考資料：\n<a target='_blank' href=\"https://angular.tw/api/core/ViewChild\">ViewChild</a>\n<a target='_blank' href=\"https://angular.tw/api/core/ViewChildren\">ViewChildren</a></p>\n"},{"directory":"angular","layout":"Angular","slug":"ng_window_resize","title":"Angular Window Resize Event (偵測視窗縮放事件)","date":"2022/09/28","categories":["Angular"],"tags":["Angular"],"summary":"偶然發現 Angular 有蠻多種方式可以偵到一些視窗事件，順手記錄下來template 傳送事件&lt;div (window:resize)=&quot;onResize($event)&quot","content":"<p>偶然發現 Angular 有蠻多種方式可以偵到一些視窗事件，順手記錄下來</p>\n<h2 id=\"template-傳送事件\">template 傳送事件</h2>\n<pre><code class=\"language-html\">&lt;div (window:resize)=&quot;onResize($event)&quot;&gt;&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-ts\">onResize(event: Event) {\n  event.target.innerWidth;\n}\n</code></pre>\n<hr>\n<h2 id=\"hostlistener\">HostListener</h2>\n<pre><code class=\"language-ts\">@HostListener('window:resize', ['$event'])\nonResize(event) {\n  event.target.innerWidth;\n}\n</code></pre>\n<hr>\n<h2 id=\"component-host\">Component host</h2>\n<pre><code class=\"language-ts\">@Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  host: {\n    '(window:resize)': 'onResize($event)',\n  },\n})\n\nonResize(event: Event) {\n  event.target.innerWidth;\n}\n</code></pre>\n<hr>\n<h2 id=\"rxjs\">RxJS</h2>\n<pre><code class=\"language-ts\">@Component({\n  ...\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  resizeObservable$: Observable&lt;Event&gt; = fromEvent(window, 'resize');\n  resizeSubscription$!: Subscription;\n\n  ngOnInit(): void {\n     this.resizeSubscription$ = this.resizeObservable$.subscribe((e) =&gt; {\n      // do Something\n    });\n  }\n\n  // 離開後解訂閱\n  ngOnDestroy() {\n    this.resizeSubscription$.unsubscribe();\n  }\n}\n\n</code></pre>\n<p>在 <code>subscribe</code> 前 可再多做些設定，當 resize 時，不用一直觸發，300ms 偵測一次就好</p>\n<pre><code class=\"language-ts\">this.resizeSubscription$ = this.resizeObservable$\n  .pipe(debounceTime(300))\n  .subscribe((e) =&gt; {\n    // do Something\n  });\n</code></pre>\n<hr>\n<h2 id=\"如何一開始就偵側到視窗大小\">如何一開始就偵側到視窗大小</h2>\n<pre><code class=\"language-ts\">@Component({\n  selector: &quot;app-about&quot;,\n  templateUrl: &quot;./about.component.html&quot;,\n  styleUrls: [&quot;./about.component.scss&quot;],\n})\nexport class AboutComponent implements OnInit, OnDestroy {\n  // 初始化\n  initial$ = of(window).pipe(\n    map((event: any) =&gt; {\n      return {\n        width: event.innerWidth,\n        height: event.innerHeight,\n      }\n    })\n  )\n  // 當視窗拖動的時後\n  resize$ = fromEvent(window, &quot;resize&quot;).pipe(\n    map((event: Event) =&gt; {\n      return {\n        width: event.target.innerWidth,\n        height: event.target.innerHeight,\n      }\n    })\n  );\n  winSize$ = merge(this.resize$, this.initial$).pipe(distinctUntilChanged());\n  subscription$!: Subscription;\n  constructor() {}\n\n  ngOnInit(): void {\n    this.subscription$ = this.winSize$.subscribe({ width, height} =&gt; {\n      console.log('width', width, 'height', height);\n    });\n  }\n\n  ngOnDestroy() {\n    // 記得解訂閱\n    this.subscription$.unsubscribe();\n  }\n}\n</code></pre>\n"},{"directory":"angular","layout":"Angular","slug":"scully_comments","title":"Scully 新增留言系統","date":"2021/05/15","categories":["Scully"],"tags":["Angular","Scully"],"summary":"設定 utterances這次選定了 utterances 來當留言系統，它是使用 githubissue 當成網站的留言系統先前是使用 DISQUS 覺得不是很好用，所以趁著這次翻寫時 也一起換掉了","content":"<h2 id=\"設定-utterances\">設定 utterances</h2>\n<p>這次選定了 <a target='_blank' href=\"https://utteranc.es/\">utterances</a> 來當留言系統，它是使用 github\nissue 當成網站的留言系統</p>\n<p>先前是使用 <code>DISQUS</code> 覺得不是很好用，所以趁著這次翻寫時 也一起換掉了 (雖說也沒什麼人會留言啦 哈哈哈)</p>\n<p>先在 github 裡安裝 <a target='_blank' href=\"https://github.com/apps/utterances\">utterances app</a>\n<img src=\"assets/images/angular/scully_comments/001.png\" loading=\"lazy\" /></p>\n<p>接著選定要留言的 repo <img src=\"assets/images/angular/scully_comments/002.png\"/></p>\n<p>再來設定留言的一些格式 設定完後</p>\n<p>utteranc 會提供了這串 script 讓使用頁插入到頁面裡</p>\n<pre><code class=\"language-js\">&lt;script\n  src=&quot;https://utteranc.es/client.js&quot;\n  repo=&quot;[ENTER REPO HERE]&quot;\n  issue-term=&quot;pathname&quot;\n  theme=&quot;github-light&quot;\n  crossorigin=&quot;anonymous&quot;\n  async\n&gt;&lt;/script&gt;\n</code></pre>\n<hr>\n<h2 id=\"angular-設定\">Angular 設定</h2>\n<p>因為我們是要用在 angular 裡，所以稍微修改一下</p>\n<pre><code class=\"language-ts\">import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, OnInit, Renderer2 } from '@angular/core';\n\n@Component({\n  selector: 'app-comments',\n  styleUrls: ['./comments.component.scss'],\n  template: `&lt;div id=&quot;comments&quot;&gt;&lt;/div&gt;`,\n})\nexport class CommentsComponent implements OnInit {\n  constructor(\n    @Inject(DOCUMENT) private document,\n    private renderer2: Renderer2\n  ) {}\n\n  ngOnInit(): void {\n    const script = this.renderer2.createElement('script');\n    script.type = 'text/javascript';\n    script.src = 'https://utteranc.es/client.js';\n    script.setAttribute('repo', '你的github帳號/&lt;你的github帳號&gt;.github.io');\n    script.setAttribute('issue-term', 'pathname');\n    script.setAttribute('theme', 'github-light'); // css 樣式設定\n    script.setAttribute('crossorigin', 'anonymous');\n    script.text = ``;\n    this.renderer2.appendChild(\n      this.document.querySelector('#comments'),\n      script\n    );\n  }\n}\n</code></pre>\n<p>ps. 剛開始設定的時後會跑不太出來，稍微等一下下就 OK 了</p>\n<h2 id=\"訪客留言門檻\">訪客留言門檻</h2>\n<p>需要有 Github 帳號 才能順利留言哦!!!</p>\n"},{"directory":"angular","layout":"Angular","slug":"scully_deploy","title":"Scully 佈署到 github","date":"2021/05/04","categories":["Scully"],"tags":["Angular","Scully","Github"],"summary":"終於！用 scully 把先前的 Blog 翻寫完成了!!! 灑花～接著當然是要把頁面佈署到 github 讓其他人看到啦不然也只能自己自 high XD安裝首先安裝 angular-cli-ghpa","content":"<p>終於！用 scully 把先前的 Blog 翻寫完成了!!! 灑花～</p>\n<p>接著當然是要把頁面佈署到 github 讓其他人看到啦</p>\n<p>不然也只能自己自 high XD</p>\n<h2 id=\"安裝\">安裝</h2>\n<p>首先安裝 angular-cli-ghpages</p>\n<pre><code class=\"language-bash\">npm i -g angular-cli-ghpages\n</code></pre>\n<p>輸入 <code>ngh --version</code> 可檢查本機是否已安裝過</p>\n<hr>\n<h2 id=\"注意事項\">注意事項</h2>\n<p>要注意的是 ghpages 會幫你把 build 出來的 dist 資料夾整包部署到 github 所以在\nangular.json 與 scully.&lt;你的專案&gt;.config.ts 的 outputPath 必需一致 才能整包一起\n丟到 github 上，不然會分成兩包丟，出來頁面的路徑會對不上</p>\n<p>如圖： <img src=\"assets/images/angular/scully_deploy/001.png\" loading=\"lazy\" />\n<img src=\"assets/images/angular/scully_deploy/002.png\"/></p>\n<hr>\n<h2 id=\"串連-github\">串連 github</h2>\n<p>若 git 尚未初始化時 會出現這樣的錯誤</p>\n<pre><code class=\"language-bash\">Failed to get remote.origin.url (task must either be run in a git repository\nwith a configured origin remote or must be configured with the &quot;repo&quot; option).\n</code></pre>\n<p>先初始化 git</p>\n<pre><code class=\"language-bash\">git init\n</code></pre>\n<p>新增遠端</p>\n<pre><code class=\"language-bash\">git remote add github git@github.com:&lt;your git name&gt;/&lt;your git repertory&gt;\n</code></pre>\n<p>設定遠端</p>\n<pre><code class=\"language-bash\">git remote set-url origin git@github.com:&lt;your git name&gt;/&lt;your git repertory&gt;\n</code></pre>\n<p>若是出現 <code>error: No such remote 'origin'</code> 可用另一種方式新增</p>\n<pre><code class=\"language-bash\">git remote add origin https://github.com/&lt;your git name&gt;/&lt;your git repertory&gt;\n</code></pre>\n<hr>\n<p>觀看 git 設定 <code>git remote -v</code>\n<img src=\"assets/images/angular/scully_deploy/003.png\"/></p>\n<hr>\n<h2 id=\"deploy\">deploy</h2>\n<p>接著再到 package.json 新增一行新的 script</p>\n<pre><code class=\"language-bash\">&quot;deploy&quot;: &quot;ng build --prod &amp;&amp; npm run scully &amp;&amp; npx ngh --dir=dist/static&quot;\n</code></pre>\n<p>因為我們先前將 outputPath 生成到 static 這個資料夾，需再設定 <code>--dir=dist/static</code></p>\n<p>執行 <code>npm run deploy</code> 就會直接幫你部署到 github 上囉！</p>\n<p>再來就是打開網頁 看有沒有部署成功囉！</p>\n"},{"directory":"angular","layout":"Angular","slug":"scully_install","title":"初探 Scully 建立 blog","date":"2020/10/11","categories":["Scully"],"tags":["Angular","Scully"],"summary":"原本就是寫 Angular 框架的我，最近得知 Scully 屬 Angular 的靜態頁面產生器，激起了我的好奇心所以開始了以下路程官方文件：https://scully.io/準備使用環境    ","content":"<p>原本就是寫 Angular 框架的我，最近得知 Scully 屬 Angular 的靜態頁面產生器，激起了\n我的好奇心所以開始了以下路程</p>\n<p>官方文件：<a target='_blank' href=\"https://scully.io/\">https://scully.io/</a></p>\n<h2 id=\"準備\">準備</h2>\n<p>使用環境</p>\n<pre><code class=\"language-bash\">     _                      _                 ____ _     ___\n    / \\   _ __   __ _ _   _| | __ _ _ __     / ___| |   |_ _|\n   / △ \\ | '_ \\ / _` | | | | |/ _` | '__|   | |   | |    | |\n  / ___ \\| | | | (_| | |_| | | (_| | |      | |___| |___ | |\n /_/   \\_\\_| |_|\\__, |\\__,_|_|\\__,_|_|       \\____|_____|___|\n                |___/\n\n\nAngular CLI: 10.1.6\nNode: 12.9.1\nOS: win32 x64\n\nAngular: 10.1.5\n... animations, common, compiler, compiler-cli, core, forms\n... platform-browser, platform-browser-dynamic, router\nIvy Workspace: Yes\n\nPackage                         Version\n---------------------------------------------------------\n@angular-devkit/architect       0.1001.6\n@angular-devkit/build-angular   0.1001.6\n@angular-devkit/core            10.1.6\n@angular-devkit/schematics      10.1.6\n@angular/cli                    10.1.6\n@schematics/angular             10.1.6\n@schematics/update              0.1001.6\nrxjs                            6.6.3\ntypescript                      4.0.3\n</code></pre>\n<p>先建立一個新的 ng 專案</p>\n<pre><code class=\"language-bash\">ng new scully(專案名稱)\n</code></pre>\n<p>新增 Scully</p>\n<pre><code class=\"language-bash\">ng add @scullyio/init\n</code></pre>\n<p>註：安裝完後 需重新啟動 <code>ng serve</code></p>\n<p>此時會新增一支 scully.&lt;專案名稱&gt;.config.ts 檔案主要是用來配置 靜態檔案的 router\n的路徑</p>\n<p>一開始的文件會是像這樣 此時 router 尚未設定</p>\n<pre><code class=\"language-ts\">import { ScullyConfig } from '@scullyio/scully';\nexport const config: ScullyConfig = {\n  projectRoot: './src',\n  projectName: 'scully',\n  outDir: './dist/static',\n  routes: {},\n};\n</code></pre>\n<p>在啟動 Scully 前，需先執行 (可以在 vscode 裡開一個新的 cmd)</p>\n<pre><code class=\"language-bash\">ng build --prod\n</code></pre>\n<p>執行完後 再啟動 scully</p>\n<pre><code class=\"language-bash\">npm run scully\n</code></pre>\n<p>所有的靜態頁面都會放在<code> ./dist/static</code> 資料夾裡</p>\n<hr>\n<h2 id=\"開始建立-blog\">開始建立 blog</h2>\n<p>官方參考文件：<a target='_blank' href=\"https://scully.io/docs/learn/create-a-blog/add-blog-support/\">https://scully.io/docs/learn/create-a-blog/add-blog-support/</a></p>\n<pre><code class=\"language-bash\">ng generate @scullyio/init:blog\n</code></pre>\n<p>產生出以下檔案\n<img src=\"assets/images/angular/scully_install/createBlog.jpg\" loading=\"lazy\" /></p>\n<p>建立入口點 (首頁)</p>\n<pre><code class=\"language-bash\">ng generate module home --route=home --module=app-routing\n</code></pre>\n<p>在這裡 可以先在 package.json 裡的 script 加上</p>\n<pre><code class=\"language-bash\">&quot;scully:update&quot;: &quot;ng build &amp;&amp; npm run scully -- --scanRoutes --showGuessError &amp;&amp; scully serve&quot;\n</code></pre>\n<img src=\"assets/images/angular/scully_install/updatePackage.jpg\"/>\n<p>註：可參考\n<a target='_blank' href=\"https://scully.io/docs/Reference/command-line-options/\">scully 各種執行命令</a></p>\n<p>在 cmd 裡執行</p>\n<pre><code class=\"language-bash\">npm run scully:update\n</code></pre>\n<p>簡易的 blog 即完成囉!!</p>\n<p>接下來就是開始撰寫各種 blog 的樣版啦!!</p>\n<hr>\n<h2 id=\"為程式程碼上色\">為程式程碼上色</h2>\n<p>Scully 內建了 <a target='_blank' href=\"https://prismjs.com/\">PrismJS</a></p>\n<p>官方參考文件：<a target='_blank' href=\"https://scully.io/docs/Reference/utilities/prism-js/\">https://scully.io/docs/Reference/utilities/prism-js/</a></p>\n<p>可以到 <a target='_blank' href=\"https://github.com/PrismJS/prism-themes\">https://github.com/PrismJS/prism-themes</a> 這裡找喜歡的顏色主題來使用</p>\n<p>將喜歡的<a target='_blank' href=\"https://github.com/PrismJS/prism-themes/tree/master/themes\">主題顏色</a>\ncss 貼到 blog.css 裡</p>\n<img src=\"assets/images/angular/scully_install/codeAddColor.jpg\"/>\n<hr>\n<h2 id=\"卡關點\">卡關點</h2>\n<p>來分享下我在學習 sully 時 花比較多時間理解的地方</p>\n<p>因為思考著是否將原本的 hexo 改用 scully 而原本的 hexo 網址前面沒有 blog 所以希望\n能在網址不要更動之下轉移</p>\n<p>在網址對應這部份</p>\n<p>例： scully.scully.config.ts</p>\n<pre><code class=\"language-ts\">export const config: ScullyConfig = {\n  projectRoot: './src',\n  projectName: 'scully',\n  outDir: './dist/static',\n  routes: {\n    '/blog/:slug': {\n      //靜態頁面所組出的完整路徑\n      type: RouteTypes.contentFolder,\n      slug: {\n        folder: './blog',\n      },\n    },\n  },\n};\n</code></pre>\n<p>app-routing.module.ts</p>\n<pre><code class=\"language-ts\">const routes: Routes = [\n  {\n    path: 'home',\n    pathMatch: 'full',\n    loadChildren: () =&gt; import('./home/home.module').then(m =&gt; m.HomeModule),\n  },\n  {\n    path: 'blog', //angular 設定的路徑\n    loadChildren: () =&gt; import('./blog/blog.module').then(m =&gt; m.BlogModule),\n  },\n];\n</code></pre>\n<p>scully.scully.config.ts 裡的 routes 路徑 必須與 app-routing.module.ts 裡的 path\n對應所產生的路徑才會正確，變數名稱也是一樣</p>\n"},{"directory":"css","layout":"CSS","slug":"css_border-radius","title":"css圓角概念","date":"2018/11/14","categories":["css"],"tags":["css","border-radius"],"summary":"單一值就是基本的圓角四邊的值都一樣border-radius: 30%;個別指定四個不同的角度border-radius: 30% 70% 20% 40%;以順時針方式 依續由 左上 右上 右下 左下","content":"<h2 id=\"單一值\">單一值</h2>\n<p>就是基本的圓角\n四邊的值都一樣</p>\n<pre><code class=\"language-css\">border-radius: 30%;\n</code></pre>\n<img src=\"assets/images/css_border-radius/001.jpg\"  width=100%  loading=\"lazy\" />\n<h2 id=\"個別指定四個不同的角度\">個別指定四個不同的角度</h2>\n<pre><code>border-radius: 30% 70% 20% 40%;\n</code></pre>\n<p>以順時針方式 依續由 <code>左上 右上 右下 左下</code> 設定各四個值\n如下圖所示\n<img src=\"assets/images/css_border-radius/002.jpg\"  width=100% /></p>\n<h2 id=\"有斜線與沒斜線的差異\">有斜線與沒斜線的差異</h2>\n<pre><code class=\"language-css\">border-radius: 4em 8em;\n</code></pre>\n<p>沒斜線\n4em 表示為 左上與右下\n8em 表示為 右上與左下</p>\n<pre><code class=\"language-css\">border-radius: 4em/8em;\n</code></pre>\n<p>CSS 值裡有斜線\n斜線前表示 x 軸\n斜線前表示 y 軸</p>\n<p>如下圖所示\n<img src=\"assets/images/css_border-radius/003.jpg\"  width=100% /></p>\n<h2 id=\"不規則圓角圖形\">不規則圓角圖形</h2>\n<pre><code class=\"language-css\">border-radius: 70% 30% 30% 70% / 60% 40% 60% 40%;\n</code></pre>\n<p>這個圓看起來有點奇怪\n但請記得 border-radius: 50%; 會得到一個圓\n因為定義的一邊值 加起來會等於 100%; 且沒有剩下的直線</p>\n<p>如下圖依續對照\n不同的值會各自產生不同的弧形</p>\n<img src=\"assets/images/css_border-radius/004.jpg\"  width=100% />\n<p>最後感謝這篇文章的教學，才得以讓我理解，本文也是參照這篇文章所撰寫而成\n<a target='_blank' href=\"https://www.webdesignerdepot.com/2018/10/css-border-radius-can-do-that/\">https://www.webdesignerdepot.com/2018/10/css-border-radius-can-do-that/</a></p>\n"},{"directory":"css","layout":"CSS","slug":"css_input_checkbox-switch","title":"如何利用純 css 寫 switch 開關","date":"2017/06/26","categories":["css"],"tags":["css","scss","components"],"summary":"概念利用 input checkbox 的 checked 特性來做到開關效果效果如下： -->HTML&lt;div data=&quot;checkbox-switch&quot;&gt;  &l","content":"<h2 id=\"概念\">概念</h2>\n<blockquote>\n<p>利用 input checkbox 的 checked 特性來做到開關效果</p>\n</blockquote>\n<p>效果如下：</p>\n<!-- <img src=\"iframe //codepen.io/mtw/embed/pwJxEw/ 100% 300\"  loading=\"lazy\" /> -->\n<iframe src=\"//codepen.io/mtw/embed/pwJxEw/\"></iframe>\n<h3 id=\"html\">HTML</h3>\n<pre><code class=\"language-html\">&lt;div data=&quot;checkbox-switch&quot;&gt;\n  &lt;input type=&quot;checkbox&quot; id=&quot;switch&quot; /&gt;\n  &lt;label for=&quot;switch&quot;&gt;&lt;/label&gt;\n&lt;/div&gt;\n</code></pre>\n<blockquote>\n<p>可用 html 裡的 data 來當作選取器 避免 classname 過多造成混亂\n注意!! input 裡的 id 跟 label for 裡的名字記得要一樣 不然不會動 RRRR\n一個 id 只能取單一個名稱 所以之後要避免取相同名字哦</p>\n</blockquote>\n<h3 id=\"scss\">SCSS</h3>\n<pre><code class=\"language-scss\">[data='checkbox-switch'] {\n  position: relative;\n  width: 60px;\n  height: 30px;\n  input[type='checkbox'] {\n    opacity: 0;\n    &amp; ~ label {\n      position: absolute;\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n      background: #ccc;\n      border-radius: 30px;\n      cursor: pointer;\n      transition: all 0.3s;\n      &amp;:after {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0px;\n        width: 26px;\n        height: 26px;\n        border-radius: 50%;\n        border: 2px solid #ccc;\n        background-color: #fff;\n        transition: all 0.3s;\n      }\n    }\n    &amp;:checked ~ label {\n      background: #005599;\n      &amp;:after {\n        left: 30px;\n        border-color: #005599;\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"做成組件客製化使用\">做成組件客製化使用</h3>\n<table>\n<thead>\n<tr>\n<th>變數</th>\n<th>名稱</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$w</td>\n<td>元件寬</td>\n</tr>\n<tr>\n<td>$h</td>\n<td>元件高</td>\n</tr>\n<tr>\n<td>$border_w</td>\n<td>元件鈕邊框寬</td>\n</tr>\n<tr>\n<td>$bg_default</td>\n<td>元件 off 顏色</td>\n</tr>\n<tr>\n<td>$bg_cover</td>\n<td>元件 on 顏色</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"scss-套用\">SCSS 套用</h3>\n<pre><code class=\"language-scss\">[data='checkbox-switch'] {\n  @include checkbox-switch(60px, 30px, 2px, #ccc, #159);\n}\n</code></pre>\n<h3 id=\"mixin\">mixin</h3>\n<pre><code class=\"language-scss\">@mixin checkbox-switch($w, $h, $border_w, $bg_default, $bg_cover) {\n  position: relative;\n  width: $w;\n  height: $h;\n  input[type='checkbox'] {\n    opacity: 0;\n    &amp; ~ label {\n      position: absolute;\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n      background: $bg_default;\n      border-radius: $h;\n      cursor: pointer;\n      transition: all 0.3s;\n      &amp;:after {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0px;\n        width: $h - $border_w * 2;\n        height: $h - $border_w * 2;\n        border-radius: 50%;\n        border: $border_w solid $bg_default;\n        background-color: #fff;\n        transition: all 0.3s;\n      }\n    }\n    &amp;:checked ~ label {\n      background: $bg_cover;\n      &amp;:after {\n        left: $w - $h;\n        border-color: $bg_cover;\n      }\n    }\n  }\n}\n</code></pre>\n"},{"directory":"css","layout":"CSS","slug":"css_input_checkbox","title":"input chexcbox","date":"2017/06/23","categories":["css"],"tags":["css","scss","input"],"summary":"概念利用 css before、after 的特性 去修改裡面的 input 樣式在 before 裡畫出一個 ✔使用矩形其中兩個長寬邊畫 border 線條再利用 css3 rotate 屬性 旋轉","content":"<h2 id=\"概念\">概念</h2>\n<blockquote>\n<p>利用 css before、after 的特性 去修改裡面的 input 樣式\n在 before 裡畫出一個 ✔\n使用矩形其中兩個長寬邊畫 border 線條\n再利用 css3 rotate 屬性 旋轉 45 度 讓長寬兩個邊看起來像 ✔\n再來 將其比例縮小到 scale 0 點下去後 再還原至原本大小 scale 1</p>\n</blockquote>\n<blockquote>\n<p>after 畫下面底框，蓋住原本 checkbox 的樣式</p>\n</blockquote>\n<blockquote>\n<p>完成！</p>\n</blockquote>\n<p>效果如下：</p>\n<!-- <img src=\"iframe //codepen.io/mtw/embed/xrpXKw/ 100% 300\"  loading=\"lazy\" /> -->\n<iframe src=\"//codepen.io/mtw/embed/xrpXKw/\"></iframe>\n<h3 id=\"html\">HTML</h3>\n<pre><code class=\"language-html\">&lt;div data=&quot;checkbox-check&quot;&gt;\n  &lt;input type=&quot;checkbox&quot; id=&quot;check&quot; /&gt;\n  &lt;label for=&quot;check&quot;&gt;ITEM&lt;/label&gt;\n&lt;/div&gt;\n</code></pre>\n<h3 id=\"scss\">SCSS</h3>\n<pre><code class=\"language-css\">[data='checkbox-check'] {\n  position: relative;\n  display: inline-block;\n  line-height: 24px;\n  input[type='checkbox'] {\n    &amp; ~ label {\n      &amp;:before {\n        content: '';\n        position: absolute;\n        z-index: 1;\n        top: 3px;\n        left: -3px;\n        width: 18px;\n        height: 10px;\n        border: 4px solid #191919;\n        border-top-style: none;\n        border-right-style: none;\n        vertical-align: top;\n        transition: transform 0.4s cubic-bezier(0.45, 1.8, 0.5, 0.75);\n        transform: rotate(-45deg) scale(0, 0);\n      }\n      &amp;:after {\n        vertical-align: top;\n        content: '';\n        position: absolute;\n        z-index: 0;\n        top: 0;\n        left: -6px;\n        border: 1px solid #808080;\n        width: 24px;\n        height: 24px;\n        background: #fff;\n        cursor: pointer;\n      }\n    }\n    &amp;:checked ~ label {\n      &amp;:before {\n        transform: rotate(-45deg) scale(1, 1);\n      }\n    }\n  }\n}\n</code></pre>\n"},{"directory":"css","layout":"CSS","slug":"css_input_text_focus","title":"簡易 input focus 效果","date":"2017/07/25","categories":["css"],"tags":["css","scss","input"],"summary":"概念input focus 的時後 去後 label 做變化效果如下： -->HTML&lt;div data=&quot;input-focus&quot;&gt;  &lt;input type=","content":"<h2 id=\"概念\">概念</h2>\n<blockquote>\n<p>input focus 的時後 去後 label 做變化</p>\n</blockquote>\n<p>效果如下：</p>\n<!-- <img src=\"iframe //codepen.io/mtw/embed/EvxdbW/ 100% 300\"  loading=\"lazy\" /> -->\n<iframe src=\"//codepen.io/mtw/embed/EvxdbW/\"></iframe>\n<h3 id=\"html\">HTML</h3>\n<pre><code class=\"language-html\">&lt;div data=&quot;input-focus&quot;&gt;\n  &lt;input type=&quot;text&quot; required /&gt;\n  &lt;label for=&quot;&quot;&gt;標題&lt;/label&gt;\n&lt;/div&gt;\n</code></pre>\n<blockquote>\n<p>記得 input 裡一定要加 required 不然標題會一直卡在上面\ncss 注意要加上 -webkit-appearance: none; 這行屬性 取消 ios 的預設樣式\n效果的話其實有蠻多方式可以呈現的，這時後看的就是創意跟動畫的表現了！</p>\n</blockquote>\n<h3 id=\"scss\">SCSS</h3>\n<pre><code class=\"language-css\">[data='input-focus'] {\n  position: relative;\n  input {\n    outline: none;\n    -webkit-appearance: none;\n    margin-top: 40px;\n    display: block;\n    width: 100%;\n    font-size: 18px;\n    border: 0;\n    border-bottom: 1px solid #ccc;\n    line-height: 40px;\n    &amp;:focus {\n      color: #191919;\n      border-bottom: 1px solid #0096ff;\n    }\n    &amp; ~ label {\n      position: absolute;\n      left: 0px;\n      top: 0;\n      pointer-events: none;\n      transition: all 0.3s;\n      line-height: 40px;\n      color: #808080;\n    }\n    &amp;:focus ~ label,\n    &amp;:valid ~ label {\n      top: -30px;\n      font-size: 12px;\n      color: #0096ff;\n    }\n  }\n}\n</code></pre>\n"},{"directory":"css","layout":"CSS","slug":"css_line_chart","title":"利用 js 搭配 css 繪製折線圖","date":"2019/05/12","categories":["css"],"tags":["chart","css","JavaScript"],"summary":"概念利用 畢氏定理 畫出兩點間的斜線算斜率有兩種函數 分別為 Math.atan() 與 Math.atan2()Math.atan()Math.atan() 接受一個參數，用法如下：//slope ","content":"<h2 id=\"概念\">概念</h2>\n<blockquote>\n<p>利用 <a target='_blank' href=\"https://zh.wikipedia.org/wiki/%E5%8B%BE%E8%82%A1%E5%AE%9A%E7%90%86\">畢氏定理</a> 畫出兩點間的斜線</p>\n</blockquote>\n<p>算斜率有兩種函數 分別為 <code>Math.atan()</code> 與 <code>Math.atan2()</code></p>\n<h3 id=\"math.atan()\">Math.atan()</h3>\n<p><code>Math.atan()</code> 接受一個參數，用法如下：</p>\n<pre><code class=\"language-js\">//slope 值計算為 y/x (斜率比值無法判斷 y、x 方向，如 -1/-1、1/-1 等情況 )\nangel = atan(slope);\n</code></pre>\n<p>angel 為一個角度的弧度值，<code>slope</code>是直線的斜率，是一個數字，這個數字可以是負的無窮大到正的無窮大之間的任何一個值(tan 的取值範圍)</p>\n<pre><code class=\"language-js\">tanθ=tan(θ+180)\n</code></pre>\n<p>不過，利用它進行計算比較複雜。因為它的周期性，一個數字的反正切值不止一個。\n例如 atan(-1)的值可能是 45 度，也可能是 225 度。\n這樣就是它的周期性，對於正切函數來說，它的周期是 180 度，所以兩個相差 180 度的角具有相同的正切和斜率:\n然而，Math.atan()只能返回一個角度值，因此確定它的角度非常的複雜，而且 90 度和 270 度的正切是無窮大，因為除數為零，我們也是比較難以處理的，因此我們更多的會採用第二個函數 Math.atan2()進行處理。</p>\n<h3 id=\"math.atan2()\">Math.atan2()</h3>\n<pre><code class=\"language-js\">// x = x坐標。 y = y坐標。\nangel = Math.atan2(y, x);\n</code></pre>\n<p>計算出來的結果 angel 是一個弧度值，也可以表示相對直角三角形對角的角，其中 x 是臨邊邊長，而 y 是對邊邊長。</p>\n<p>由此 我們就可以寫出以下的函式</p>\n<pre><code class=\"language-js\">// 算斜線弧度\ngatTanDeg = function(y,x) {\n  let result = Math.atan2(y,x) / (Math.PI / 180);\n  result = parseFloat(result);\n  return result;\n},\n</code></pre>\n<h3 id=\"math.hypot()\">Math.hypot()</h3>\n<p>再來就是把線畫出來\n利用 <code>Math.hypot</code> 算出兩點間的長度 <code>Math.hypot() 算出它的所有参数的平方和的平方根</code></p>\n<hr>\n<p>效果如下：</p>\n<!-- <img src=\"iframe //codepen.io/mtw/embed/bybRNE/ 100% 300\"  loading=\"lazy\" /> -->\n<iframe src=\"//codepen.io/mtw/embed/bybRNE/\"></iframe>\n<p>總之就是一直算數學啦 &gt;&lt;</p>\n"},{"directory":"css","layout":"CSS","slug":"rwd-fontSize","title":"rwd 自適應文字大小","date":"2018/11/27","categories":["rwd"],"tags":["css","scss","rwd"],"summary":"在寫 rwd 頁面縮放的時後，常常會遇到因為視窗做縮放 超出的文字會往下擠為了不破壞設計的美感，當然也希望文字能做縮放啊！那文字該如何做設定才能隨著視窗做縮放呢在這裡我選擇使用 rem 這個單位rem","content":"<p>在寫 rwd 頁面縮放的時後，常常會遇到因為視窗做縮放 超出的文字會往下擠\n為了不破壞設計的美感，當然也希望文字能做縮放啊！</p>\n<p>那文字該如何做設定才能隨著視窗做縮放呢</p>\n<p>在這裡我選擇使用 <code>rem</code> 這個單位</p>\n<ul>\n<li><code>rem</code> 的文字基準取決於最外層的 html 文字大小，很適合用在整體的尺寸大小切換，以 rem 頁面來說，可以依據不同的尺寸，統一切換整體網頁的文字大小。</li>\n</ul>\n<p>畢竟太新的單位 舊的瀏覽器不支援啊…(IE 你懂的</p>\n<p>大部份我們拿到設計稿的字型裡面都是使用 <code>px</code>\n為了減少切版計算時間\n以筆者的習慣來說 網頁字型預設大小是 <code>16px</code>;</p>\n<h2 id=\"px-to-rem\">px to rem</h2>\n<p>在 scss 裡 先寫一個 px to rem 的 function 來幫助換算</p>\n<pre><code class=\"language-css\">$base-font-size: 16px !default;\n@function rem($target, $context: $base-font-size){\n  @if $target == 0 { @return 0 }\n    @return ($target / $context) + 0rem;\n}\n</code></pre>\n<p>撰寫 css 時可以這樣寫\n<code>font-size: rem(32px)</code> 執行後就是 <code>font-size: 2rem</code></p>\n<h2 id=\"media-queries-設定\">media queries 設定</h2>\n<pre><code class=\"language-css\">$device-list: 320px 360px 400px 440px 480px 520px 560px 600px 640px;\n@each $current-device in $device-list{\n    @media screen and (min-width: $current-device) {\n    body, html {\n      font-size: $current-device * 0.025;\n    }\n  }\n}\n</code></pre>\n<p>筆者的習慣是 640px 以下的視窗寬 開始做字型的縮放\n每 40px 一個級距　大約在 <code>480px</code> 網頁字型的預設大小就是 <code>12px</code>\n在 chrome 瀏覽器裡 字型就不在做變化 chrome 最小字級 12px 的限制\n但因應各個瀏覽需求，所以還是會寫到 <code>320px</code>最小寬度</p>\n<p>當然設定值可以依自己的需求做更改</p>\n<p>以上 設定完成！</p>\n"},{"directory":"css","layout":"CSS","slug":"rwd-height","title":"rwd 自適應高度大小","date":"2017/06/29","categories":["rwd"],"tags":["css","rwd"],"summary":"常常在寫網頁的時後 我們會需要設到寬跟高但卻發生 為什麼寬能吃到 “%” 而高卻不能在 pc 版的頁面上設置就算了 因為都是固定大小但在這科技發展的時代裡 怎麼可能只有 pc 版的頁面呢!!?當然是要","content":"<p>常常在寫網頁的時後 我們會需要設到寬跟高<br>\n但卻發生 為什麼寬能吃到 “%” 而高卻不能<br>\n在 pc 版的頁面上設置就算了 因為都是固定大小</p>\n<p>但在這科技發展的時代裡 怎麼可能只有 pc 版的頁面呢!!?\n當然是要加上目前引領時尚潮流的 RWD 呀\n這樣拿出去才潮嘛！</p>\n<p>潮歸潮，在製作卻也常常出現一些無預期的問題\n比如 有些區塊需要做等比縮放，卻因高度不吃<code>%</code>這個單位的時後　　\n那要怎麼辦?</p>\n<img src=\"assets/images/wtf.jpg\" alt=\"黑人問號.JPG\" width=200  loading=\"lazy\" />\n<p>這時後!! 山不轉路轉!\n我們就需要利用 css 的 padding 屬性下去撐</p>\n<p>利用 <code>(寬/高)*100</code> 就能計算出 padding-bottom 所需要的百分比了</p>\n<p>然後　嘿嘿嘿!! 神奇的事情就發生啦!!<br>\n怎麼縮 怎麼放 都是等比例的啦<br>\n當然 還是有另外一種的處理方式 留到下次說啦～～</p>\n"},{"directory":"d3","layout":"D3","slug":"d3_bar_chart","title":"D3 長條圖繪製 ( Bar Chart )","date":"2020/04/13","categories":["D3"],"tags":["D3"],"summary":"這次我們來繪製的是橫條圖！先準備一筆簡單的資料data = [  {    label: '2011',    value: 45,  },  {    label: '2012',    value","content":"<p>這次我們來繪製的是橫條圖！</p>\n<h2 id=\"先準備一筆簡單的資料\">先準備一筆簡單的資料</h2>\n<pre><code class=\"language-js\">data = [\n  {\n    label: '2011',\n    value: 45,\n  },\n  {\n    label: '2012',\n    value: 47,\n  },\n  {\n    label: '2013',\n    value: 52,\n  },\n];\n</code></pre>\n<h2 id=\"建立一個-svg-畫布\">建立一個 svg 畫布</h2>\n<h3 id=\"html\">HTML</h3>\n<pre><code class=\"language-html\">&lt;div class=&quot;chart&quot;&gt;&lt;/div&gt;\n</code></pre>\n<h3 id=\"js\">JS</h3>\n<p>先建立一些基本變數</p>\n<pre><code class=\"language-js\">const width = 800;\nconst height = 600;\nconst margin = 60;\n</code></pre>\n<pre><code class=\"language-js\">let svg = d3\n  .select('.chart') //選取要塞入圖表的 tag\n  .append('svg') // 塞入一個 svg 的 dom\n  .attr('width', width) // 設定 svg 寬\n  .attr('height', height); // 設定 svg 高\n</code></pre>\n<hr>\n<h2 id=\"比例尺設定\">比例尺設定</h2>\n<pre><code class=\"language-js\">const min = d3.min(data, (d) =&gt; d.value); // 算出最小值\nconst max = d3.max(data, (d) =&gt; d.value); // 算出最大值\n\n// x 軸比例\nconst xScale = d3\n  .scaleLinear() // 做一個線性比例尺  v3 寫法 scale.linear()\n  .domain([min, max]) // 設data值的區間\n  .range([margin, width - margin]); //設定自定義區域的範圍\n\nconst xAxis = d3.axisBottom(xScale); // 定義坐標軸方向 v3寫法 d3.svg.axis().scale(xScale).orient(&quot;bottom&quot;);\n\n// y 軸比例\nconst yScale = d3\n  .scaleBand()\n  .domain(data.map((d) =&gt; d.label))\n  .range([height - margin, margin]) //反轉y軸 圖形從底部開始繪製\n  .paddingInner(0.2)\n  .paddingOuter(0.3)\n  .round(true);\n\nconst yAxis = d3.axisLeft(yScale);\n</code></pre>\n<pre><code class=\"language-js\">// 繪製坐標\nsvg\n  .append('g')\n  .attr('transform', `translate( 0, ${height - margin})`)\n  .attr('class', 'xaxis')\n  .call(xAxis);\n\nsvg\n  .append('g')\n  .attr('transform', `translate( ${margin}, 0)`)\n  .attr('class', 'yaxis')\n  .call(yAxis);\n</code></pre>\n<h2 id=\"繪製圖表\">繪製圖表</h2>\n<pre><code class=\"language-js\">svg\n  .selectAll('.bar') // 選取所有有 bar 名字的 dom\n  .data(data) // 把資料餵進去\n  .enter()\n  .append('rect')\n  .attr('class', 'bar')\n  .attr('fill', 'orange')\n  .attr('x', `${margin}`)\n  .attr('y', (d) =&gt; yScale(d.label))\n  .attr('width', (d) =&gt; xScale(d.value) - margin)\n  .attr('height', yScale.bandwidth());\n</code></pre>\n<p>效果如下：</p>\n<!-- <img src=\"iframe //codepen.io/mtw/embed/bGVdeym 100% 400\"  loading=\"lazy\" /> -->\n<iframe src=\"//codepen.io/mtw/embed/bGVdeym/\"></iframe>\n<hr>\n<h2 id=\"d3-概念：\">D3 概念：</h2>\n<p><a target='_blank' href=\"http://localhost:4000/d3/d3_databind/\">D3 資料綁定與更新</a>\n<a target='_blank' href=\"http://localhost:4000/d3/d3_scaleBand/\">D3 序數比例尺 scaleBand</a></p>\n"},{"directory":"d3","layout":"D3","slug":"d3_databind","title":"D3 資料綁定與更新","date":"2019/10/28","categories":["D3"],"tags":["D3"],"summary":"玩 d3 一定要了解的 d3 的資料綁定機制不然要怎麼讓畫面跑出來呢 XDDDdata 與 datum 差別當我有一組的資料 想讓圖表依續產生時 就會用到 data 或 datum 將資料傳入 以便後","content":"<p>玩 d3 一定要了解的 d3 的資料綁定機制不然要怎麼讓畫面跑出來呢 XDDD</p>\n<h2 id=\"data-與-datum-差別\">data 與 datum 差別</h2>\n<p>當我有一組的資料 想讓圖表依續產生時 就會用到 data 或 datum 將資料傳入 以便後續圖\n表繪製動作</p>\n<ul>\n<li>data 綁定一組資料</li>\n<li>datum 綁定單一筆資料</li>\n</ul>\n<p>先看圖會先較清楚些 <img src=\"assets/images/d3/databind/bind.png\"  loading=\"lazy\" /></p>\n<p>準備一組資料</p>\n<pre><code class=\"language-js\">const data = [1, 2, 3];\n</code></pre>\n<h3 id=\"data-傳入資料\">data 傳入資料</h3>\n<pre><code class=\"language-js\">el.selectAll('p').data(data);\n\n// data綁定進去後 console 出來的會是\n//   1\n// ---\n//   2\n// ---\n//   3\n// 筆數依續出來\n</code></pre>\n<h3 id=\"datum-傳入資料\">datum 傳入資料</h3>\n<pre><code class=\"language-js\">el.selectAll('p').datum(data);\n\n// data綁定進去後 console 出來的會是\n// [1,2,3]\n// ---\n// [1,2,3]\n// ---\n// [1,2,3]\n// 一組一組的出來\n</code></pre>\n<!-- https://github.com/SevenChan07/pensieve/issues/21 -->\n<hr>\n<p>資料綁定機制後 再來就是資料繪製與更新的部份了</p>\n<h2 id=\"enter-update-exit\">enter update exit</h2>\n<pre><code class=\"language-js\">// 選取 D3 繪製區域\nconst el = d3.select('.chart');\n\n// 綁定資料到 p 的 DOM 裡\nconst view = el.selectAll('p').data(data);\n</code></pre>\n<h3 id=\"update()---只有-dom-對應的資料\">update() - 只有 DOM 對應的資料</h3>\n<p>根據當下的已有的 DOM(元素) 做資料更新</p>\n<hr>\n<h3 id=\"enter()---沒有-dom-對應的資料\">enter() - 沒有 DOM 對應的資料</h3>\n<p>當 DOM(元素) 只有 5 個時而進來的 data(資料)有 8 筆時此時 enter 就會建立不足的\ndom 讓資料綁定</p>\n<p>如下圖： <img src=\"assets/images/d3/databind/001.png\" /></p>\n<hr>\n<h3 id=\"exit()-移除---沒有資料對應的-dom\">exit() 移除 - 沒有資料對應的 DOM</h3>\n<p>資料更新完後 若 資料筆數少於現有的 DOM 數 則會移除綁定</p>\n<p>如下圖： <img src=\"assets/images/d3/databind/002.png\" /></p>\n<p>寫法如下</p>\n<pre><code class=\"language-js\">const el = d3.select('.chart');\nconst view = el.selectAll('p').data(data);\n\nview\n  .enter()\n  .append('p')\n  .html((d, i) =&gt; 'enter_' + data[i]);\n\nview.html((d, i) =&gt; 'update_' + data[i]);\n\nview.exit().html('NO Data').remove(); // 移除多餘的 dom\n</code></pre>\n<hr>\n<h2 id=\"更優雅的寫法\">更優雅的寫法</h2>\n<h3 id=\"merge()-合併\">merge() 合併</h3>\n<p>D3 v4 後新增的功能主要是同時處理 enter 與 update 目的是是在於圖型繪製的時後 可以\n少寫許多重覆圖形繪製的 code</p>\n<img src=\"assets/images/d3/databind/003.png\" />\n<p>可以看圖中 原本在 enter 時 只會塞入沒有元素對應的資料但加上 merge 後 連原本需要\nupdate 的資料也一起處理了</p>\n<pre><code class=\"language-js\">view\n  .enter()\n  .merge(view)\n  .append('p')\n  .html((d, i) =&gt; 'enter_' + data[i]);\n\nview.exit().html('NO Data').remove(); // 移除多餘的 dom\n</code></pre>\n<hr>\n<h3 id=\"join()\">join()</h3>\n<p>join 是 D3 V5.8.0 版本的新方法它整合了 enter update 跟 exit 讓我們減少了寫了很多\n重覆的 code 也更容易理解了</p>\n<p>簡易寫法如下</p>\n<pre><code class=\"language-js\">view.join('p').html((d, i) =&gt; 'join_' + data[i]);\n</code></pre>\n<p>一行 join 同時處理了 enter 、update 與 exit 若是要各別處理每個進入點所要做的事可\n以使用 function 方式處理</p>\n<pre><code class=\"language-js\">view\n  .join(\n    enter =&gt; {\n      return enter.append('p');\n    },\n    update =&gt; update,\n    exit =&gt; {\n      return exit.html((d, i) =&gt; 'NO Data');\n    }\n  )\n  .html((d, i) =&gt; 'join_' + data[i]);\n</code></pre>\n<p>參考資料\n<a target='_blank' href=\"https://github.com/d3/d3/releases/tag/v5.8.0\">https://github.com/d3/d3/releases/tag/v5.8.0</a>\n<a target='_blank' href=\"https://github.com/d3/d3-selection/blob/master/README.md#selection_join\">https://github.com/d3/d3-selection/blob/master/README.md#selection_join</a>\n<a target='_blank' href=\"https://www.createwithdata.com/d3-has-just-got-easier/\">D3.js has just got easier!</a></p>\n<hr>\n<p>附上 codepen 試著玩玩 可以更了解 D3 資料綁定的機制</p>\n<!-- <img src=\"iframe https://codepen.io/mtw/embed/YzKgjKg 100% 500\" /> -->\n<iframe src=\"//codepen.io/mtw/embed/YzKgjKg/\"></iframe>\n"},{"directory":"d3","layout":"D3","slug":"d3_range","title":"D3 Range 解析","date":"2020/06/07","categories":["D3"],"tags":["D3"],"summary":"d3 range 屬於 d3-array 的一部份源始碼如下export default function (start, stop, step) {  (start = +start),    (s","content":"<p>d3 range 屬於 d3-array 的一部份</p>\n<p><a target='_blank' href=\"https://github.com/d3/d3-array/blob/master/src/range.js\">源始碼如下</a></p>\n<pre><code class=\"language-js\">export default function (start, stop, step) {\n  (start = +start),\n    (stop = +stop),\n    (step = (n = arguments.length) &lt; 2 ? ((stop = start), (start = 0), 1) : n &lt; 3 ? 1 : +step);\n\n  var i = -1,\n    n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n    range = new Array(n);\n\n  while (++i &lt; n) {\n    range[i] = start + i * step;\n  }\n  return range;\n}\n</code></pre>\n<hr>\n<h2 id=\"解析\">解析</h2>\n<h3 id=\"型別轉換\">型別轉換</h3>\n<pre><code class=\"language-js\">(start = +start),\n(stop = +stop),\n</code></pre>\n<p>拆解後如下</p>\n<pre><code class=\"language-js\">start = Number(start);\nstop = Number(stop);\n</code></pre>\n<p>因為要做計算所以\n將傳進來的值強制轉為數字型別</p>\n<p>可參考 <a target='_blank' href=\"https://ithelp.ithome.com.tw/articles/10201512\">你懂 JavaScript 嗎？#8 強制轉型（Coercion）</a></p>\n<h3 id=\"三元運算子\">三元運算子</h3>\n<pre><code class=\"language-js\">step = (n = arguments.length) &lt; 2 ? ((stop = start), (start = 0), 1) : n &lt; 3 ? 1 : +step;\n</code></pre>\n<p>拆解後如下</p>\n<pre><code class=\"language-js\">if ((n = arguments.length) &lt; 2) {\n  // 如果傳進來的參數只有一個值\n  stop = start;\n  start = 0;\n  step = 1;\n} else {\n  if (n &lt; 3) {\n    step = 1;\n  } else {\n    step = +step;\n    // step = Number(step);\n  }\n}\n</code></pre>\n<ul>\n<li>arguments</li>\n</ul>\n<p>關於 arguments 可參考下列文章</p>\n<p><a target='_blank' href=\"https://pjchender.blogspot.com/2016/04/javascriptparameterargumentsspread.html\">[筆記] 談談 JavaScript 中函式的參數(parameter),arguments 和展開運算子(spread)</a></p>\n<ul>\n<li>三元(條件)運算子</li>\n</ul>\n<p><code>條件 ? 條件符合 (true) : 條件為否 (false)</code></p>\n<p><a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">MDN: 條件運算子</a></p>\n<h3 id=\"迴圈\">迴圈</h3>\n<p>d3 這裡使用 while 迴圈</p>\n<pre><code class=\"language-js\">var i = -1,\n  n = Math.max(0, Math.ceil((stop - start) / step)) | 0, //算出要跑幾次迴圈\n  range = new Array(n); // 再賦予 n 個空陣列\n\nwhile (++i &lt; n) {\n  range[i] = start + i * step;\n}\n</code></pre>\n<p>來說說 <code>++i</code> 與 <code>i++</code> 的差別</p>\n<blockquote>\n<p>++i</p>\n</blockquote>\n<p>迴圈執行前 先 +1\n如同上面 一開始宣告 i = -1;\n所以在執行迴圈時 i 會先+1 然後再去跑迴圈\n所以這個 while 會從 0 開始跑</p>\n<blockquote>\n<p>i++ 後執行</p>\n</blockquote>\n<p>迴圈執從後 才 +1\n如用上述 這麼寫的話 會先從 -1 開始跑</p>\n<blockquote>\n<p><code>for</code> 與 <code>while</code> 的差別</p>\n</blockquote>\n<p><a target='_blank' href=\"https://ithelp.ithome.com.tw/articles/10191453\">重新認識 JavaScript: Day 09 流程判斷與迴圈</a>\n在這 kuro 大大的這篇文章最後面裡有提到 這兩者的差異性 這裡就不多說了 XD</p>\n<hr>\n<h2 id=\"使用函數\">使用函數</h2>\n<blockquote>\n<p>帶入起始值 與 結束點，從起始值開始，每個階段的累加值</p>\n</blockquote>\n<pre><code class=\"language-js\">d3.range(3, 70, 8);\n// [ 3, 11, 19, 27, 35, 43, 51, 59, 67 ]\n</code></pre>\n<blockquote>\n<p>如果沒有給它累加的值，則每次就只會累加 1</p>\n</blockquote>\n<pre><code class=\"language-js\">d3.range(3, 10);\n// [3, 4, 5, 6, 7, 8, 9]\n</code></pre>\n<blockquote>\n<p>如果只傳進來一個值</p>\n</blockquote>\n<pre><code class=\"language-js\">d3.range(5);\n// [0, 1, 2, 3, 4]\n</code></pre>\n<hr>\n<h2 id=\"typescript\">TypeScript</h2>\n<p>改寫出了兩種寫法，出來的值都會是一樣的，但實際上的差別在哪 老實說 我也不是很清楚，這部份若是我有答案後，會再補充上來</p>\n<pre><code class=\"language-js\">range(start: number, stop: number = start, step: number = 1) {\n  if( arguments.length &lt; 2 ){\n    start = 0;\n  }\n  const n = Math.max(0, Math.ceil((stop - start) / step));\n  const range = new Array(n);\n  for (let i = 0; i &lt; n; i++) {\n    range[i] = (start + i * step)\n  }\n  return range;\n}\n</code></pre>\n<pre><code class=\"language-js\">range(start: number, stop: number = start, step: number = 1, arr: Array&lt;number&gt; = [start]) {\n  if (arguments.length &lt; 2) {\n    start = 0;\n    arr = [0];\n  }\n  if (start + step &gt;= stop) {\n    return arr;\n  } else {\n    start = start + step;\n    arr = [...arr, start]\n    return this.range(start, stop, step, arr);\n  }\n}\n</code></pre>\n<p>因為工作需求，所以要用到 d3 這個 function 來轉換資料，但又不是使用在 d3 的繪製圖表裡，直接引用 d3 一大包也不太恰當，又因是使用 ts 撰寫，直接把 range.js 摳過來用 在 tslint 會報錯 所以就稍為改寫了一下 也做個記錄</p>\n"},{"directory":"d3","layout":"D3","slug":"d3_scaleBand","title":"D3 序數比例尺 scaleBand","date":"2019/09/30","categories":["D3"],"tags":["D3"],"summary":"D3 的坐標不是只有數字，有時後也會用到除了數字以外的非連續性坐標這時後就有了scaleBand 序數比例尺在這部份 v3 跟 v4 的版本寫了 有蠻大的落差而我是從 v5 才開始真正的接觸到 d3 ","content":"<p>D3 的坐標不是只有數字，有時後也會用到除了數字以外的非連續性坐標這時後就有了\nscaleBand 序數比例尺在這部份 v3 跟 v4 的版本寫了 有蠻大的落差而我是從 v5 才開始\n真正的接觸到 d3 所以還是有小小踩到了一下 v3 轉 v5 時寫法差異的雷</p>\n<hr>\n<p>在 scaleBand 裡有了這些控制圖表寬度的 api 直接看圖 來了解他的 api 分佈與用法</p>\n<img src=\"assets/images/d3/scaleBand/001.png\"  loading=\"lazy\" />\n<hr>\n<p>再來看看 v3 跟 v4 版本寫法的差異 ( 因為沒寫過 v3 版本 若有錯誤再請指正)</p>\n<ul>\n<li>v4 <code>.scaleBand</code> 取代了 v3 <code>.scale.ordinal</code></li>\n<li>v4 <code>padding</code>, <code>paddingInner</code> 和 <code>paddingOuter</code> 取代 v3 <code>ordinal.rangeBands</code></li>\n<li>v4 <code>bandwidth</code> 和 <code>step</code> 取代 v3 <code>ordinal.rangeBand</code>。</li>\n</ul>\n<hr>\n<p>寫法大致如下</p>\n<pre><code class=\"language-js\">// x軸坐標比例\nxScale = d3\n  .scaleBand()\n  .domain(data.map(d =&gt; d.month))\n  .range([margin, this.width - margin])\n  .paddingInner(0.2)\n  .paddingOuter(0.5)\n  .align(0.5)\n  .round(true);\n\nbar\n  .append('rect')\n  .attr('x', d =&gt; this.xScale(d.month))\n  .attr('width', this.xScale.bandwidth());\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>參數</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>padding</td>\n<td>paddingInner 與 paddingOuter 兩個相加的值</td>\n</tr>\n<tr>\n<td>paddingInner</td>\n<td>表示內部兩個分段之間的間隔比例，預設值 0</td>\n</tr>\n<tr>\n<td>paddingOuter</td>\n<td>表示第一個分段與最後一個分段之後的間隔比別，預設值 0</td>\n</tr>\n<tr>\n<td><em>align</em> (v4 新增功能 )</td>\n<td>可以用來控制對齊方式 置左 0, 置中 0.5, 置右 1</td>\n</tr>\n<tr>\n<td>round</td>\n<td>表示啟用或關閉 取整數操作，這個在輸出域為連續值的情況下都會有</td>\n</tr>\n</tbody>\n</table>\n<p>當然 這幾個參數不是必需的，沒有定義也可以而這一系列的參數，回傳的是一個比例尺函\n數</p>\n<p>這時後只要執行該比例尺函數，傳入某個離散數據，便可以回傳值域中對應具體的值</p>\n<p>這比例尺函數上還有兩個比較重要的方法，分別是 <code>bandwidth</code> 與 <code>step</code></p>\n<p><code>bandwidth</code> 每個分段的寬度 <code>step</code> 相鄰兩個分段之前的距離可參照一開始上面的圖 比\n較易懂</p>\n<hr>\n<p>參考資料：\n<a target='_blank' href=\"https://github.com/d3/d3-scale#band-scales\">https://github.com/d3/d3-scale#band-scales</a>\n<a target='_blank' href=\"https://github.com/tianxuzhang/d3.v4-API-Translation#%E5%BA%8F%E6%95%B0%E6%AF%94%E4%BE%8B%E5%B0%BA\">D3.js 4.x API 中文手册 序数比例尺</a>\n<a target='_blank' href=\"https://observablehq.com/@d3/d3-scaleband\">d3.scaleBand</a>\n<a target='_blank' href=\"https://github.com/d3/d3/wiki/%E5%BA%8F%E6%95%B0%E6%AF%94%E4%BE%8B%E5%B0%BA\">https://github.com/d3/d3/wiki/%E5%BA%8F%E6%95%B0%E6%AF%94%E4%BE%8B%E5%B0%BA</a></p>\n"},{"directory":"d3","layout":"D3","slug":"d3_v3tov5","title":"D3 v5 與 v3 差異","date":"2019/10/05","categories":["D3"],"tags":["D3"],"summary":"最近因為專案需求 需要用到 D3 來畫圖表而公司用的是 v5 版本 (v4 以上的版本已不相容以下版本)剛開始初入 D3 的我 像個無頭蒼蠅般 先隨意的找了網路上的範例來練習寫了幾行 code 後 發","content":"<p>最近因為專案需求 需要用到 D3 來畫圖表\n而公司用的是 v5 版本 (v4 以上的版本已不相容以下版本)</p>\n<p>剛開始初入 D3 的我 像個無頭蒼蠅般 先隨意的找了網路上的範例來練習\n寫了幾行 code 後 發現怎麼不能 run!!!</p>\n<p>爬了下文 才知道 D3 在 v4 版本之後 寫法有些許的改變\n而我所找到的教學 與 範例 幾乎都是 v3 版本的寫法</p>\n<p>然而 v4 以上版本 的範例 與 介紹 幾乎是少之又少\n這就不禁讓我懷疑，到底是我關鍵字下錯 還是在業界上真的很少人使用 v5 版本\n能找到的資源都是外國人寫的 (菜英文如我 還是會很想看到中文 RRRR)\n亦或是 官方文件寫的太清楚 所以只要看官方文件就夠了\n一連串的問號產生??? (是說也沒有很重要 XDD</p>\n<p>那…咱們就開始吧！</p>\n<hr>\n<h2 id=\"dom-加上屬性-物件表示法-改-聲明式(串燒)寫法\">dom 加上屬性 物件表示法 改 聲明式(串燒)寫法</h2>\n<p>v3</p>\n<pre><code class=\"language-js\">let svg = d5\n  .select('.chart')\n  .append('svg')\n  .attr({\n    width: 800,\n    height: 600,\n  })\n  .style({\n    border: '1px solid #159',\n    background: '#f5f5f5',\n  });\n</code></pre>\n<p>v5</p>\n<pre><code class=\"language-js\">let svg = d5\n  .select('.chart')\n  .append('svg')\n  .attr('width', 800)\n  .attr('height', 600)\n  .style('border', '1px solid #159')\n  .style('background', '#f5f5f5');\n</code></pre>\n<hr>\n<h2 id=\"api-命名規則\">API 命名規則</h2>\n<p>v3</p>\n<pre><code class=\"language-js\">d3.scale.linear();\n</code></pre>\n<p>v5</p>\n<pre><code class=\"language-js\">d3.scaleLinear();\n</code></pre>\n<p>其他更詳細可參考 <a target='_blank' href=\"https://github.com/xswei/d3js_doc/blob/master/API_Reference/CHANGES.md#random-numbersd3-random\">https://github.com/xswei/d3js_doc/blob/master/API_Reference/CHANGES.md#random-numbersd3-random</a></p>\n<hr>\n<h2 id=\"用法不同\">用法不同</h2>\n<h3 id=\"比例尺繪製\">比例尺繪製</h3>\n<pre><code class=\"language-js\">let min = d3.min(data, (d) =&gt; d.value); // 算出最小值\nlet max = d3.max(data, (d) =&gt; d.value); // 算出最大值\n</code></pre>\n<p>v3</p>\n<pre><code class=\"language-js\">let xScale = d3.scale.linear().domain([0, max]).range([0, width]);\n\nlet xAxis = d3.svg.axis().scale(xScale).orient('bottom');\n</code></pre>\n<p>v5</p>\n<pre><code class=\"language-js\">let xScale = d3.scaleLinear().domain([0, max]).range([0, width]);\n\nlet xAxis = d3.axisBottom(xScale);\n</code></pre>\n<h3 id=\"顏色表示\">顏色表示</h3>\n<p>v3</p>\n<pre><code class=\"language-js\">let color = d3.scale.category10();\n\nsvg.selectAll('.bar')\n  .attr({\n    fill: (d, i) =&gt; color(i),\n  });\n</code></pre>\n<p>v5</p>\n<pre><code class=\"language-js\">var color = d3.scaleOrdinal(d3.schemeCategory10);\n\nsvg.selectAll('.bar')\n  .attr('fill': (d,i) =&gt; color(i))\n</code></pre>\n<hr>\n<h3 id=\"遠端資料載入\">遠端資料載入</h3>\n<p>v3\nv4 還是一樣寫法</p>\n<pre><code class=\"language-js\">d3.csv('file.csv', function (err, res) {\n  if (err) throw err;\n  console.log(res);\n});\n</code></pre>\n<p>v5</p>\n<pre><code class=\"language-js\">d3.csv('file.csv').then(function (res) {\n  console.log(res);\n});\n</code></pre>\n<hr>\n<p>以上 是目前在繪製過程中所遇到的情況，我想還應該還有更多我沒遇到的 XDD</p>\n<p>參考資料：\n<a target='_blank' href=\"https://github.com/xswei/d3js_doc/blob/master/API_Reference/CHANGES.md\">4.x.x 发生了哪些改变</a>\n<a target='_blank' href=\"http://blog.infographics.tw/2016/02/d3-js-4-0-preview/\">D3.js 重大更新！ 4.0 版新鮮功能摘要整理</a>\n<a target='_blank' href=\"https://d3js.org.cn/introduce/\">D3: Data-Driven Documents</a></p>\n"},{"directory":"docker","layout":"docker","slug":"docker_win_install","title":"在 windows 環境下安裝 docker","date":"2022/07/24","categories":["Docker"],"tags":["Docker","life"],"summary":"記錄一下安裝 docker 時所遇到的問題因為工作上的一些問題 需要在電腦上安裝 docker 測試，裝了後一直噴錯打不開確認虛擬機已開啟再 cmd 上執行 docker ps 則是一直報錯打開 Do","content":"<p>記錄一下安裝 docker 時所遇到的問題</p>\n<p>因為工作上的一些問題 需要在電腦上安裝 docker 測試，裝了後一直噴錯打不開</p>\n<h2 id=\"確認虛擬機已開啟\">確認虛擬機已開啟</h2>\n<img src=\"assets/images/docker/docker_win_install/003.jpg\"  loading=\"lazy\" />\n<p>再 cmd 上執行 <code>docker ps</code> 則是一直報錯\n<img src=\"assets/images/docker/docker_win_install/002.jpg\" /></p>\n<p>打開 <code>Docker Desktop</code> 就會一直出現這畫面，按下 quit 後，接著就關掉了\n<img src=\"assets/images/docker/docker_win_install/001.jpg\" /></p>\n<hr>\n<h2 id=\"求救\">求救</h2>\n<p>後來才知道還要到 bios 裡做設定， 需要在 cpu 裡開啟虛擬機的功能才可以\n<img src=\"assets/images/docker/docker_win_install/004.jpg\" /></p>\n<p>接著重開機，打開工作管理員確認\n<img src=\"assets/images/docker/docker_win_install/005.jpg\" /></p>\n<p>再次執行 <code>Docker Desktop</code> 出現新的警示了!!!，原來是 Linux 版本太舊，需要更新\n<img src=\"assets/images/docker/docker_win_install/006.jpg\" /></p>\n<p>更新中…\n<img src=\"assets/images/docker/docker_win_install/007.jpg\" /></p>\n<p>更新到一半，海棉大大說 在安裝時，不要選擇 wsl2 就可以執行 docker 了，所以再次重新安裝\n<img src=\"assets/images/docker/docker_win_install/008.jpg\" /></p>\n<p>成功!!! 灑花!!!\n<img src=\"assets/images/docker/docker_win_install/009.jpg\" /></p>\n<hr>\n<p>感謝 雷 N、海棉、Gson 等大大們的幫忙 才能順利安裝 docker 並執行</p>\n<p>參考資料：\n<a target='_blank' href=\"https://www.dotblogs.com.tw/yc421206/2021/08/15/install_wsl2_and_docker_in_windows_10\">在 Windows 10 安裝 WSL2 + Docker</a></p>\n"},{"directory":"gulp","layout":"gulp","slug":"gulp","title":"Gulp4 與 gulp-cli","date":"2019/01/24","categories":["Gulp"],"tags":["Gulp","node"],"summary":"npm 套件安裝指令縮寫npm installnpm inpm install --savenpm i -Snpm install --save-devnpm i -D–save 將此文件 安裝到本地","content":"<h1 id=\"npm-套件安裝\">npm 套件安裝</h1>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>縮寫</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>npm install</td>\n<td>npm i</td>\n</tr>\n<tr>\n<td>npm install --save</td>\n<td>npm i -S</td>\n</tr>\n<tr>\n<td>npm install --save-dev</td>\n<td>npm i -D</td>\n</tr>\n</tbody>\n</table>\n<p>–save 將此文件 安裝到本地資料夾 -dev 將安裝的 gulp 訊息存在 package.json 裡</p>\n<p>若要安裝特定版本 <code>npm i -D gulp@4.0.2</code></p>\n<hr>\n<p>gulp 與之前版本的差異 3 到 4 的轉換這次多了 gulp-cli 需在全域裡加裝</p>\n<h2 id=\"gulp4-有什麼新東西\">gulp4 有什麼新東西</h2>\n<p>提供了兩種新的 流程控制方法 <code>series()</code> 與 <code>parallel()</code> 取消了 task 的用法</p>\n<h2 id=\"無痛升級-gulp4\">無痛升級 gulp4</h2>\n<p>先在 cmd 裡查看 node 版本(支援 node8.11.1 以上)\n<img src=\"assets/images/gulp/node-v.jpg\"  loading=\"lazy\" /> npm 版本(支援 5.6.0 以上)\n<img src=\"assets/images/gulp/node-v.jpg\" /></p>\n<p>確認 gulp 跟 npm 版本後 再來就是安裝 gulp-cli</p>\n<pre><code>npm install --global gulp-cli\n或\nnpm i gulp-cli -g\n</code></pre>\n<p>安裝完後 確認版本 <img src=\"assets/images/gulp/gulpcli-v.jpg\" /> 出現版本資訊 表\n示<code>gulp-cli</code>安裝成功</p>\n<hr>\n<h2 id=\"寫法差異\">寫法差異</h2>\n<p>將 task 移除</p>\n<p>過去版本寫法</p>\n<pre><code class=\"language-js\">gulp.task('css', function () {\n  // doSomething\n});\ngulp.task('js', function () {\n  // doSomething\n});\ngulp.task('default', ['css', 'js']);\n</code></pre>\n<p>4.0 改為</p>\n<pre><code class=\"language-js\">function css() {\n  // doSomething\n}\nfunction js() {\n  // doSomething\n}\nvar build = gulp.series(css, js);\nexports.default = build;\n</code></pre>\n<p>bulid 新增 使用 <code>lastRun()</code></p>\n<hr>\n<h2 id=\"執行方式\">執行方式</h2>\n<p>新增<code>series()</code> 與 <code>parallel()</code></p>\n<pre><code class=\"language-js\">const { series } = require('gulp');\n\nfunction clean(cb) {\n  // body omitted\n  cb();\n}\n\nfunction build(cb) {\n  // body omitted\n  cb();\n}\nfunction watch(cb) {\n  // body omitted\n  cb();\n}\n\n//單一執行\nexports.build = build;\n\n//逐行執行\nexports.default = series(clean, build, watch);\n\n//組合執行 (深度執行)(同步執行)\nexports.default = series(clean, parallel(build, watch));\n</code></pre>\n<hr>\n<h2 id=\"排除\">排除</h2>\n<h3 id=\"資料夾排除\">資料夾排除</h3>\n<pre><code class=\"language-js\">['dist/**', '!dist/noDel', '!dist/noDel/**'];\n</code></pre>\n<p>除了 noDel 外的資料夾，其他通通都會吃到設定！</p>\n<h3 id=\"檔案排除\">檔案排除</h3>\n<pre><code class=\"language-js\">('src/**/!(_)*.html');\n</code></pre>\n<p>除了 檔案前綴有 _ 外 也都會吃到設定！</p>\n<hr>\n<p>以上介紹 有錯歡迎指正</p>\n<h3 id=\"參考文件\">參考文件</h3>\n<ul>\n<li><a target='_blank' href=\"https://www.gulpjs.com.cn/\">https://www.gulpjs.com.cn/</a></li>\n<li><a target='_blank' href=\"https://www.pixemweb.com/blog/gulp-4-0-0-with-nodejs-imagemin-browsersync-sass-sourcemaps-cleancss-more/\">https://www.pixemweb.com/blog/gulp-4-0-0-with-nodejs-imagemin-browsersync-sass-sourcemaps-cleancss-more/</a></li>\n</ul>\n"},{"directory":"gulp","layout":"gulp","slug":"gulp_gulp-file-include","title":"Gulp：gulp-file-include","date":"2017/06/26","update":"2020/05/24","categories":["Gulp"],"tags":["Gulp","node","JavaScript"],"summary":"將共用的 html 抽出來 變成共用檔於 20200523 更新 拿掉舊有寫法與更新一些個人設定常常在編輯 html 時 會遇到許多共同地方 如 header footer當時想著 如果能跟後端一樣 ","content":"<blockquote>\n<p>將共用的 html 抽出來 變成共用檔</p>\n</blockquote>\n<p><em>於 20200523 更新 拿掉舊有寫法與更新一些個人設定</em></p>\n<p>常常在編輯 html 時 會遇到許多共同地方 如 header footer\n當時想著 如果能跟後端一樣 將共用的地方取出來 需要時 再 inclde 裡去時 那該有多好</p>\n<h3 id=\"官方提供設定-code\">官方提供設定 code</h3>\n<pre><code class=\"language-javascript\">const gulp = require('gulp');\nconst fileinclude = require('gulp-file-include');\n\ngulp.task('fileinclude', function () {\n  gulp\n    .src(['index.html'])\n    .pipe(\n      fileinclude({\n        prefix: '@@',\n        basepath: '@file',\n      })\n    )\n    .pipe(gulp.dest('./'));\n});\n</code></pre>\n<h3 id=\"個人修改調整後\">個人修改調整後</h3>\n<pre><code class=\"language-js\">const gulp = require('gulp');\nconst fileinclude = require('gulp-file-include');\n\nfunction html() {\n  return src('src/**/!(_)*.html')\n    .pipe(plumber())\n    .pipe(\n      fileinclude({\n        prefix: '@@', //設定html include 前綴\n      })\n    )\n    .pipe(dest('./dist'));\n}\n</code></pre>\n<h4 id=\"html-使用\">html 使用</h4>\n<pre><code class=\"language-html\">@@include('include/footer.pug')\n</code></pre>\n<h4 id=\"注意事項：\">注意事項：</h4>\n<p>共用的 html 檔 通常我們是不需要將它編譯出來的 所以所以在開發時，\n在 html 的檔名前 加上 <code>_</code> 前綴，在輸出時就會排除該檔</p>\n<hr>\n<h3 id=\"參考文件\">參考文件</h3>\n<p><a target='_blank' href=\"https://www.npmjs.com/package/gulp-file-include\">https://www.npmjs.com/package/gulp-file-include</a></p>\n"},{"directory":"gulp","layout":"gulp","slug":"gulp_gulp-iconfont","title":"Gulp：gulp-iconfont ( 將 svg 轉 iconfont 字型 )","date":"2020/05/29","categories":["Gulp"],"tags":["Gulp","node","JavaScript"],"summary":"將 svg 轉 iconfont 字型GULP 設定const iconfont = require('gulp-iconfont');const consolidate = require('gul","content":"<blockquote>\n<p>將 svg 轉 iconfont 字型</p>\n</blockquote>\n<h3 id=\"gulp-設定\">GULP 設定</h3>\n<pre><code class=\"language-js\">const iconfont = require('gulp-iconfont');\nconst consolidate = require('gulp-consolidate');\n\nfunction font() {\n  const fontName = 'fonts';\n  return src('src/svg/*.svg')\n    .pipe(\n      iconfont({\n        fontName: fontName,\n        formats: ['ttf', 'eot', 'woff', 'woff2'],\n        normalize: true,\n      })\n    )\n    .on('glyphs', function (glyphs, option) {\n      src('src/iconfont/*.scss')\n        .pipe(\n          consolidate('lodash', {\n            // 自訂變數 用於 css template\n            glyphs: glyphs,\n            commonName: 'font', //字型共用設定 className\n            fontName: fontName, //設定字型名稱 用於 font-family\n            fontPath: '../../fonts/', //字型檔輸出資料夾\n            className: 'font-icon', //前綴名稱 編譯出來的名字 font-icon-svgname\n          })\n        )\n        .pipe(dest('src/scss'));\n    })\n    .pipe(dest('dist/fonts'));\n}\n</code></pre>\n<hr>\n<p>將 svg 輸出成 字型檔後\n再來就是 css templpate 的 撰寫了\n這裡關係著如何在 css 裡引用字型\n可以依個人需求做客製化</p>\n<p>這裡稍微參考了一下 <code>fontawesome</code> 的用法來建立 css template</p>\n<pre><code class=\"language-css\">@font-face {\n  font-family: &quot;&lt;%= fontName %&gt;&quot;;\n  src: url('&lt;%= fontPath %&gt;&lt;%= fontName %&gt;.eot');\n  src: url('&lt;%= fontPath %&gt;&lt;%= fontName %&gt;.eot?#iefix') format('eot'),\n    url('&lt;%= fontPath %&gt;&lt;%= fontName %&gt;.woff2') format('woff2'),\n    url('&lt;%= fontPath %&gt;&lt;%= fontName %&gt;.woff') format('woff'),\n    url('&lt;%= fontPath %&gt;&lt;%= fontName %&gt;.ttf') format('truetype'),\n    url('&lt;%= fontPath %&gt;&lt;%= fontName %&gt;.svg#&lt;%= fontName %&gt;') format('svg');\n  font-weight: normal;\n  font-style: normal;\n}\n\n.&lt;%= commonName %&gt; {\n  display: inline-block;\n  font-family: &quot;&lt;%= fontName %&gt;&quot;;\n  font-style: normal;\n  font-variant: normal;\n  text-rendering: auto;\n  font-weight: normal;\n  line-height: 1;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.&lt;%= className %&gt;-xs { font-size: .75em; }\n.&lt;%= className %&gt;-sm { font-size: .875em; }\n.&lt;%= className %&gt;-lg { font-size: 1.33333em; line-height: .75em; vertical-align: -.0667em; }\n.&lt;%= className %&gt;-fw { width: 1.2857142857142858em; text-align: center; }\n.&lt;%= className %&gt;-2x { font-size: 2em; }\n.&lt;%= className %&gt;-3x { font-size: 3em; }\n.&lt;%= className %&gt;-4x { font-size: 4em; }\n.&lt;%= className %&gt;-5x { font-size: 5em; }\n.&lt;%= className %&gt;-7x { font-size: 7em; }\n.&lt;%= className %&gt;-10x { font-size: 10em; }\n\n&lt;% _.each(glyphs, function(glyph) { %&gt;\n  .&lt;%= className %&gt;-&lt;%= glyph.name %&gt;:before {\n    content: &quot;\\&lt;%= glyph.unicode[0].charCodeAt(0).toString(16).toUpperCase() %&gt;&quot;\n  }\n&lt;% }); %&gt;\n</code></pre>\n<h4 id=\"html-使用\">html 使用</h4>\n<pre><code class=\"language-html\">&lt;i class=&quot;font font-icon-svgname&quot;&gt;&lt;/i&gt;\n</code></pre>\n<h4 id=\"注意事項：\">注意事項：</h4>\n<p>僅限單色 svg 不然在使用上會出錯</p>\n<h3 id=\"參考文件\">參考文件</h3>\n<p><a target='_blank' href=\"https://www.npmjs.com/package/gulp-iconfont\">https://www.npmjs.com/package/gulp-iconfont</a></p>\n"},{"directory":"gulp","layout":"gulp","slug":"gulp_spritesmith","title":"Gulp：自動化 rwd css sprite ( 自適應雪碧圖 )","date":"2017/06/26","update":"2020/05/23","categories":["Gulp"],"tags":["Gulp","node","JavaScript"],"summary":"將許多 icon 小圖轉換成大圖 做成 sprite於 20200523 更新 拿掉舊有寫法 加上新的 cssTemplate這次更新是因為把之前寫的很醜的 cssTemplate 翻新重寫也因為個人","content":"<blockquote>\n<p>將許多 icon 小圖轉換成大圖 做成 sprite</p>\n</blockquote>\n<p><em>於 20200523 更新 拿掉舊有寫法 加上新的 cssTemplate</em></p>\n<p>這次更新是因為把之前寫的很醜的 cssTemplate 翻新重寫\n也因為個人需求 在 sprite 載入的圖檔轉成 base64 加載\n且將單位 px 轉為 rem 方便寫 rwd 網頁上使用</p>\n<hr>\n<h3 id=\"gulp.spritesmith-官方提供設定-code\">gulp.spritesmith 官方提供設定 code</h3>\n<pre><code class=\"language-javascript\">var gulp = require('gulp');\nvar spritesmith = require('gulp.spritesmith');\n\n// 將 spritesmith 的 img,scss 分開輸出 需加裝 merge\nvar merge = require('merge-stream');\n\ngulp.task('sprite', function () {\n  var spriteData = gulp.src('images/*.png').pipe(spritesmith({\n      imgName: 'sprite.png',\n      cssName: 'sprite.css'\n    }\n  }));\nreturn spriteData.pipe(gulp.dest('path/to/output/'));\n});\n\n</code></pre>\n<hr>\n<h3 id=\"個人修改調整後\">個人修改調整後</h3>\n<pre><code class=\"language-js\">const gulp = require('gulp');\nconst sass = require('gulp-sass');\nconst spritesmith = require('gulp.spritesmith');\nconst merge = require('merge-stream');\nconst base64 = require('gulp-base64-inline');\n\nfunction sprite() {\n  let spriteData = src('src/images/sprite/**/*.png').pipe(\n    spritesmith({\n      imgName: 'sprite.png',\n      cssName: '_sprite.scss',\n      imgPath: 'sprite.png',\n      padding: 10,\n      cssTemplate: (data) =&gt; {\n        let spriteArr = [];\n        data.sprites.forEach(function (sprite) {\n          spriteArr.push(`\n            .${sprite.name} {\n              display: block;\n              width: ${sprite.width / 16}rem;\n              height: ${sprite.height / 16}rem;\n              background-size: ${\n                (data.spritesheet.width / sprite.width) * 100\n              }%  ${(data.spritesheet.height / sprite.height) * 100}%;\n              background-position: 0 ${((-1 * sprite.offset_y) / (data.spritesheet.height - sprite.height)) * 100}%;\n            }\n          `);\n        });\n        spriteArr.push(`\n          .${data.options.spriteName}{ background-image: inline('${data.spritesheet.image}'); }\n        `);\n        return spriteArr.join('');\n      },\n      cssFormat: 'scss',\n      algorithm: 'top-down',\n      cssOpts: {\n        spriteName: 'icon',\n      },\n    })\n  );\n  let cssStream = spriteData.css.pipe(prettier()).pipe(dest('src/scss'));\n  let imgStream = spriteData.img.pipe(dest('src/images/img'));\n\n  return merge(imgStream, cssStream);\n}\n\nfunction css() {\n  return src('src/scss/**/*.scss')\n    .pipe(plumber())\n    .pipe(sourcemaps.init())\n    .pipe(\n      sass({\n        outputStyle: 'compact',\n        includePaths: [''],\n      }).on('error', sass.logError)\n    )\n    .pipe(base64('../images/img'))\n    .pipe(sourcemaps.write())\n    .pipe(dest('dist/css'));\n}\n</code></pre>\n<h4 id=\"注意事項：\">注意事項：</h4>\n<p>需將檔案轉存為 scss 檔 才能將圖檔編譯成 base64 編碼\n也需要另外加載 <a target='_blank' href=\"https://www.npmjs.com/package/gulp-base64-inline\">gulp-base64-inline</a> 在 css 編譯時做轉檔</p>\n<p>在 html 引用上，要再多加上圖片檔的 class 名稱\n例如 spriteName 上寫的是 icon\n圖檔的名字是 file</p>\n<pre><code class=\"language-html\">&lt;i class=&quot;icon file&quot;&gt;&lt;/i&gt;\n</code></pre>\n<hr>\n<h3 id=\"參數說明\">參數說明</h3>\n<ul>\n<li>imgName 轉成大圖後的物件名稱</li>\n<li>cssName 編譯後的 css 名稱</li>\n<li>cssFormat 格式化生成檔 支援以下 css (CSS), .sass (SASS), .scss - (SCSS), .less (LESS), .styl/.stylus (Stylus), and .json (JSON)</li>\n<li>imgPath 對應物件路徑檔案</li>\n<li>padding icon.png 中圖片間距</li>\n<li>algorithm icon 合成後 圖片排法 <a target='_blank' href=\"https://github.com/twolfson/layout\">https://github.com/twolfson/layout</a></li>\n<li>cssTemplate 設定 css 產生格式，這裡可以用 handlebars 的格式來撰寫 <a target='_blank' href=\"https://github.com/twolfson/spritesheet-templates#documentation\">https://github.com/twolfson/spritesheet-templates#documentation</a></li>\n<li>cssOpts 設定自訂 css 產生程式變數</li>\n</ul>\n<hr>\n<h3 id=\"參考文件\">參考文件</h3>\n<ul>\n<li><a target='_blank' href=\"https://www.npmjs.com/package/gulp.spritesmith\">https://www.npmjs.com/package/gulp.spritesmith</a></li>\n<li><a target='_blank' href=\"https://www.w3ctrain.com/2015/12/09/generating-sprites-with-gulp/\">https://www.w3ctrain.com/2015/12/09/generating-sprites-with-gulp/</a></li>\n<li><a target='_blank' href=\"http://milkmidi.blogspot.tw/2017/04/gulp-spritesheet.html\">http://milkmidi.blogspot.tw/2017/04/gulp-spritesheet.html</a></li>\n</ul>\n"},{"directory":"gulp","layout":"gulp","slug":"node_del","title":"Gulp：del","date":"2017/06/26","categories":["Gulp"],"tags":["Gulp","node"],"summary":"刪除多餘的資料夾或文件var gulp = require('gulp');var del = require('del');gulp.task('clean', function() {  //目的","content":"<blockquote>\n<p>刪除多餘的資料夾或文件</p>\n</blockquote>\n<pre><code class=\"language-javascript\">var gulp = require('gulp');\nvar del = require('del');\n\ngulp.task('clean', function() {\n  //目的資料夾\n  del(['public/include/**', 'public/scss/**']);\n});\n</code></pre>\n<p>終端機指令：\nnpm gulp clean\n或\nyarn gulp clean</p>\n<h3 id=\"參考文件\">參考文件</h3>\n<p><a target='_blank' href=\"http://www.gulpjs.com.cn/docs/recipes/delete-files-folder/\">http://www.gulpjs.com.cn/docs/recipes/delete-files-folder/</a></p>\n"},{"directory":"hexo","layout":"hexo","slug":"hexo_cannot-find-module","title":"hexo：Error:Cannot find module","date":"2018/12/20","categories":["Hexo"],"tags":["Hexo"],"summary":"一陣子沒更新的 blog想記錄一下這幾天遇到的問題就在寫好之際 想預覽一下 發現 hexo 也出問題了!!!噴了一堆錯估狗了一下 原來是前陣子在練習 vue 的時後為了安裝 vue-cli 所以升級了","content":"<p>一陣子沒更新的 blog\n想記錄一下這幾天遇到的問題\n就在寫好之際 想預覽一下 發現 hexo 也出問題了!!!\n噴了一堆錯</p>\n<p>估狗了一下 原來是前陣子在練習 vue 的時後\n為了安裝 vue-cli 所以升級了 node 版本\n想不到啊想不到 當下使用的 hexo 只能使用舊版 node6 以下執行</p>\n<p>人生啊…(喝口茶 只好繼續找解決方案了</p>\n<p>總而言之呢 就是先把舊版的<code>hexo-cli</code>移除後再裝上\n執行以下指令 (是的 我是 mac 用戶 所以就是 mac 指令了</p>\n<pre><code class=\"language-bash\">$ sudo npm uninstall hexo-cli -g\n$ sudo npm uninstall dtrace-provider -g\n$ sudo npm install hexo-cli -g --no-optional\n</code></pre>\n<p>好了 搞定了!!!</p>\n<p>參考資料：<a target='_blank' href=\"https://github.com/hexojs/hexo/issues/1922\">https://github.com/hexojs/hexo/issues/1922</a></p>\n"},{"directory":"hexo","layout":"hexo","slug":"hexo_git_push_case","title":"Hexo：Github 上傳佈署後 檔名大小寫問題","date":"2020/12/06","categories":["Hexo"],"tags":["Hexo","Github"],"summary":"最近在整理以前寫過的文章分類，把一些檔名的大小寫稍做調整，發現文章佈署到 git 上後，git 對於檔名大小寫的更動 檔案不會更新，導致頁面出現 404 找不到頁面解決方法在 hexo 的目錄下 找到","content":"<p>最近在整理以前寫過的文章分類，把一些檔名的大小寫稍做調整，\n發現文章佈署到 git 上後，git 對於檔名大小寫的更動 檔案不會更新，\n導致頁面出現 404 找不到頁面</p>\n<h2 id=\"解決方法\">解決方法</h2>\n<p>在 hexo 的目錄下 找到 <code>.deploy_git/.git/config</code>\n修改 <code>ignorecase = false</code></p>\n<p>cmd 裡面直接打指令</p>\n<pre><code class=\"language-bash\">$ cd .deploy_git\n$ git config core.ignorecase false\n$ hexo clean\n$ hexo deploy -g\n</code></pre>\n<!-- git config --global core.ignorecase false -->\n"},{"directory":"hexo","layout":"hexo","slug":"hexo_next_copybutton","title":"hexo：Next 一鍵複製程式碼","date":"2019/10/05","categories":["Hexo"],"tags":["Hexo"],"summary":"最近發現新版 Next 7 版有支援一鍵複製程式碼的功能之前還傻傻的自己套clipboard.js 來用 想不到早就有內建了 XDDD開啟一鍵複製功能只要到 _config.yml 裡 的 390 行","content":"<p>最近發現新版 Next 7 版有支援一鍵複製程式碼的功能之前還傻傻的自己套\n<code>clipboard.js</code> 來用 想不到早就有內建了 XDDD</p>\n<h2 id=\"開啟一鍵複製功能\">開啟一鍵複製功能</h2>\n<p>只要到 <code>_config.yml</code> 裡 的 390 行下 找到 <code>copy_button</code> 將 <code>enable</code> 改 <code>true</code> 即\n可</p>\n<p>檔案位子如下圖\n<img src=\"assets/images/hexo/next_copybutton/config.jpg\"  width=250px  loading=\"lazy\" />\n<img src=\"assets/images/hexo/next_copybutton/codeblock.jpg\"/> 分別提供了 <code>flat</code>\n與 <code>mac</code> 樣式</p>\n<hr>\n<h2 id=\"修改預設樣式\">修改預設樣式</h2>\n<p>但預設 像這樣只有 <code>複製</code> 兩個字 就覺得沒有很好看</p>\n<img src=\"assets/images/hexo/next_copybutton/001.jpg\"  width=100% />\n<p>想改成 icon 呈現</p>\n<img src=\"assets/images/hexo/next_copybutton/002.jpg\"  width=100% />\n<p>爬了一下原始碼 找到了修改的地方在 themes/next 的主題的資料夾裡往下找\nthemes/next/source/js/utils.js 找到 <code>utils.js</code> 這支檔案</p>\n<img src=\"assets/images/hexo/next_copybutton/003.jpg\"  width=250px />\n<p>接著約在 50 行有一個註解寫著 <code>One-click copy code support.</code> 往下找到 initButton\n這個 function</p>\n<pre><code class=\"language-js\">function initButton(button) {\n  if (CONFIG.copycode.style === 'mac') {\n    button.html('&lt;i class=&quot;fa fa-clipboard&quot;&gt;&lt;/i&gt;');\n  } else {\n    // button.text(CONFIG.translation.copy_button);\n    button.html('&lt;i class=&quot;fa fa-clipboard&quot;&gt;&lt;/i&gt;');\n  }\n}\n</code></pre>\n<p>將原本 <code>button.text(CONFIG.translation.copy_button);</code> 這行刪掉 或 註解起來改\n<code>button.html('&lt;i class=&quot;fa fa-clipboard&quot;&gt;&lt;/i&gt;');</code> 就可以囉</p>\n<p>順帶一提 next 7 支援 fontawesome 4.7 版若是不喜歡這個 icon 樣式 也能直接到\n<a target='_blank' href=\"https://fontawesome.com/v4.7.0/\">fontawesome 官網</a>裡找 自己喜歡的 icon 替換</p>\n"},{"directory":"hexo","layout":"hexo","slug":"hexo_next_update","title":"hexo：Next 主題更新","date":"2019/07/18","categories":["Hexo"],"tags":["Hexo"],"summary":"最近看到蠻多人的 blog next 這個主題裡多了好多功能於是心血來潮來看一下 next 的主題是否有更新赫然發現已更新至 7 版了於是開始一連串的更新發現舊版與新版架構完全不一樣所以也可以當做一新","content":"<p>最近看到蠻多人的 blog next 這個主題裡多了好多功能\n於是心血來潮來看一下 next 的主題是否有更新\n赫然發現已更新至 7 版了\n於是開始一連串的更新</p>\n<p>發現舊版與新版架構完全不一樣\n所以也可以當做一新全新的主題樣版來看待</p>\n<p>更新後發現新版的 next 多了許多可以讓使用者發揮的空間\n真的是好棒棒呀！！</p>\n<p>改天有空再來玩玩</p>\n<hr>\n<p>唔…原本還有更重要的事要做啊…\n怎麼又多出了這個分支任務了 囧~~~</p>\n"},{"directory":"jquery","layout":"jquery","slug":"jqextend","title":"jQuery-extend","date":"2017/09/26","categories":["jquery"],"tags":["jquery","JavaScript"],"summary":"這篇應該算是踩雷過後的學習記錄var a = { a: 1 };a.aa = $.extend( a, { b:2 });這樣寫的話 會造成 a 的無窮迴圈a.aa = $.extend( {},a,","content":"<p>這篇應該算是踩雷過後的學習記錄</p>\n<pre><code class=\"language-js\">var a = { a: 1 };\na.aa = $.extend( a, { b:2 });\n</code></pre>\n<p>這樣寫的話 會造成 a 的無窮迴圈</p>\n<pre><code class=\"language-js\">a.aa = $.extend( {},a, { b:2 });\n或\n$.extend( true, a.aa ,a, { b:2 } );\n</code></pre>\n<p>才能正常的做物件深度合併</p>\n<h4 id=\"參考資料\">參考資料</h4>\n<p><a target='_blank' href=\"http://www.css88.com/jqapi-1.9/jQuery.extend/\">http://www.css88.com/jqapi-1.9/jQuery.extend/</a>\n<a target='_blank' href=\"http://www.runoob.com/jquery/misc-extend.html\">http://www.runoob.com/jquery/misc-extend.html</a>\n<a target='_blank' href=\"https://github.com/jquery/jquery/blob/master/src/core.js#L305\">https://github.com/jquery/jquery/blob/master/src/core.js#L305</a></p>\n"},{"directory":"jquery","layout":"jquery","slug":"jqtrigger","title":"jQuery-trigger","date":"2017/07/06","categories":["jquery"],"tags":["jquery","JavaScript"],"summary":"trigger 這個屬性是 jQuery 所建構出來的官方文件介紹http://api.jquery.com/trigger/沒錯 都是英文，他寫的很清楚，但我看的很模糊算了下我花了快半年以上的時間 ","content":"<p>trigger 這個屬性是 jQuery 所建構出來的</p>\n<p>官方文件介紹\n<a target='_blank' href=\"http://api.jquery.com/trigger/\">http://api.jquery.com/trigger/</a></p>\n<p>沒錯 都是英文，他寫的很清楚，但我看的很模糊<br>\n算了下我花了快半年以上的時間 才真正搞懂如何去應用它(應該是吧?!</p>\n<pre><code class=\"language-javascript\">$('#foo').on('custom', function (event, param1, param2) {\n  alert(param1 + '\\n' + param2);\n});\n$('#foo').trigger('custom', ['Custom', 'Event']);\n</code></pre>\n<p>主要是這一串，對於新手的我 看不太懂他上面的意思\n連理解順續也反了</p>\n<p>不過沒關係 能用就好了</p>\n<p>他上面的意思是</p>\n<p>首先 我先 trigger 一個叫 <strong>custom</strong> 的字串 沒錯 他只能使用字串帶入\n這個字串 可以由我自己去定義事件名稱，或是使用目前 jQuery 裡現有的事件名字\n而字串後面的 <strong>[ “Custom”, “Event” ]</strong> 則是帶入的參數，他可以是陣列 或是物件(?!</p>\n<p>接著 我要用 on 去觸發 <strong>custom</strong> 這個由我自定義的事件\n後面再帶入我要執行的 function 函式，第一個 event 是 <strong>custom</strong> 裡的內建參數\n接著 <strong>param1、param2</strong> 才是我剛剛分別帶入的**[ “Custom”, “Event” ]**參數\n然後再開始在大括號後裡寫我要做的事</p>\n<h3 id=\"ps.要先-on-才能-trigger\">ps.要先 on 才能 trigger</h3>\n<hr>\n<p>補上對應的 javascript 寫法供參考</p>\n<p>jQuery</p>\n<pre><code class=\"language-javascript\">$(el).trigger('custom');\n</code></pre>\n<p>javascript</p>\n<pre><code class=\"language-javascript\">var event = document.createEvent('HTMLEvents');\nevent.initEvent('custom', true, false);\nel.dispatchEvent(event);\n</code></pre>\n<hr>\n<p>jQuery</p>\n<pre><code class=\"language-javascript\">$(el).trigger('custom', { some: 'data' });\n</code></pre>\n<p>javascript</p>\n<pre><code class=\"language-javascript\">if (window.CustomEvent) {\n  var event = new CustomEvent('my-event', { detail: { some: 'data' } });\n} else {\n  var event = document.createEvent('CustomEvent');\n  event.initCustomEvent('my-event', true, true, { some: 'data' });\n}\n\nel.dispatchEvent(event);\n</code></pre>\n<hr>\n"},{"directory":"js","layout":"JavaScript","slug":"api_cors_error","title":"利用 google apps script 做中繼點跨網域遠端取得api資料","date":"2018/12/24","categories":["api"],"tags":["node","proxy","google app script","JavaScript","cors"],"summary":"問題最近在練習 vue 時 會去政府公開 api 取資料 但有些 api 會有跨網域讀取限的問題一開始在開發環境vue-cli有提供http-proxy-middleware做 proxy 處理跟網域","content":"<h2 id=\"問題\">問題</h2>\n<p>最近在練習 vue 時 會去政府公開 api 取資料 但有些 api 會有跨網域讀取限的問題\n一開始在開發環境<code>vue-cli</code>有提供<code>http-proxy-middleware</code>做 proxy 處理跟網域這部份\n但到了要發佈的時後 資料出現一樣會出現異常啊啊啊啊 像這樣\n<img src=\"assets/images/api_cors_error/cors_error.png\"  width=100%  loading=\"lazy\" /></p>\n<p>沒有主機 沒有後端資源的我們該怎麼辦呢 (抱頭)\n這時後 估狗好朋友出現了 它提供了<code>google app script</code></p>\n<h2 id=\"新增-google-apps-script\">新增 google apps script</h2>\n<p>首先 要先有一個 google 帳號 開啟雲端硬碟服務\n新增 <code>google apps script</code>\n<img src=\"assets/images/api_cors_error/01_add_app_script.png\" />\n如果沒有 可以到<code>連結更多應用程式</code>裡去找</p>\n<p>接下來就是開新專案</p>\n<img src=\"assets/images/api_cors_error/02_new_project.png\" />\n<p>將程式碼修改如下</p>\n<pre><code class=\"language-js\">function doGet(e) {\n  var param = e.parameter;\n  var url = param.url;\n  var response = UrlFetchApp.fetch(decodeURIComponent(url), {\n    headers: { &quot;Content-type&quot;: &quot;application/json&quot; },\n  });\n  var data = JSON.parse(response.getContentText());\n  return ContentService.createTextOutput(JSON.stringify(data)).setMimeType(\n    ContentService.MimeType.JSON\n  );\n}\n</code></pre>\n<img src=\"assets/images/api_cors_error/03_creat.png\" />\n<img src=\"assets/images/api_cors_error/04_issue.png\" />\n<p>黃色區塊則為<code>部署網址</code>\n新增專案版本 這裡要注意一下 修改後 如果沒有新增專案版本 發佈後的程式還會是前一版的哦\n接下來 按 確定或更新 就能直接套用囉</p>\n<pre><code class=\"language-bash\">部署的網址?參數名稱=api網址\n</code></pre>\n<p>以新北市 ubike API 為例</p>\n<pre><code class=\"language-bash\">部署的網址?url=data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000352-001\n</code></pre>\n<p>成功！！</p>\n<p>函式使用上 請參考文件規則 <a target='_blank' href=\"https://developers.google.com/apps-script/guides/html/\">https://developers.google.com/apps-script/guides/html/</a></p>\n"},{"directory":"js","layout":"JavaScript","slug":"api_name_change","title":"修改api(json)參數名稱(大小寫)","date":"2018/08/27","categories":["api"],"tags":["api","JavaScript","json"],"summary":"最近在跟後端合作時，常遇到 列表與明細頁的 api 相同，但所提供的 api 卻是有分大小寫，在共用上常常因為大小寫不同，而導致 js 出錯所以就只有在後端 api 吐過來的時後，先把 api 參數調","content":"<p>最近在跟後端合作時，常遇到 列表與明細頁的 api 相同，\n但所提供的 api 卻是有分大小寫，在共用上常常因為大小寫不同，而導致 js 出錯\n所以就只有在後端 api 吐過來的時後，先把 api 參數調整好，才能順利進行啊啊啊</p>\n<pre><code class=\"language-js\">json = [{}, {}]; //API\n\nvar obj = [];\n\njson.map(function (e, i) {\n  obj[i] = {};\n  for (var items in e) {\n    obj[i][items.toUpperCase()] = e[items]; //參數改大寫\n    // obj[i][items.toLowerCase()] = e[items];  //參數改小寫\n  }\n});\n</code></pre>\n<ul>\n<li><a target='_blank' href=\"https://codepen.io/mtw/pen/JZQvRE\">codepen 參考</a></li>\n</ul>\n"},{"directory":"js","layout":"JavaScript","slug":"async","title":"Async/Await vs RxJS 非同步取值筆記","date":"2022/03/13","categories":["JavaScript"],"tags":["JavaScript","Rxjs"],"summary":"Promise在使用 async/await 一定要先了解 PromisePromise 是 es6 之後才開始有的Promise 程式碼const promise = new Promise((re","content":"<h2 id=\"promise\">Promise</h2>\n<p>在使用 <code>async/await</code> 一定要先了解 <code>Promise</code></p>\n<p>Promise 是 es6 之後才開始有的</p>\n<p>Promise 程式碼</p>\n<pre><code class=\"language-js\">const promise = new Promise((resolve, reject) =&gt; {\n  resolve(value); // 完成\n  reject(&quot;fail&quot;); // 拒絕\n});\n</code></pre>\n<p>將 promise 封裝後包成 function</p>\n<pre><code class=\"language-js\">const fetchData = (url, data) =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    fetch(url)\n      .then((res) =&gt; {\n        resolve(res.json());\n      })\n      .catch((e) =&gt; {\n        reject(e);\n      });\n  });\n};\n</code></pre>\n<hr>\n<h2 id=\"async/await\">async/await</h2>\n<pre><code class=\"language-js\">// 排隊執行\nconst getData = async () =&gt; {\n  try {\n    const jewelery = await fetchData(\n      &quot;https://fakestoreapi.com/products/category/jewelery&quot;\n    );\n    const electronics = await fetchData(\n      &quot;https://fakestoreapi.com/products/category/electronics&quot;\n    );\n    return {\n      electronics,\n      jewelery,\n    };\n  } catch (e) {\n    console.log(&quot;catch&quot;, e);\n    throw new Error(e);\n  }\n};\n</code></pre>\n<p>使用 promise 可轉成 <code>then</code> 的串接</p>\n<pre><code class=\"language-js\">getData().then((res) =&gt; {\n  console.log(&quot;done&quot;, res);\n});\n</code></pre>\n<p><a target='_blank' href=\"https://stackblitz.com/edit/js-abcrfb\">async/await 範例</a></p>\n<hr>\n<h2 id=\"rxjs\">RxJS</h2>\n<pre><code class=\"language-ts\">import { ajax } from &quot;rxjs/ajax&quot;;\nimport { of, map, catchError, combineLatest } from &quot;rxjs&quot;;\n\nconst fetchJewelery$ = ajax(\n  &quot;https://fakestoreapi.com/products/category/jewelery&quot;\n).pipe(\n  map((res) =&gt; {\n    return res.response;\n  }),\n  catchError((error) =&gt; {\n    console.log(&quot;error: &quot;, error);\n    return of(error);\n  })\n);\n\nconst fetchElectronics$ = ajax(\n  &quot;https://fakestoreapi.com/products/category/electronics&quot;\n).pipe(\n  map((res) =&gt; {\n    return res.response;\n  }),\n  catchError((error) =&gt; {\n    console.log(&quot;error: &quot;, error);\n    return of(error);\n  })\n);\n\ncombineLatest([fetchJewelery$, fetchElectronics$]).subscribe(\n  ([jewelery, electronics]) =&gt; {\n    console.log(&quot;data&quot;, electronics, jewelery);\n  }\n);\n</code></pre>\n<p><a target='_blank' href=\"https://stackblitz.com/edit/rxjs-axmpfg\">RxJS 範例</a></p>\n<hr>\n<p>參考連結：\n<a target='_blank' href=\"https://iter01.com/557755.html\">async await 你真的用對了嗎？</a>\n<a target='_blank' href=\"https://teagan-hsu.coderbridge.io/2021/01/03/javascript-async-promise/\">Web 開發學習筆記 15 — 呼叫堆疊、同步與非同步、Promise、Async/Await、Conditional ternary operator</a></p>\n"},{"directory":"js","layout":"JavaScript","slug":"googlemap_bounds","title":"利用 google.maps.LatLngBounds 讓googlemap自動縮放到適合的大小","date":"2019/01/14","categories":["JavaScript"],"tags":["JavaScript","Google"],"summary":"如何讓所有地圖標記自動縮放都在可視範圍的區域首先 可以先了解地圖的邊界值先上 codeGoogleMap event 參照html&lt;div id=&quot;map&quot;&gt;&lt;/","content":"<p>如何讓所有地圖標記自動縮放都在可視範圍的區域</p>\n<p>首先 可以先了解地圖的邊界值\n<img src=\"assets/images/googlemap_bounds/001.png\"  width=100%  loading=\"lazy\" /></p>\n<p>先上 code\n<a target='_blank' href=\"https://developers.google.com/maps/documentation/javascript/events\">GoogleMap event 參照</a>\nhtml</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;map&quot;&gt;&lt;/div&gt;\n&lt;div id=&quot;info&quot;&gt;&lt;/div&gt;\n</code></pre>\n<p>javascript</p>\n<pre><code class=\"language-js\">function initMap() {\n  // 設定估狗地圖\n  var map = new google.maps.Map(document.getElementById(&quot;map&quot;), {\n    center: { lat: 25.0471778, lng: 121.5139815 },\n    zoom: 10,\n    mapTypeId: google.maps.MapTypeId.ROADMAP,\n  });\n\n  // 觀察經緯度的變化\n  google.maps.event.addListener(map, &quot;bounds_changed&quot;, function () {\n    var bounds = map.getBounds();\n    var NE = bounds.getNorthEast();\n    var SW = bounds.getSouthWest();\n    var strHTML = `NorthEast: ${NE.lat()},${NE.lng()} &lt;/br&gt; SouthWest: ${SW.lat()},${SW.lng()} &lt;/br&gt;`;\n\n    document.getElementById(&quot;info&quot;).innerHTML = strHTML;\n  });\n}\n</code></pre>\n<img src=\"assets/images/googlemap_bounds/002.png\"  width=100% />\n<p>在地圖上 隨意拖拉 放大縮小 可觀察到值的變動</p>\n<p>接著加上多點景點的經緯度 在初始化地圖裡做些修改</p>\n<pre><code class=\"language-js\">var site = [\n  {\n    lat: '25.0416412',\n    lng: '121.5284858',\n    name: '華山公園'\n  },\n  {\n    lat: '25.0430612',\n    lng: '121.5597497',\n    name: '松山文創園區2號倉庫'\n  },\n  {\n    lng: '121.505709',\n    lat: '25.136705',\n    name: '新北投公園'\n  },\n  {\n    lng: '120.9550342',\n    lat: '24.4010777',\n    name: '雪霸國家公園'\n  },\n];\nfunction initMap() {\n  var map = new google.maps.Map(document.getElementById('map'), {\n      center: {lat: 25.0471778, lng: 121.5139815},\n      zoom: 10\n      mapTypeId: goole.maps.MapTypeId.ROADMAP\n  });\n\n  site.map(e=&gt; {\n    // 將標記加上icon\n    var marker = new google.maps.Marker({\n      map: map,\n      draggable: false,\n      animation: google.maps.Animation.DROP,\n      position: {lat: parseFloat(e.lat), lng: parseFloat(e.lng)},\n      title: e.name\n    });\n  });\n}\n</code></pre>\n<img src=\"assets/images/googlemap_bounds/003.png\"  width=100% />\n如圖，我們會發現 還有一個`雪霸國家公園`的點沒出現 需要地圖往下拉才看的到\n<p>這時後 就需要用到 google.maps.LatLngBounds()</p>\n<pre><code class=\"language-js\">var site...(省略 可參照上一段code)\n\nvar map = new google.maps.Map(document.getElementById('map'), {\n    center: {lat: 25.0471778, lng: 121.5139815},\n    zoom: 10\n    mapTypeId: goole.maps.MapTypeId.ROADMAP\n});\n\n//新增多點坐標顯示的矩形\nvar bounds = new google.maps.LatLngBounds();\n\n    site.map(e=&gt; {\n      // 將標記加上icon\n      var marker...(省略 可參照上一段code)\n\n      //將所有座標加到可視地圖裡\n      bounds.extend(new google.maps.LatLng(parseFloat(e.lat), parseFloat(e.lng)));\n    });\n\n    //繪製到地圖\n    map.fitBounds(bounds);\n</code></pre>\n<img src=\"assets/images/googlemap_bounds/004.png\"  width=100% />\n<p>成功！！ 所有地圖標記都出來囉\n<a target='_blank' href=\"https://codepen.io/mtw/pen/xmmaoN\">codepen 連結</a></p>\n<p>文件參照：\n<a target='_blank' href=\"https://developers.google.com/maps/documentation/javascript/reference/coordinates#LatLngBounds\">https://developers.google.com/maps/documentation/javascript/reference/coordinates#LatLngBounds</a></p>\n"},{"directory":"js","layout":"JavaScript","slug":"js_array filter","title":"JS Array 過濾重覆值的幾種方式","date":"2020/05/04","categories":["JavaScript"],"tags":["JavaScript"],"summary":"陣列裡 有時後會處理到把重覆的值濾掉，有以下幾種方式以這個陣列為例let arr = ['Apple', 'Banana', 'Orange', 'Mango', 'Orange', 'Apple']","content":"<p>陣列裡 有時後會處理到把重覆的值濾掉，有以下幾種方式</p>\n<p>以這個陣列為例</p>\n<pre><code class=\"language-js\">let arr = ['Apple', 'Banana', 'Orange', 'Mango', 'Orange', 'Apple'];\n</code></pre>\n<hr>\n<h2 id=\"filter\">filter</h2>\n<pre><code class=\"language-js\">function removeRepeat(data) {\n  return data.filter((element, index, array) =&gt; {\n    return array.indexOf(element) === index;\n  });\n}\n\nconsole.log(removeRepeat(arr));\n// ['Apple', 'Banana', 'Orange', 'Mango']\n</code></pre>\n<hr>\n<h2 id=\"foreach\">forEach</h2>\n<pre><code class=\"language-js\">function removeRepeat(data) {\n  let unique = [];\n  data.forEach((element) =&gt; {\n    if (!unique.includes(element)) {\n      unique.push(element);\n    }\n  });\n  return unique;\n}\n\nconsole.log(removeRepeat(arr));\n// ['Apple', 'Banana', 'Orange', 'Mango']\n</code></pre>\n<hr>\n<h2 id=\"reduce\">reduce</h2>\n<pre><code class=\"language-js\">function removeRepeat(data) {\n  let unique = data.reduce((acc, cur)=&gt;{\n    if(acc.indexOf(cur) &lt; 0){\n      acc.push(cur)\n    }\n    return acc;\n  }, []);\n  return unique;\n}\n\nconsole.log(removeRepeat(arr));\n// ['Apple', 'Banana', 'Orange', 'Mango']\n</code></pre>\n<h2 id=\"set-(目前最常用的方式)\">Set (目前最常用的方式)</h2>\n<pre><code class=\"language-js\">function removeRepeat(data) {\n  return [...new Set(data)];\n}\n\nconsole.log(removeRepeat(arr));\n// ['Apple', 'Banana', 'Orange', 'Mango']\n</code></pre>\n<hr>\n<h2 id=\"map\">map</h2>\n<pre><code class=\"language-js\">function removeRepeat(data) {\n  let unique = [];\n  data.map((element) =&gt; {\n    if (!unique.includes(element)) {\n      unique.push(element);\n    }\n  });\n  return unique;\n}\n\nconsole.log(removeRepeat(arr));\n// ['Apple', 'Banana', 'Orange', 'Mango']\n</code></pre>\n<p>以上</p>\n"},{"directory":"js","layout":"JavaScript","slug":"js_array_append","title":"JS Array 新增值的幾種方式","date":"2020/04/29","categories":["JavaScript"],"tags":["JavaScript"],"summary":"在工作上時 會常常處理到陣列傳遞的情況，偶然看到一些國外的文章寫整理的蠻好的，也就此剛好記錄下來會改變原來陣列 ( 在記憶體裡是使用同一個位置 )push直接將新的值加到後面const array =","content":"<p>在工作上時 會常常處理到陣列傳遞的情況，偶然看到一些國外的文章寫整理的蠻好的，也就此剛好記錄下來</p>\n<h2 id=\"會改變原來陣列-(-在記憶體裡是使用同一個位置-)\">會改變原來陣列 ( 在記憶體裡是使用同一個位置 )</h2>\n<h3 id=\"push\">push</h3>\n<p>直接將新的值加到後面</p>\n<pre><code class=\"language-js\">const array = ['Apple', 'Banana'];\n\n// push 一組新的值\narray.push('Orange');\nconsole.log(array); //[&quot;Apple&quot;, &quot;Banana&quot;, &quot;Orange&quot;]\n\n// push 多組\narray.push('Orange', 'Mango');\nconsole.log(array); //[&quot;Apple&quot;, &quot;Banana&quot;, &quot;Orange&quot;,&quot;Mango&quot;]\n</code></pre>\n<p>es6 可以這樣寫</p>\n<pre><code class=\"language-js\">const array = ['Apple', 'Banana'];\nconst fruit = ['Orange', 'Mango'];\n\narray.push(...fruit);\nconsole.log(array); //[&quot;Apple&quot;, &quot;Banana&quot;, &quot;Orange&quot;,&quot;Mango&quot;]\n</code></pre>\n<h3 id=\"splice\">splice</h3>\n<p>splice 可以在很多情境上使用\n可用來新增新的值，或是取代某個值等 這裡就介紹新增值的部份</p>\n<blockquote>\n<p>array.splice(start[, deleteCount[, item1[, item2[, …]]]])</p>\n</blockquote>\n<ul>\n<li>\n<p>start\n起始元素為 0，若大於陣列長度，則開始的索引值會被設為陣列長度，\n若為負數，則會從陣列的最後一個元素開始計算(起始值為 -1)，且若其絕對值大於陣列長度，則會變設為 0</p>\n</li>\n<li>\n<p>deleteCount\n表示要刪除原本陣列元素數量的整數</p>\n</li>\n<li>\n<p>item1, item2…\n從<code>start</code>開始，要加入到陣列的元素</p>\n</li>\n</ul>\n<pre><code class=\"language-js\">const array = ['Apple', 'Banana'];\n\narray.splice(\n  array.length, //在陣列的最後一筆開始新增新的元素\n  0, //不刪除元素\n  'Orange',\n  'Mango' // 要新增的元素\n);\n\nconsole.log(array); //[&quot;Apple&quot;, &quot;Banana&quot;, &quot;Orange&quot;,&quot;Mango&quot;]\n</code></pre>\n<h3 id=\"length\">length</h3>\n<p>藉由陣列的長度去新增最後一筆元素</p>\n<pre><code class=\"language-js\">const array = ['Apple', 'Banana'];\nconst length = array.length;\n\narray[length] = 'Orange';\n\nconsole.log(array); //[&quot;Apple&quot;, &quot;Banana&quot;, &quot;Orange&quot;]\n</code></pre>\n<hr>\n<h2 id=\"不改變原來陣列-產生一組新的陣列\">不改變原來陣列 產生一組新的陣列</h2>\n<h3 id=\"concat\">concat</h3>\n<p>用來合併陣列</p>\n<pre><code class=\"language-js\">const array = ['Apple', 'Banana'];\nconst fruit = ['Orange', 'Mango'];\n\nconst newArray = array.concat(fruit);\nconsole.log(newArray); //[&quot;Apple&quot;, &quot;Banana&quot;, &quot;Orange&quot;,&quot;Mango&quot;]\n</code></pre>\n<p>也可以用來新增單個元素</p>\n<pre><code class=\"language-js\">const array = ['Apple', 'Banana'];\nconst newArray = array.concat('tomato');\n\nconsole.log(newArray); //[&quot;Apple&quot;, &quot;Banana&quot;, &quot;tomato&quot;]\n</code></pre>\n<h3 id=\"es6-陣列合併\">ES6 陣列合併</h3>\n<p>目前最常用的方式</p>\n<pre><code class=\"language-js\">const array = ['Apple', 'Banana'];\nconst fruit = ['Orange', 'Mango'];\n\nconst newArray = [...array, fruit];\nconsole.log(newArray); //[&quot;Apple&quot;, &quot;Banana&quot;, &quot;Orange&quot;,&quot;Mango&quot;]\n</code></pre>\n<hr>\n<p>參考資料：\n<a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\">MDN: Array.prototype.splice()</a>\n<a target='_blank' href=\"https://www.samanthaming.com/tidbits/87-5-ways-to-append-item-to-array/\">5 Way to Append Item to Array in JavaScript</a>\n<a target='_blank' href=\"https://flaviocopes.com/how-to-append-item-to-array/\">How to append an item to an array in JavaScript</a></p>\n"},{"directory":"js","layout":"JavaScript","slug":"js_destructuring-assignment","title":"JS 解構賦值","date":"2020/12/07","categories":["JavaScript"],"tags":["JavaScript","ES6"],"summary":"解構賦值，按照對應位置，進行賦值，如同鏡子般映射陣列基本用法let [a, b, c] = ['aa', 'bb', 'cc'];// a = 'aa';// b = 'bb';// c = 'cc'","content":"<p>解構賦值，按照對應位置，進行賦值，如同鏡子般映射</p>\n<h2 id=\"陣列\">陣列</h2>\n<h3 id=\"基本用法\">基本用法</h3>\n<pre><code class=\"language-javascript\">let [a, b, c] = ['aa', 'bb', 'cc'];\n\n// a = 'aa';\n// b = 'bb';\n// c = 'cc';\n</code></pre>\n<pre><code class=\"language-javascript\">let arr = [1, 2, 3];\n\nlet [a, b, c] = arr;\n\n// a = 1;\n// b = 2;\n// c = 3;\n</code></pre>\n<h3 id=\"略過某些值\">略過某些值</h3>\n<pre><code class=\"language-javascript\">let [a, , b] = [1, 2, 3];\n\n// a = 1;\n// b = 3;\n</code></pre>\n<h3 id=\"其餘運算\">其餘運算</h3>\n<pre><code class=\"language-javascript\">const [a, ...b] = [1, 2, 3];\n\n// a = 1;\n// b = [2,3];\n</code></pre>\n<hr>\n<h2 id=\"物件\">物件</h2>\n<pre><code class=\"language-javascript\">let obj = {\n  a: '1',\n  b: '2',\n  c: '3',\n};\n\nlet { a, b, c } = obj;\n\n// a = 1;\n// b = 2;\n// c = 3;\n</code></pre>\n<h3 id=\"其餘運算\">其餘運算</h3>\n<pre><code class=\"language-javascript\">let { a, ...b } = [1, 2, 3];\n\n// a = 1;\n// b = {b: &quot;2&quot;, c: &quot;3&quot;};\n</code></pre>\n<hr>\n<h2 id=\"函式\">函式</h2>\n<pre><code class=\"language-javascript\">function add([x, y]) {\n  return x + y;\n}\n\nadd([1, 2]); // 3\n</code></pre>\n<pre><code class=\"language-javascript\">function example() {\n  return [1, 2, 3];\n}\nlet [a, b, c] = example();\n\n// a = 1;\n// b = 2;\n// c = 3;\n</code></pre>\n<pre><code class=\"language-javascript\">function example() {\n  return {\n    foo: 1,\n    bar: 2,\n  };\n}\nlet { foo, bar } = example();\n\n// foo = 1;\n// bar = 2;\n</code></pre>\n<hr>\n<h2 id=\"用於遍歷(traversal)-map-結構\">用於遍歷(traversal) Map 結構</h2>\n<pre><code class=\"language-javascript\">const map = new Map();\nmap.set('first', 'hello');\nmap.set('second', 'world');\n\nfor (let [key, value] of map) {\n  console.log(key + ' is ' + value);\n}\n// first is hello\n// second is world\n</code></pre>\n<p>若只是取得其中一個值，可以寫成這樣</p>\n<pre><code class=\"language-javascript\">// 取得 key 值\nfor (let [key] of map) {\n  // ...\n}\n\n// 取得 value 值\nfor (let [, value] of map) {\n  // ...\n}\n</code></pre>\n<hr>\n<h2 id=\"引用外部檔案\">引用外部檔案</h2>\n<pre><code class=\"language-javascript\">const { SourceMapConsumer, SourceNode } = require('source-map');\n</code></pre>\n<p>以上是將一些常用的方式記錄下</p>\n<p>更詳細的使用方式可觀看 <a target='_blank' href=\"https://es6.ruanyifeng.com/#docs/destructuring\">变量的解构赋值</a></p>\n"},{"directory":"js","layout":"JavaScript","slug":"js_export_csv_line","title":"JS 匯出 CSV 破版","date":"2021/05/23","categories":["JavaScript"],"tags":["JavaScript","ES6"],"summary":"專案裡有很多需要把表格下載成 CSV 檔，最近出現了 CSV 破版的問題情境如下：原本某個儲存格裡面的內容裡面有換行，匯出成CSV時，照理說，換行應該是在當下儲存格做換行，沒想到卻變成了這樣 QQ資料","content":"<p>專案裡有很多需要把表格下載成 CSV 檔，最近出現了 CSV 破版的問題</p>\n<p>情境如下：</p>\n<p>原本某個儲存格裡面的內容裡面有換行，匯出成CSV時，照理說，換行應該是在當下儲存格做換行，沒想到卻變成了這樣 QQ</p>\n<img src=\"assets/images/js/js_export_csv_line/csv1.png\"  loading=\"lazy\" />\n<hr>\n<h2 id=\"資料來源\">資料來源</h2>\n<img src=\"assets/images/js/js_export_csv_line/data1.png\" />\n<p>在資料來源裡，可以看到，換行的地方是 <code>\\n</code> 因為這個<code>\\n</code> 而導致CSV下載後破版 直接換了新一的行</p>\n<hr>\n<h2 id=\"資料處理\">資料處理</h2>\n<p>過程中踩了許多雷\n使用過 JSON.stringify 轉字串，在 <code>\\n</code> + 加雙引號 = <code>&quot;\\n&quot;</code> 失敗\n或是把<code>\\n</code>取代為空白 都不行</p>\n<p>最後 才找到了到 要在當下的儲存格裡的字串外要「再」包一層 雙引號 才成功</p>\n<p>如下圖\n<img src=\"assets/images/js/js_export_csv_line/data2.png\" /></p>\n<img src=\"assets/images/js/js_export_csv_line/csv2.png\" />\n<p>附上 codeapen 可以下載來玩玩看哦!</p>\n<iframe src=\"//codepen.io/mtw/embed/mdWWKyX/\"></iframe>\n"},{"directory":"js","layout":"JavaScript","slug":"js_fn","title":"JS 常用 function 整理","date":"2019/03/15","categories":["JavaScript"],"tags":["JavaScript"],"summary":"此篇不定時更新, 便利健忘的自己 XD轉 emoji 編碼hex2char = function (code) {  if (!code) return '';  var _hex2char = fu","content":"<p>此篇不定時更新, 便利健忘的自己 XD</p>\n<h2 id=\"轉-emoji-編碼\">轉 emoji 編碼</h2>\n<pre><code class=\"language-javascript\">hex2char = function (code) {\n  if (!code) return '';\n  var _hex2char = function (hex) {\n    var result = '',\n      n = parseInt(hex, 16);\n    if (n &lt;= 0xffff) {\n      result += String.fromCharCode(n);\n    } else if (n &lt;= 0x10ffff) {\n      n -= 0x10000;\n      result += String.fromCharCode(0xd800 | (n &gt;&gt; 10)) + String.fromCharCode(0xdc00 | (n &amp; 0x3ff));\n    }\n    return result;\n  };\n  return code.replace(/\\\\u([A-Fa-f0-9]{4})/g, function (matchstr, parens) {\n    return _hex2char(parens);\n  });\n};\n</code></pre>\n<hr>\n<h2 id=\"數字在特定長度中補-0\">數字在特定長度中補 0</h2>\n<ul>\n<li>利用 10 的次方特性產生需要的長度 再加上本身數字 再利用字串特性移除掉第一位數字</li>\n</ul>\n<pre><code class=\"language-javascript\">function getZero(str, len) {\n  return (Math.pow(10, len) + str + '').substr(1);\n}\n</code></pre>\n<hr>\n<h2 id=\"亂數取值\">亂數取值</h2>\n<pre><code class=\"language-javascript\">function getRandom(min, max) {\n  return Math.round(Math.random() * (max - min) + min);\n}\n</code></pre>\n<hr>\n<h2 id=\"數字加逗號(千分位進位)\">數字加逗號(千分位進位)</h2>\n<pre><code class=\"language-javascript\">function getNumFormat(num) {\n  num = num + '';\n  return num.replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, ',');\n}\n</code></pre>\n<hr>\n<h2 id=\"網址解析\">網址解析</h2>\n<pre><code class=\"language-javascript\">function getQS(url) {\n  url = url == null ? window.location.href : url;\n  var search = url.substring(url.lastIndexOf('?') + 1);\n  var obj = {};\n  var reg = /([^?&amp;=]+)=([^?&amp;=]*)/g;\n  search.replace(reg, function (rs, $1, $2) {\n    var name = decodeURIComponent($1);\n    var val = decodeURIComponent($2);\n    val = String(val);\n    obj[name] = val;\n    return rs;\n  });\n  return obj;\n}\n</code></pre>\n<hr>\n<h2 id=\"檔案大小單位轉換\">檔案大小單位轉換</h2>\n<pre><code class=\"language-js\">function readablizeBytes(bytes) {\n  var s = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\n  var e = Math.floor(Math.log(bytes) / Math.log(1024));\n  return (bytes / Math.pow(1024, Math.floor(e))).toFixed(2) + ' ' + s[e];\n}\n</code></pre>\n"},{"directory":"js","layout":"JavaScript","slug":"js_gotop","title":"拋棄 jQuery 用 JS 寫一個 gotop (回到最上) 功能吧!","date":"2021/05/10","categories":["JavaScript"],"tags":["JavaScript","ES6","components"],"summary":"jQuery 寫法var $gotop = $('.gotop');var $body = $('body, html');$gotop.on('click', function () {  $bod","content":"<h2 id=\"jquery-寫法\">jQuery 寫法</h2>\n<pre><code class=\"language-js\">var $gotop = $('.gotop');\nvar $body = $('body, html');\n$gotop.on('click', function () {\n  $body.stop().animate({ scrollTop: 0 }, 500, 'swing');\n});\n</code></pre>\n<p>jQuery 裡有提供一些動畫的函式庫 <code>animate</code> 讓使用者直接使用，所以短短幾行就能搞定\n了</p>\n<hr>\n<h2 id=\"js\">JS</h2>\n<p>但為了一個 gotop 的功能 掛上一支 jQuery，實在有點不滑算，所以這裡使用了原生的 JS\n來寫出相同效果的 gotop</p>\n<p>在 JS 裡 有提供一個 window.scrollTo 的 event</p>\n<p><a target='_blank' href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/scrollTo\">Window.scrollTo()</a></p>\n<blockquote>\n<p>雖然文件上有寫支援 Safari 但我實測是不行的 MAC &amp; IPHONE 都是</p>\n</blockquote>\n<p>為了讓所有的瀏覽器都可以支援 scroll 所以寫了一個 scroll 的 event</p>\n<pre><code class=\"language-js\">// 網頁載入完後執行\nvar ready = callback =&gt; {\n  if (document.readyState != 'loading') callback();\n  else document.addEventListener('DOMContentLoaded', callback);\n};\n\nready(event =&gt; {\n  // 捲軸滾動效果\n  const scrollTo = (element, to, duration) =&gt; {\n    if (duration &lt;= 0) {\n      return;\n    }\n    var difference = to - element.scrollTop;\n    var perTick = (difference / duration) * 10;\n\n    setTimeout(() =&gt; {\n      element.scrollTop = element.scrollTop + perTick;\n      if (element.scrollTop === to) {\n        return;\n      }\n      scrollTo(element, to, duration - 10);\n    }, 10);\n  };\n\n  //\n  var gotop = document.querySelector('.gotop');\n  var body = document.querySelector('body, html');\n\n  gotop.addEventListener('click', () =&gt; {\n    scrollTo(body, 0, 500);\n  });\n});\n</code></pre>\n<p>實作如下：</p>\n<iframe src=\"//codepen.io/mtw/embed/BapXKmz/\"></iframe>\n<hr>\n<h2 id=\"css\">CSS</h2>\n<p>題外話，在 CSS 裡 現在也支援了 scroll 的效果，但目前支援的瀏覽器並不多，所以目前\n應該還算是個中看不中用的屬性 XD</p>\n<p>範例如下，在 CSS 裡加上 smooth，就會很平順的滑動了，就是這麼簡單 XD</p>\n<pre><code class=\"language-html\">&lt;main id=&quot;top&quot;&gt;\n  &lt;section&gt;1&lt;/section&gt;\n  &lt;section&gt;2&lt;/section&gt;\n&lt;/main&gt;\n&lt;a target='_blank' href=&quot;#top&quot; class=&quot;gotop&quot;&gt;TOP&lt;/a&gt;\n</code></pre>\n<pre><code class=\"language-css\">html,\nbody {\n  scroll-behavior: smooth;\n}\n</code></pre>\n<p>smooth 目前支援的瀏覽器可以參考這裡\n<a target='_blank' href=\"https://caniuse.com/?search=scroll-behavior\">caniuse</a></p>\n"},{"directory":"js","layout":"JavaScript","slug":"js_hoisting","title":"JS hoisting (變數提升)","date":"2017/07/20","categories":["JavaScript"],"tags":["JavaScript"],"summary":"foo();function foo(){  console.log(1);}var foo = function(){  console.log(2);}function foo(){  conso","content":"<pre><code class=\"language-javascript\">foo();\n\nfunction foo(){\n  console.log(1);\n}\nvar foo = function(){\n  console.log(2);\n}\nfunction foo(){\n  console.log(3);\n}\n\nfoo();\n</code></pre>\n<p>所得到的結果依續會是\n** 3 **<br>\n** 2 **</p>\n<p>根據js的特性\n一般在全域範圍裡</p>\n<p>不管function寫在哪裡 整段函式都會被自動提升到最上面\n當然var也是 但是var只會提升變數名稱 而後面的值並不會\n所以 當 var裡面的變數還沒有值的時後 回傳的值就會是undefined</p>\n<p>以上面這段code來說 第一個foo 會依據js逐行讀取的特性 所得到的結果就會是3\n而第二個foo js所讀取的順序就會是</p>\n<pre><code class=\"language-javascript\">foo();\nfunction foo(){\n  console.log(1);\n}\nvar foo;\nfunction foo(){\n  console.log(3);\n}\nvar foo = function(){\n  console.log(2);\n}\nfoo();\n</code></pre>\n<p>答案就會是 ** 2 **</p>\n"},{"directory":"js","layout":"JavaScript","slug":"js_object_property","title":"JS Object 物件的屬性特徵","date":"2020/11/30","categories":["JavaScript"],"tags":["JavaScript"],"summary":"物件本身var obj = {  a: 1,  b: 2,  c: 3,};console.log('obj', obj);印出來後 如圖所示修改物件裡面屬性的值可以是 obj.a = 4 或 obj","content":"<h2 id=\"物件本身\">物件本身</h2>\n<pre><code class=\"language-javascript\">var obj = {\n  a: 1,\n  b: 2,\n  c: 3,\n};\n\nconsole.log('obj', obj);\n</code></pre>\n<p>印出來後 如圖所示</p>\n<img src=\"assets/images/object_property/01.jpg\"  loading=\"lazy\" />\n<p>修改物件裡面屬性的值可以是 <code>obj.a = 4</code> 或 <code>obj[a] = 4</code> 這兩種方法都可以</p>\n<h2 id=\"進階方式\">進階方式</h2>\n<h3 id=\"object.defineproperty\">Object.defineProperty</h3>\n<p>定義物件裡的屬性 與 調整屬性特徵</p>\n<p>特徵：</p>\n<ol>\n<li>值(value) =&gt; 對應的值是甚麼</li>\n<li>可否寫入(writable) =&gt; 可否進行屬性質的修改</li>\n<li>可否被刪除(configurable) =&gt; 可否可以用 delete 刪除屬性</li>\n<li>可否被列舉(enumerable) =&gt; 可否利用 for…in 迴圈 將物件屬性列舉出來，可以限制\n特定的屬性是否被列舉出來</li>\n</ol>\n<p>實際運用寫法</p>\n<pre><code class=\"language-javascript\">// Object.defineProperty( 物件, 屬性, (參數 = {\n//     value: 修改或是賦予的值,\n//     writable: boolean,\n//     configurable: boolean,\n//     enumerable: boolean,\n//   })\n// );\n</code></pre>\n<hr>\n<p>試著修改 value 看看</p>\n<pre><code class=\"language-javascript\">var obj = {\n  a: 1,\n  b: 2,\n  c: 3,\n};\n\nconsole.log('obj1', obj);\n\nObject.defineProperty(obj, 'a', {\n  value: 4,\n  writable: true,\n  configurable: true,\n  enumerable: true,\n});\n\nconsole.log('obj2', obj);\n</code></pre>\n<img src=\"assets/images/object_property/02.jpg\" />\n<p>會發現，雖然一開始 a 的值還是 1 ，但是展開以後還是 4，表示顯示已經變化過後的值。</p>\n<hr>\n<p>再來修改 <code>writable</code> ( 可否寫入 ) 這個屬性</p>\n<pre><code class=\"language-javascript\">var obj = {\n  a: 1,\n  b: 2,\n  c: 3,\n};\n\nconsole.log('obj1', obj);\n\nObject.defineProperty(obj, 'a', {\n  value: 4,\n  writable: false,\n  configurable: true,\n  enumerable: true,\n});\n\nobj.a = 5;\n\nconsole.log('obj2', obj);\n</code></pre>\n<img src=\"assets/images/object_property/03.jpg\" />\n<p>結果 <code>value</code> 還是一樣為 4 直接跳過 <code>obj.a = 5;</code>，這是屬於靜默的錯誤</p>\n<p>但若改成嚴僅模式來撰寫</p>\n<pre><code class=\"language-javascript\">var obj = {\n  a: 1,\n  b: 2,\n  c: 3,\n};\n\nconsole.log('obj1', obj);\n\nObject.defineProperty(obj, 'a', {\n  value: 4,\n  writable: false,\n  configurable: true,\n  enumerable: true,\n});\n\n(function () {\n  'use strict';\n  obj.a = 5;\n})();\n\nconsole.log('obj2', obj);\n</code></pre>\n<img src=\"assets/images/object_property/04.jpg\" />\n<p>這時後就不是屬於靜默的錯誤，則是會報錯，意思是說你沒有辦法對於不可寫入的值，重新\n賦予一個新的值，而這個錯誤則會導致後面的程式無法繼續執行( 這裡指的是 console.log\n)</p>\n<hr>\n<p>修改 <code>configurable</code> ( 可否刪除 ) 這個屬性</p>\n<pre><code class=\"language-javascript\">var obj = {\n  a: 1,\n  b: 2,\n  c: 3,\n};\n\nconsole.log('obj1', obj);\n\nObject.defineProperty(obj, 'a', {\n  value: 4,\n  writable: false,\n  configurable: true,\n  enumerable: true,\n});\n\nObject.defineProperty(obj, 'b', {\n  configurable: false,\n});\n\ndelete obj.a;\ndelete obj.b;\n\nconsole.log('obj2', obj);\n</code></pre>\n<img src=\"assets/images/object_property/05.jpg\" />\n<p>這時後發現 a 被刪除了 b 還維持著原本的狀態</p>\n<hr>\n<p>修改 <code>enumerable</code> ( 可否被列舉 ) 這個屬性</p>\n<pre><code class=\"language-javascript\">var obj = {\n  a: 1,\n  b: 2,\n  c: 3,\n};\n\nconsole.log('obj1', obj);\n\nObject.defineProperty(obj, 'a', {\n  value: 4,\n  writable: false,\n  configurable: true,\n  enumerable: true,\n});\n\nfor (var key in obj) {\n  console.log('obj1', key);\n}\n\nObject.defineProperty(obj, 'c', {\n  enumerable: false,\n});\n\nconsole.log('obj2', obj);\nfor (var key in obj) {\n  console.log('obj2', key);\n}\n</code></pre>\n<img src=\"assets/images/object_property/06.jpg\" />\n<p>這裡可以看到，我們將 c 的 <code>enumerable</code> 改成 <code>false</code> 後，這個列舉( 跑 for in 迴圈\n後 )就不會出現 c</p>\n<hr>\n<h2 id=\"新增屬性\">新增屬性</h2>\n<pre><code class=\"language-javascript\">var obj = {\n  a: 1,\n  b: 2,\n  c: 3,\n};\n\nconsole.log('obj1', obj);\n\nObject.defineProperty(obj, 'd', {\n  value: {},\n  writable: false,\n});\n\nobj.d = 6; // 無法改變值\nobj.d.aa = 7; // 值可被賦予;\n\nconsole.log('obj2', obj);\n</code></pre>\n<img src=\"assets/images/object_property/07.jpg\" />\n<p>由此可見 <code>defineProperty</code> 它只能對當下這個屬性做限制，假設他是一個物件的時後，就\n無法對於裡面的直屬性能做限制，所以它只能做到<code>淺層保護</code></p>\n<hr>\n<h3 id=\"object.defineproperties\">Object.defineProperties</h3>\n<p>可以一次定義大量屬性</p>\n<p>寫法</p>\n<pre><code class=\"language-javascript\">// Object.defineProperties(物件, {\n//  屬性: {\n//    特徵1: ...,\n//    特徵2: ...,\n//    特徵3: ...,\n//    特徵4: ...,\n//  }\n// })\n</code></pre>\n<pre><code class=\"language-javascript\">var obj = {\n  a: 1,\n  b: 2,\n  c: 3,\n};\n\nconsole.log('obj1', obj);\n\nObject.defineProperties(obj, {\n  a: {\n    value: 4,\n    writable: false,\n  },\n  b: {\n    configurable: false,\n  },\n});\n\nobj.a = 5;\ndelete obj.b;\ndelete obj.c;\n\nconsole.log('obj2', obj);\n</code></pre>\n<img src=\"assets/images/object_property/08.jpg\" />\n<p>看!!! 是不是方便多了!</p>\n"},{"directory":"js","layout":"JavaScript","slug":"js_scopechain","title":"JS scope chain (範圍鏈)","date":"2017/07/18","categories":["JavaScript"],"tags":["JavaScript"],"summary":"function b() {  console.log(myVar);}function a() {  var myVar = 2;  b();}var myVar = 1;a();得到的結果會是**","content":"<pre><code class=\"language-javascript\">function b() {\n  console.log(myVar);\n}\nfunction a() {\n  var myVar = 2;\n  b();\n}\nvar myVar = 1;\na();\n</code></pre>\n<p>得到的結果會是\n** 1 **<br>\n為什麼呢?<br>\n因為 function a、function b、var myVar = 1;\n都是在同一個階層裡被宣告，以一般來說 如果外面沒有包任何東西 就是在全域裡被宣告<br>\n所以 b 函式在執行的時後 會往外一層是尋找 myVar 的變數，就算 b 函式被丟到 a 函式裡執行也是一樣<br>\n並不會因為 b 函式在 a 函式裡被執行 就會去讀 a 函式裡被設定的 myVar 變數</p>\n<hr>\n<pre><code class=\"language-javascript\">function a() {\n  function b() {\n    console.log(myVar);\n  }\n  var myVar = 2;\n  b();\n}\nvar myVar = 1;\na();\nb();\n</code></pre>\n<p>得到的結果會是\n** 2 **<br>\n** <span style=\"color:red;\">ReferenceError: b is not defined</span>**<br>\n因為 b 函式是在 a 函式裡被宣告，所以在 a 函式裡執行的 b 會往外一層(也就是 a 層)找 myVar 變數，<br>\n當 a 函式被執行時 b 所得到的變數就會是 2<br>\n但因 b 函式是在 a 函式裡被宣告 所以 b 函式的作用範圍也就只有在 a 函式裡<br>\n自然他在其他地方被呼叫的時後 就會出現 error</p>\n<hr>\n<pre><code class=\"language-javascript\">function a() {\n  function b() {\n    console.log(myVar);\n  }\n  b();\n}\nvar myVar = 1;\na();\n</code></pre>\n<p>得到的結果會是\n** 1 **\n當 b 函式找不到他外部環境(也就是 a 層)所設定的變數時<br>\n它就會再往外面一層去尋找，相同名字的變數</p>\n<p>結論：函式(function)不會因為在哪裡被執行就會被隨意的改變外部環境(有點繞舌啊</p>\n"},{"directory":"js","layout":"JavaScript","slug":"js_template-strings","title":"JS Template Strings ( 模版字串 / 樣版字串 )","date":"2020/12/08","categories":["JavaScript"],"tags":["JavaScript","ES6"],"summary":"過去寫法 以 jquery 為例$('#result').append(  'There are &lt;b&gt;' + basket.count + '&lt;/b&gt; ' + 'items ","content":"<p>過去寫法 以 jquery 為例</p>\n<pre><code class=\"language-js\">$('#result').append(\n  'There are &lt;b&gt;' + basket.count + '&lt;/b&gt; ' + 'items in your basket, ' + '&lt;em&gt;' + basket.onSale + '&lt;/em&gt; are on sale!'\n);\n</code></pre>\n<p>上面這種寫法相當繁鎖不方便，ES6 引入了樣版字串解決這個問題</p>\n<pre><code class=\"language-js\">$('#result').append(`\n  There are &lt;b&gt;${basket.count}&lt;/b&gt; items\n   in your basket, &lt;em&gt;${basket.onSale}&lt;/em&gt;\n  are on sale!\n`);\n</code></pre>\n<hr>\n<pre><code class=\"language-js\">// 普通字串\n`In JavaScript '\\n' is a line-feed.` // 多行字串\n`In JavaScript this is\n not legal.`;\n\n// 字串裡嶔入變數\nlet name = 'Bob',\n  time = 'today';\n`Hello ${name}, how are you ${time}?`;\n</code></pre>\n<p>如果在字串裡需要使用到反引號，則前面要用反斜線(逃役字元)轉義</p>\n<pre><code class=\"language-js\">let greeting = `\\`Yo\\` World!`;\n</code></pre>\n<p>所有樣版字串 在使用多行字串時，所有的空格與縮排都是會被保留的，若不想要這個換行 可以使用 <code>trim</code> 移除它</p>\n<pre><code class=\"language-js\">$('#list').html(\n  `\n&lt;ul&gt;\n  &lt;li&gt;first&lt;/li&gt;\n  &lt;li&gt;second&lt;/li&gt;\n&lt;/ul&gt;\n`.trim()\n);\n</code></pre>\n<hr>\n<p>在樣版字串裡 嶔入變數，需要將變數寫在 <code>${}</code> 之中</p>\n<pre><code class=\"language-js\">let name = 'Bob',\n  time = 'today';\n\n// 過去寫法\n'Hello ' + name + ', how are you ' + time + '?' \n\n// es6\n`Hello ${name}, how are you ${time}?`;\n</code></pre>\n<hr>\n<p>大括號內可以放入任意的 js 表達式，可以用來運算</p>\n<pre><code class=\"language-js\">let x = 1;\nlet y = 2;\n\n`${x} + ${y} = ${x + y}` // &quot;1 + 2 = 3&quot;\n`${x} + ${y * 2} = ${x + y * 2}`;  // &quot;1 + 4 = 5&quot;\n\nlet obj = { x: 1, y: 2 };\n\n`${obj.x + obj.y}`;\n// &quot;3&quot;\n</code></pre>\n<p>也能用在函數裡</p>\n<pre><code class=\"language-js\">function fn() {\n  return 'Hello World';\n}\n\n`foo ${fn()} bar`;\n// foo Hello World bar\n</code></pre>\n<p>甚至還能用在於</p>\n<pre><code class=\"language-js\">const data = [\n  { first: '&lt;Jane&gt;', last: 'Bond' },\n  { first: 'Lars', last: '&lt;Croft&gt;' },\n];\n\nconst tmpl = (addrs) =&gt; `\n  &lt;table&gt;\n  ${addrs.map((addr) =&gt; `\n    &lt;tr&gt;&lt;td&gt;${addr.first}&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;${addr.last}&lt;/td&gt;&lt;/tr&gt;\n  `).join('')}\n  &lt;/table&gt;\n`;\n\nconsole.log(tmpl(data));\n\n// &lt;table&gt;\n//   &lt;tr&gt;&lt;td&gt;&lt;Jane&gt;&lt;/td&gt;&lt;/tr&gt;\n//   &lt;tr&gt;&lt;td&gt;Bond&lt;/td&gt;&lt;/tr&gt;\n//\n//   &lt;tr&gt;&lt;td&gt;Lars&lt;/td&gt;&lt;/tr&gt;\n//   &lt;tr&gt;&lt;td&gt;&lt;Croft&gt;&lt;/td&gt;&lt;/tr&gt;\n// &lt;/table&gt;\n</code></pre>\n<p>參考資料：\n<a target='_blank' href=\"https://es6.ruanyifeng.com/#docs/string\">字符串的扩展</a>\n<a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Template_literals\">樣板字面值</a></p>\n"},{"directory":"js","layout":"JavaScript","slug":"js_tree-data","title":"樹狀結構的各種處理 (Tree Data Structure)","date":"2021/10/27","categories":["JavaScript"],"tags":["JavaScript"],"summary":"最近為了處理 tree 的樹狀結構多了好幾根白頭髮，囧~~~Tree Data這是一筆 tree (樹) 的資料const data = [  {    id: &quot;1&quot;,    c","content":"<p>最近為了處理 <code>tree</code> 的樹狀結構多了好幾根白頭髮，囧~~~</p>\n<h2 id=\"tree-data\">Tree Data</h2>\n<p>這是一筆 tree (樹) 的資料</p>\n<pre><code class=\"language-json\">const data = [\n  {\n    id: &quot;1&quot;,\n    children: [\n      {\n        id: &quot;1-1&quot;,\n        children: [\n          {\n            id: &quot;1-1-1&quot;,\n            children: [],\n          },\n          {\n            id: &quot;1-1-2&quot;,\n            children: [],\n          },\n        ],\n      },\n      {\n        id: &quot;1-2&quot;,\n        children: [],\n      },\n    ],\n  },\n  {\n    id: &quot;2&quot;,\n    children: [\n      {\n        id: &quot;2-1&quot;,\n        children: [],\n      },\n    ],\n  },\n  {\n    id: &quot;3&quot;,\n    children: [\n      {\n        id: &quot;3-1&quot;,\n        children: [],\n      },\n      {\n        id: &quot;3-2&quot;,\n        children: [\n          {\n            id: &quot;3-2-1&quot;,\n            children: [],\n          },\n          {\n            id: &quot;3-2-2&quot;,\n            children: [],\n          },\n        ],\n      },\n      {\n        id: &quot;3-3&quot;,\n        children: [],\n      },\n    ],\n  },\n  {\n    id: &quot;4&quot;,\n    children: [\n      {\n        id: &quot;4-1&quot;,\n        children: [],\n      },\n    ],\n  },\n];\n</code></pre>\n<hr>\n<h2 id=\"找出-id-裡的資訊\">找出 ID 裡的資訊</h2>\n<pre><code class=\"language-js\">const findNode = function (cond, root = []) {\n  for (const node of root) {\n    if (cond(node) || findNode(cond, node.children)) {\n      return cond(node) ? node : findNode(cond, node.children);\n    }\n  }\n  return null;\n};\n\nconsole.log(\n  &quot;node&quot;,\n  findNode((node) =&gt; node.id === &quot;3-2-1&quot;, data)\n);\n</code></pre>\n<hr>\n<h2 id=\"找出-id-的根目錄\">找出 ID 的根目錄</h2>\n<pre><code class=\"language-js\">const findRoot = function (cond, root = []) {\n  for (const node of root) {\n    if (cond(node) || findNode(cond, node.children)) {\n      return node;\n    }\n  }\n  return null;\n};\n\nconsole.log(\n  &quot;root&quot;,\n  findRoot((node) =&gt; node.id === &quot;3-2-1&quot;, data)\n);\n</code></pre>\n<hr>\n<h2 id=\"列出-id-的路徑\">列出 ID 的路徑</h2>\n<pre><code class=\"language-js\">const findPath = function (cond, root = [], data = [root]) {\n  for (const node of root) {\n    if (cond(node)) {\n      return data;\n    }\n    const path = findPath(cond, node.children, [...data, node.children]);\n    if (!!path) {\n      return path;\n    }\n  }\n  return null;\n};\n\nconsole.log(\n  &quot;root&quot;,\n  findPath((node) =&gt; node.id === &quot;3-2-1&quot;, data)\n);\n</code></pre>\n<p>參考資料：\n<a target='_blank' href=\"https://blog.benoitvallon.com/data-structures-in-javascript/the-tree-data-structure/\">The Tree data structure</a></p>\n"},{"directory":"js","layout":"JavaScript","slug":"js_varlet","title":"JS var 跟 let 差別 (變數宣告)","date":"2017/06/23","categories":["JavaScript"],"tags":["JavaScript","ES6"],"summary":"如何在 for 迴圈裡跑出利用 setTimeout 分別跑出 1~5var 全域變數 ( 在函式的區塊內 )，若找不到會向上查找，直到沒有相同的變數名稱let 區域變數 (es6 新增) 作用區在 ","content":"<blockquote>\n<p>如何在 for 迴圈裡跑出利用 setTimeout 分別跑出 1~5</p>\n</blockquote>\n<ul>\n<li>\n<p>var 全域變數 ( 在函式的區塊內 )，若找不到會向上查找，直到沒有相同的變數名稱</p>\n</li>\n<li>\n<p>let 區域變數 (es6 新增) 作用區在 <code>{}</code> 大括號裡\n沒有 hoisting 的問題</p>\n</li>\n<li>\n<p>const 是唯讀 ( 常數 ) 一旦定義後就無法改變\n宣告時一定要指定初始值 否則會產生 error\n沒有 hoisting 的問題</p>\n</li>\n</ul>\n<hr>\n<p>** 第一次測試 code **</p>\n<pre><code class=\"language-javascript\">for (var i = 0; i &lt; 5; i++) {\n  setTimeout(function () {\n    console.log(i);\n  }, 1000);\n}\n</code></pre>\n<p>一次跑出 5 個 5(不是我們要的</p>\n<hr>\n<p>** 第二次測試 code **</p>\n<pre><code class=\"language-javascript\">for (var i = 0; i &lt; 5; i++) {\n  function timer(t) {\n    setTimeout(function () {\n      console.log(t);\n    }, 1000);\n  }\n  timer(i);\n}\n</code></pre>\n<p>使用閉包特性讓他依續跑出 01234\n但還是一次 show 出來\nps.閉包：在區域範圍裡才起的了做用</p>\n<hr>\n<p>** 第三次測試 code **</p>\n<pre><code class=\"language-javascript\">for (var i = 0; i &lt; 5; i++) {\n  function timer(t) {\n    setTimeout(function () {\n      console.log(t);\n    }, 1000 * i);\n  }\n  timer(i);\n}\n</code></pre>\n<p>補上時間差\nps.因為對 setTimeout 不熟 所以這部份小卡了一下 過程中方向完全錯誤\n問了估狗大神後才知道要在秒數裡 *i 做上時間差 讓迴圈裡面在跑的時後延遲秒數<br>\n不然 for 跟火車一樣不等人</p>\n<hr>\n<p>** 第四次測試 code **</p>\n<pre><code class=\"language-javascript\">for (let i = 0; i &lt; 5; i++) {\n  setTimeout(function () {\n    console.log(i);\n  }, 1000 * i);\n}\n</code></pre>\n<p>把 var 換成 let\n依續跑出 01234\n傑克 這真的是太神奇啦，連閉包用的 function 都不用寫了</p>\n<hr>\n<p>結論\nvar 跑出 for 迴圈的 {}後 東西還是在\nlet 跑出 for 迴圈的 {}後 就 error 了</p>\n"},{"directory":"js","layout":"JavaScript","slug":"typescript","title":"初探 Typescript","date":"2019/05/01","categories":["typescript"],"tags":["JavaScript","typescript"],"summary":"interface 定義型別( 規格 )interface Person {  firstName: string;  lastName: string;}function greeter(perso","content":"<h2 id=\"interface-定義型別(-規格-)\">interface 定義型別( 規格 )</h2>\n<pre><code class=\"language-ts\">interface Person {\n  firstName: string;\n  lastName: string;\n}\n\nfunction greeter(person: Person) {\n  return person.firstName + '' + person.lastName;\n}\n</code></pre>\n<p>繼承</p>\n<pre><code class=\"language-ts\">interface Shape {\n  color: string;\n}\ninterface Square extends Shape {\n  sideLength: number;\n}\n\nfunction greeter(person: Person) {\n  return person.firstName + '' + person.lastName;\n}\n</code></pre>\n<h2 id=\"class-定義類\">class 定義類</h2>\n<p><code>property</code> 預設都是 pubilc，若不想外外部存取的話 要加上 <code>private</code></p>\n<pre><code class=\"language-ts\">class Student{\n  name: string;\n  age: number;\n  prtvate birth: Date;\n}\n\nvar student = new Student();\n</code></pre>\n<p>屬性宣告為 static 在使用時，不需要實體化就能呼叫</p>\n<pre><code class=\"language-ts\">class Student {\n  static type: string;\n}\n\nStudent.type;\n</code></pre>\n<p>給屬性預設值</p>\n<pre><code class=\"language-ts\">class Student {\n  type: string = 'student';\n}\n</code></pre>\n<p>constructor 建構式</p>\n<pre><code class=\"language-ts\">class Student {\n  name: string;\n  age: number\n  constructor( name: string , age: number) {\n    this.name = name;\n    this.age = age;\n  }\n}\n\n// 速寫語法\nclass Student {\n  constructor( public name: string, punlic age: number ){}\n}\n\nvar student = new Student( 'mandy', 18 );\nconsole.log( `Student name: ${ student.name }`, age: ${ student.age } )\n\n</code></pre>\n<hr>\n<h2 id=\"function\">function</h2>\n<p>在 typescript 中 函式呼叫 <code>傳遞的參數</code> 必須與 <code>函數的參數</code> 數量一致，否則會報錯</p>\n<p>解決方式：\n必須要在參數名稱使用 <code>?</code> 標示此參數為 optional\n或是指定預設值</p>\n<p>需注意的是 <code>選擇性參數</code> 或 <code>有預設值的參數</code> 都必需放在 function 的尾端</p>\n<pre><code class=\"language-ts\">function name(firstName: string, lastName?: string) {\n  if (lastName) {\n    return firstName + '' + lastName;\n  } else {\n    return firstName;\n  }\n}\n// or\nfunction name(firstName: string, lastName: string = '') {\n  if (lastName) {\n    return firstName + '' + lastName;\n  } else {\n    return firstName;\n  }\n}\n\nvar result1 = name('mandy', 'wang');\nvar result2 = name('mandy');\n</code></pre>\n<p>略略的記錄到這邊 coming soon…</p>\n<hr>\n<p>更多的參考文件…\n<a target='_blank' href=\"https://github.com/kkbruce/TypeScript/blob/master/doc/zh-tw/Handbook.md#3.1\">https://github.com/kkbruce/TypeScript/blob/master/doc/zh-tw/Handbook.md#3.1</a>\n<a target='_blank' href=\"https://www.tslang.cn/index.html\">https://www.tslang.cn/index.html</a></p>\n"},{"directory":"JS30","layout":"JavaScript","slug":"01_JavaScript-Drum-Kit","title":"JS30：01_JavaScript Drum Kit","date":"2018/12/01","categories":["JS30"],"tags":["JavaScript","JavaScript 30 天"],"summary":"JavaScript Drum Kit (鍵盤打鼓)摘要了解鍵盤監聽事件 keyCode(鍵盤數字代碼)鍵盤與聲音對應畫面顯示所按到的鍵 (更改樣式)CSS 排版此次排版主要是以 flex 為主FLE","content":"<h1 id=\"javascript-drum-kit-(鍵盤打鼓)\">JavaScript Drum Kit (鍵盤打鼓)</h1>\n<h2 id=\"摘要\">摘要</h2>\n<ul>\n<li>了解鍵盤監聽事件 keyCode(鍵盤數字代碼)</li>\n<li>鍵盤與聲音對應</li>\n<li>畫面顯示所按到的鍵 (更改樣式)</li>\n</ul>\n<h2 id=\"css-排版\">CSS 排版</h2>\n<p>此次排版主要是以 flex 為主\n<a target='_blank' href=\"https://darekkay.com/dev/flexbox-cheatsheet.html\">FLEX 速查小抄</a></p>\n<h2 id=\"查詢鍵盤數字代碼\">查詢鍵盤數字代碼</h2>\n<pre><code class=\"language-js\">window.addEventListener('keydown',function(e){\n  console.log(e.keyCode)\n});\n</code></pre>\n<p><a target='_blank' href=\"http://keycode.info/\">key code 速查</a></p>\n<hr>\n<h2 id=\"windows-監聽事件\">windows 監聽事件</h2>\n<pre><code class=\"language-javascript\">function playSound(e) {\n  const audio = document.querySelector(`audio[data-key=&quot;${e.keyCode}&quot;]`);\n  const key = document.querySelector(`.key[data-key=&quot;${e.keyCode}&quot;]`);\n  //如果沒有audio這個元素 則返回\n  if (!audio) return;\n  audio.currentTime = 0;\n  audio.play();\n  key.classList.add('playing');\n}\n\nwindow.addEventListener('keydown', playSound);\n</code></pre>\n<h4 id=\"es6-語法\">es6 語法</h4>\n<ul>\n<li><code>cosnt</code> 是 es6 裡新增的變數宣告 可參照 <a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/const\">MDN-const</a></li>\n<li>es6 語法糖</li>\n</ul>\n<pre><code class=\"language-javascript\">const audio = document.querySelector(`audio[data-key=&quot;${e.keyCode}&quot;]`);\n`字符串 ${變數}`;\n\n// es6過去寫法\nvar audio = document.querySelector('audio[data-key=&quot;' + e.keyCode + '&quot;]');\n</code></pre>\n<h4 id=\"音效處理\">音效處理</h4>\n<p>當按下音效播放時 正在播放的音效 在還沒結束時 所按下的其他音效都會無效\n因此需要設定重置撥放時間 <code>audio.currentTime = 0</code></p>\n<ul>\n<li>\n<p><code>currentTime</code> 可參照<a target='_blank' href=\"http://www.w3school.com.cn/tags/av_prop_currenttime.asp\">HTML 5 Audio/Video DOM currentTime</a></p>\n<p><a target='_blank' href=\"http://www.w3school.com.cn/tags/html_ref_audio_video_dom.asp\">HTML 5 影片/音效參考手冊</a></p>\n</li>\n<li>\n<p>按下後 使對應的 div 加上<code>playing</code>樣式 產生 css 所寫好的特效\n<code>classList</code> <a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Element/classList\">Element.classList</a></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"打完後-移除-css-所產生的樣式\">打完後 移除 css 所產生的樣式</h2>\n<pre><code class=\"language-javascript\">function removeTransition(e) {\n  if (e.propertyName !== 'transform') return;\n  this.classList.remove('playing');\n}\n\nconst keys = document.querySelectorAll('.key');\nkeys.forEach((key) =&gt; key.addEventListener('transitionend', removeTransition));\n</code></pre>\n<h4 id=\"es6-語法\">es6 語法</h4>\n<ul>\n<li>箭頭函式</li>\n</ul>\n<pre><code class=\"language-javascript\">keys.forEach((key) =&gt; key.addEventListener('transitionend', removeTransition));\n\n// 拆解開後\nkeys.forEach((key, val) =&gt; {\n  key.addEventListener('transitionend', removeTransition);\n});\n\n// es6前寫法\nkeys.forEach(function (key, val) {\n  key.addEventListener('transitionend', removeTransition);\n});\n</code></pre>\n<p><code>forEach</code> 可參照 <a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\">MDN-Array.prototype.forEach()</a></p>\n<p><code>transitionend</code> 效果結束後觸發 <a target='_blank' href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/transitionend\">MDN-transitionend</a></p>\n<p><a target='_blank' href=\"https://www.youtube.com/watch?v=VuN8qwZoego\">YOUTUBE 影片教學連結</a></p>\n"},{"directory":"JS30","layout":"JavaScript","slug":"02_JS-and-CSS-Clock","title":"JS30：02_JS and CSS Clock","date":"2018/12/02","categories":["JS30"],"tags":["JavaScript","JavaScript 30 天"],"summary":"JS and CSS Clock (時鐘)摘要認識 css transform與 transition 調整時鐘指針使用new Date()來讀取當前的時間認識setInterval()計時CSS 處","content":"<h1 id=\"js-and-css-clock-(時鐘)\">JS and CSS Clock (時鐘)</h1>\n<h2 id=\"摘要\">摘要</h2>\n<ul>\n<li>認識 css <code>transform</code>與 <code>transition</code> 調整時鐘指針</li>\n<li>使用<code>new Date()</code>來讀取當前的時間</li>\n<li>認識<code>setInterval()</code>計時</li>\n</ul>\n<h2 id=\"css-處理\">CSS 處理</h2>\n<pre><code class=\"language-js\">border-radius: 40%;\ntransform-origin: 100%;\ntransform: rotate(90deg);\ntransition: all 0.05s;\ntransition-timing-function: cubic-bezier(0.1, 2.7, 0.58, 1)\n</code></pre>\n<ul>\n<li>\n<p><code>transform</code> css 變形\n<code>transform-oragin</code> 設定變形軸心\n<code>transform:rotate(90deg)</code> 旋轉物件角度，正值為順時針，負值為逆時針</p>\n</li>\n<li>\n<p><code>transition</code> css 過場處理 可參照<a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions\">MDN-CSS transition</a></p>\n<p><code>transition: all 0.05s;</code> 調整指針跳動效果</p>\n</li>\n</ul>\n<p>一開始在畫指針時是呈現水平狀態，為了讓指針停留在 00:00:00 所以必需旋轉 90 度。\n另外 筆者稍微調整了一下時鐘上的指針 所以加上了 <code>border-radius: 40%;</code></p>\n<h2 id=\"javascript\">JAVASCRIPT</h2>\n<p><code>new Date()</code> 使用方式 <a target='_blank' href=\"http://www.w3school.com.cn/jsref/jsref_obj_date.asp\">JavaScript Date 用法</a></p>\n<p><code>setInterval( 函式, 毫秒 )</code> 自動重覆執行，適合用來做計數器\n另外還有 <code>setTimeout</code> 的用法</p>\n<h2 id=\"後記\">後記</h2>\n<p>Wes Bos 有提到 當 59 秒後 指針會回到 0 度 往前彈的小 bug\n為了避免這個 bug\n我在宣告時做了些處理</p>\n<p>原本宣告</p>\n<pre><code class=\"language-javascript\">const seconds = now.getSeconds();\n</code></pre>\n<p>改</p>\n<pre><code class=\"language-javascript\">const seconds = (now.getSeconds() === 0 ) ? 60 : now.getSeconds();\n</code></pre>\n<p>當秒數為 0 秒時 則使用 60 秒取代 其他就是以當下秒數計算\n避免有 0 度的產生</p>\n<p>另外 網路上也看到有人做其他的處理方式\n當 0 秒時，把過場的時間改為 0 也是可以的</p>\n<p><a target='_blank' href=\"https://www.youtube.com/watch?v=xu87YWbr4X0\">YOUTUBE 影片教學連結</a></p>\n"},{"directory":"JS30","layout":"JavaScript","slug":"03_CSS-Variables","title":"JS30：03_CSS Variables","date":"2018/12/03","categories":["JS30"],"tags":["JavaScript","JavaScript 30 天"],"summary":"CSS Variables (CSS 變數)這次認識到 input 裡更多的 type 屬性 range 、 color 因為平常不太會用到 所以特別去查了一下原來是 html5 裡新增的屬性 可參照","content":"<h1 id=\"css-variables-(css-變數)\">CSS Variables (CSS 變數)</h1>\n<p>這次認識到 input 裡更多的 type 屬性 <code>range</code> 、 <code>color</code> 因為平常不太會用到 所以特別去查了一下\n原來是 html5 裡新增的屬性 可參照 <a target='_blank' href=\"http://www.w3school.com.cn/html5/att_input_type.asp\">HTML5 input type 屬性</a></p>\n<h2 id=\"摘要\">摘要</h2>\n<ul>\n<li>了解 css 變數</li>\n<li>利用 js 綁定監聽 input 變動的值 對應到頁面中的 img 元素 達到即時調整的效果</li>\n</ul>\n<h2 id=\"css-變數宣告\">css 變數宣告</h2>\n<pre><code class=\"language-scss\">//宣告變數\n:root{\n  --base: #70653e;\n  --spacing: 10px;\n  --blur: 10px;\n}\n\n//在使用時\nimg{\n  padding: var(--spacing);\n  background: var(--base);\n  filter: blur(var(--blur));\n}\n\n</code></pre>\n<p>CSS 變數宣告可參照 <a target='_blank' href=\"http://www.cnblogs.com/coco1s/p/6068522.html\">引人注目的 CSS 變數（CSS Variable）</a> 有更詳細的解說</p>\n<p>這次是使用 <code>filter</code> CSS 濾鏡\n更多 css 濾鏡介紹\n<a target='_blank' href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter\">MDN-filter</a>\n<a target='_blank' href=\"https://css-tricks.com/almanac/properties/f/filter/\">CSS-Tricks_filter</a></p>\n<h2 id=\"js\">JS</h2>\n<p>利用 addEventListener 偵聽事件</p>\n<blockquote>\n<p><code>dataset</code> 獲取 data 值 相當於 <code>getAttribute</code></p>\n</blockquote>\n<pre><code class=\"language-javascript\">const suffix = this.dataset.sizing || '';\n//const suffix = this.getAttribute('data-sizing') || '';\n</code></pre>\n<p><a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/HTMLElement/dataset\">MDN-HTMLElement.dataset</a>\n<a target='_blank' href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getAttribute\">MDN-Element.getAttribute()</a></p>\n<blockquote>\n<p>使用<code>setProperty</code> 可以在 js 裡 把 css 屬性當做變數</p>\n</blockquote>\n<pre><code class=\"language-javascript\">document.documentElement.style.setProperty('padding' , '10px');\n// document.documentElement.style.padding = '10px';\n</code></pre>\n<p><a target='_blank' href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CSSStyleDeclaration/setProperty\">MDN-CSSStyleDeclaration.setProperty()</a></p>\n<ul>\n<li>js裡 寫css的style需要再手動加上單位，它並不會像jquery這麼人性化的自動幫你加上哦 (雷～</li>\n</ul>\n<h2 id=\"後記\">後記</h2>\n<p>可以在 css 裡使用變數算蠻新的使用方式\n瀏覽器目前還沒那麼泛用，且通常都在 scss 裡就把變數處理掉了\n所以目前處於知道就好的狀態</p>\n<p><a target='_blank' href=\"https://www.youtube.com/watch?v=AHLNzv13c2I\">YOUTUBE 影片教學連結</a></p>\n"},{"directory":"JS30","layout":"JavaScript","slug":"04_Array-Cardio-Day-1","title":"JS30：04_Array Cardio Day 1","date":"2019/01/16","categories":["JS30"],"tags":["JavaScript","JavaScript 30 天"],"summary":"Array Cardio (陣列練習)摘要此次主要是練習陣列的一些用法分別有八個例子作者一開始在 html 上提供了三組資料給大家練習inventors是一組是發明家的列表 裡面包含 姓、名、出生年份","content":"<h1 id=\"array-cardio-(陣列練習)\">Array Cardio (陣列練習)</h1>\n<h2 id=\"摘要\">摘要</h2>\n<p>此次主要是練習陣列的一些用法\n分別有八個例子\n作者一開始在 html 上提供了三組資料給大家練習</p>\n<p><code>inventors</code>是一組是發明家的列表 裡面包含 姓、名、出生年份、死亡年份</p>\n<p>練習的題目依序是</p>\n<ul>\n<li>篩選出 <code>1500年 ~ 1600</code>前出生的人 (filter)</li>\n<li>將<code>inventors</code>陣列裡的 <code>first</code> 跟 <code>last</code> 串起來 (map)</li>\n<li>按出生日期排列，由小到大 (sort)</li>\n<li>計算出所有發明家共活了多少年 (reduce)</li>\n<li>按照發明家活了多少年來排序 (sort)</li>\n<li>從作者提供的維基網址裡 篩選出 含有<code>de</code>的路名 ( map 與 filter 整合應用 )</li>\n<li>對發明家的姓氏進行排列 (sort)</li>\n<li>計算出<code>data</code>陣列裡每個種類的數量 (reduce)</li>\n</ul>\n<blockquote>\n<p>這次也認識到了 <code>console.table</code> 的用法 幫你將陣列用表格排列 比<code>console.log</code>可視性高多了</p>\n</blockquote>\n<h2 id=\"filter-陣列過濾操作\">filter 陣列過濾操作</h2>\n<h3 id=\"篩選出-1500-年-~-1600-前出生的人\">篩選出 1500 年 ~ 1600 前出生的人</h3>\n<pre><code class=\"language-javascript\">const fifteen = inventors.filter(function (inventor) {\n  if (inventor.year &gt;= 1500 &amp;&amp; inventor.year &lt; 1600) {\n    return true;\n  }\n});\n\n// 簡化成箭頭函式後的寫法\nconst fifteen = inventors.filter(\n  (inventor) =&gt; inventor.year &gt;= 1500 &amp;&amp; inventor.year &lt; 1600\n);\n</code></pre>\n<p><a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">MDN-Array.prototype.filter()</a></p>\n<h2 id=\"map\">map</h2>\n<h3 id=\"將-inventors-陣列裡的-first-跟-last-串起來\">將 inventors 陣列裡的 first 跟 last 串起來</h3>\n<pre><code class=\"language-javascript\">const fullname = inventors.map(function (inventor) {\n  return inventor.first + &quot; &quot; + inventor.last;\n});\n</code></pre>\n<p>透過 map 的組合 組成一個新的陣列;\n<a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">MDN-Array.prototype.map()</a></p>\n<h2 id=\"sort-排序\">sort 排序</h2>\n<h3 id=\"按出生日期排列，由小到大\">按出生日期排列，由小到大</h3>\n<pre><code class=\"language-javascript\">const ordered = inventors.sort(function (a, b) {\n  if (a.year &gt; b.year) {\n    return 1;\n  } else {\n    return -1;\n  }\n});\n\n// 簡化成三元運算\nconst ordered = inventors.sort((a, b) =&gt; (a.year &gt; b.year ? 1 : -1));\n\n// 另一種表示\nconst ordered = inventors.sort((a, b) =&gt; a.year - b.year);\n</code></pre>\n<h3 id=\"按照發明家活了多少年來排序-(數字排序)\">按照發明家活了多少年來排序 (數字排序)</h3>\n<pre><code class=\"language-javascript\">const oldest = inventors.sort(function (a, b) {\n  const lastGuy = a.passed - a.year;\n  const nextGuy = b.passed - b.year;\n  return lastGuy &gt; nextGuy ? 1 : -1;\n});\n</code></pre>\n<h3 id=\"對發明家的姓氏進行排列-(字串排序)\">對發明家的姓氏進行排列 (字串排序)</h3>\n<pre><code class=\"language-javascript\">// 作者的寫法\nconst alpha = people.sort(function (lastOne, nextOne) {\n  const [alast, afirst] = lastOne.split(&quot;, &quot;);\n  const [blast, bfirst] = nextOne.split(&quot;, &quot;);\n  return alast &gt; blast ? -1 : 1;\n});\n\n// 我的寫法\nconst alpha = people.sort(function (a, b) {\n  return a.split(&quot;, &quot;)[0] &gt; b.split(&quot;, &quot;)[0] ? -1 : 1;\n});\n</code></pre>\n<p>其實有點不太能理解作者為什麼會這樣寫 大概是為了再順便介紹 <code>split</code>的應用吧</p>\n<p><a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">MDN-Array.prototype.sort()</a></p>\n<h2 id=\"reduce-加總、分類\">reduce 加總、分類</h2>\n<h3 id=\"計算出所有發明家共活了多少年\">計算出所有發明家共活了多少年</h3>\n<pre><code class=\"language-javascript\">// 以前for迴圈的寫法\nvar totalYears = 0;\nfor (let i = 0; i &lt; inventors.length; i++) {\n  var liveYear = inventors[i].passed - inventors[i].year;\n  totalYears += liveYear;\n}\n\n//reduce 寫法\nconst totalYears = inventors.reduce((total, inventor) =&gt; {\n  return total + inventor.passed - inventor.year;\n}, 0);\n</code></pre>\n<h3 id=\"計算-data-陣列裡相同的種類數量\">計算 data 陣列裡相同的種類數量</h3>\n<pre><code class=\"language-javascript\">// 以前筆者自己的寫法\nvar transportation = {};\ndata.map((e) =&gt; {\n  transportation[e] = transportation[e] || 0;\n  // transportation[e] = transportation[e] + 1;\n  transportation[e]++;\n});\n\n// 作者的寫法\nconst transportation = data.reduce(function (obj, item) {\n  if (!obj[item]) {\n    obj[item] = 0;\n  }\n  obj[item]++;\n  return obj;\n}, {});\n</code></pre>\n<p><a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\">Array.prototype.reduce()</a></p>\n<h2 id=\"map-與-filter-整合應用\">map 與 filter 整合應用</h2>\n<h3 id=\"從作者提供的維基網址裡-篩選出-含有-de-的路名\">從作者提供的維基網址裡 篩選出 含有 de 的路名</h3>\n<p>首先到作者提供的網址裡 開啟開發者工具做練習，\n使用 <code>querySelectorAll</code> 去抓取節點， 所得到的會是一個<code>NodeList</code></p>\n<pre><code class=\"language-javascript\">cosnt category = document.querySelectorAll('.mw-category a');\n</code></pre>\n<p>所以需要利用 Array.from(obj)轉成陣列</p>\n<pre><code class=\"language-javascript\">const links = Array.from(category);\n</code></pre>\n<p>ps.obj 就是由<code>querySelectorAll</code> 取得的 NodeList</p>\n<p>接下來就是一連串的 map 與 filter 處理了</p>\n<pre><code class=\"language-javascript\">const de = links\n  .map((link) =&gt; link.textContent)\n  .filter((streetName) =&gt; streetName.includes(&quot;de&quot;));\n</code></pre>\n<p>值得一得的是 作者在這裡面使用了 <code>includes()</code> 做比對，這是 ES2016 裡新增的(不支援 ie)\n取代了以前常使用的 <code>indexOf</code></p>\n<p><a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\">MDN-Array.prototype.includes()</a></p>\n<h2 id=\"後記\">後記</h2>\n<p>此次的學習 學到了許多其他之前不曾用過的處理陣列手法，處理方式更簡潔 讚!</p>\n<p><a target='_blank' href=\"https://www.youtube.com/watch?v=HB1ZC7czKRs\">YOUTUBE 影片教學連結</a></p>\n"},{"directory":"JS30","layout":"JavaScript","slug":"05_Flex Panel Gallery","title":"JS30：05_Flex Panel Gallery","date":"2019/01/29","categories":["JS30"],"tags":["JavaScript","JavaScript 30 天","flex"],"summary":"Flex Panel Gallery這次要來做的 點擊圖片後 動畫展開的效果摘要了解 flex 裡的空間分配了解 js 的 toggle 與 includes 事件CSS了解 flex 裡的空間分配 ","content":"<h1 id=\"flex-panel-gallery\">Flex Panel Gallery</h1>\n<p>這次要來做的 點擊圖片後 動畫展開的效果</p>\n<h2 id=\"摘要\">摘要</h2>\n<ul>\n<li>了解 flex 裡的空間分配</li>\n<li>了解 js 的 toggle 與 includes 事件</li>\n</ul>\n<h2 id=\"css\">CSS</h2>\n<h4 id=\"了解-flex-裡的空間分配-(對容器裡的物件做分配\">了解 flex 裡的空間分配 (對容器裡的物件做分配</h4>\n<p><code>flex-grow</code> 剩餘空間分配比例\n<code>flex-shirk</code> 壓縮比例\n<code>flex-basis</code> 預約剩餘空間</p>\n<p>三個值的縮寫為</p>\n<pre><code class=\"language-css\">flex: flex-grow flex-shirk flex-basis\n</code></pre>\n<p>若是 flex 只有一個值的話 則是</p>\n<pre><code class=\"language-css\">flex: flex-grow\n</code></pre>\n<p>可參考以下資料 這裡就不多做說明了 XD：\n<a target='_blank' href=\"http://zhoon.github.io/css3/2014/08/23/flex.html\">深入理解 css3 中的 flex-grow、flex-shrink、flex-basis</a></p>\n<p><a target='_blank' href=\"https://www.oxxostudio.tw/articles/201501/css-flexbox.html\">深入解析 CSS Flexbox</a></p>\n<p><a target='_blank' href=\"https://darekkay.com/dev/flexbox-cheatsheet.html\">FLEX 速查小抄</a></p>\n<ul>\n<li>FLEX IE9 以下不支援，若要支援 IE9 以下的瀏覽器 只好乖乖回去使用<code>float</code>排版囉</li>\n</ul>\n<p>css 瀏覽器支援度 可查照 <a target='_blank' href=\"https://caniuse.com/\">Can I use</a></p>\n<hr>\n<h3 id=\"js\">JS</h3>\n<pre><code class=\"language-javascript\">// 先將panels宣告\nconst panels = document.querySelectorAll('.panel');\n\n// 寫一個open切換的function\nfunction toggleOpen(e) {\n  this.classList.toggle('open');\n}\n\n// 尋找panels下所有的div\npanels.forEach(function(panel) {\n  // 將toggleOpen的function提出來寫的一種方式，適合重復使用\n  panel.addEventListener('click', toggleOpen);\n\n  // 直譯式\n  panel.addEventListener('transitionend', function(e) {\n    if (e.propertyName.includes('flex')) {\n      this.classList.toggle('open-active');\n      console.log(e.propertyName);\n    }\n  });\n});\n</code></pre>\n<p>值得一提的是 <code>NodeList</code>有內建 forEach 功能\n小嫩嫩如我 這在之前 以為 <code>NodeList</code>(註 1)是個陣列，想說試著使用 map 等其他事件跑跑看，都出現錯誤\n若要使用 map 等其他事件時 需將 NodeList 轉為陣列 才能執行</p>\n<p>原</p>\n<pre><code class=\"language-javascript\">const panels = document.querySelectorAll('.panel');\npanels.forEach(function(panel) {\n  console.log(panel);\n});\n</code></pre>\n<p>若要使用其他陣列事件的話 就該這麼做</p>\n<pre><code class=\"language-javascript\">const panels = document.querySelectorAll('.panel');\nconst panelsToArray = Array.apply(null, panels);\npanelsToArray.map(function(panel) {\n  console.log(panel);\n});\n\n// panelsToArray.map(...);\n// panelsToArray.slice(...);\n</code></pre>\n<p>註 1：<a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/NodeList\">NodeList</a></p>\n<p><a target='_blank' href=\"https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach\">NodeList.prototype.forEach()</a></p>\n<p><a target='_blank' href=\"http://www.jstips.co/zh_tw/javascript/3-array-hacks/\">使用 Array 的三個技巧</a></p>\n<p><a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Element/classList\">Element.classList</a></p>\n<p><a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\">Array.prototype.includes()</a></p>\n<p><a target='_blank' href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Node/contains\">https://developer.mozilla.org/zh-CN/docs/Web/API/Node/contains</a></p>\n<h2 id=\"後記\">後記</h2>\n<p>作者的範例 開打後 要再點一次才能縮回來\n我試著改寫為 打開後 再點另一個圖 之前所打開的會自動縮回</p>\n<p>程式碼如下</p>\n<pre><code class=\"language-javascript\">const panels = document.querySelectorAll('.panel');\n\nfunction toggleOpen(e) {\n  panels.forEach(function(el) {\n    if (el.classList.contains('open')) {\n      el.classList.remove('open');\n    }\n  });\n  this.classList.add('open');\n}\n\npanels.forEach(function(panel) {\n  panel.addEventListener('click', toggleOpen);\n  panel.addEventListener('transitionend', function(e) {\n    if (e.propertyName.includes('flex')) {\n      this.classList.toggle('open-active');\n    }\n  });\n});\n</code></pre>\n<p>此次課程雖多著重於 css 用法上，但 js 基礎不好的我 還是花了比較多時間在 js 的認識，也較了解 js 在 NodeList 上的執行方式</p>\n<p><a target='_blank' href=\"https://www.youtube.com/watch?v=9eif30i26jg\">YOUTUBE 影片教學連結</a></p>\n"},{"directory":"JS30","layout":"JavaScript","slug":"07_Array-Cardio-Day-2","title":"JS30：07_Array Cardio Day 2","date":"2019/01/18","categories":["JS30"],"tags":["JavaScript","JavaScript 30 天"],"summary":"Array Cardio (陣列練習 2)延續 04_Array Cardio Day 的後續，繼續悉其他操作陣列的方法摘要這次作者提供了 people 與 comments 兩組資料做練習練習的題目","content":"<h1 id=\"array-cardio-(陣列練習-2)\">Array Cardio (陣列練習 2)</h1>\n<p>延續 04_Array Cardio Day 的後續，繼續悉其他操作陣列的方法</p>\n<h2 id=\"摘要\">摘要</h2>\n<p>這次作者提供了 <code>people</code> 與 <code>comments</code> 兩組資料做練習</p>\n<p>練習的題目依序是</p>\n<ul>\n<li>people 是否有人滿 19 歲 (some)</li>\n<li>people 是否全部人滿 19 歲 (every)</li>\n<li>從 comments 找到 id 是 823423 的資料 (find ,findIndex)</li>\n<li>從 comments 刪除 id 是 823423 這筆資料 (splice, slice)</li>\n</ul>\n<h2 id=\"some\">some</h2>\n<p>people 是否有人滿 19 歲</p>\n<pre><code class=\"language-javascript\">const isAdult = people.some(function( person ){\n      const currectYear = (new Date()).getFullYear();\n      if( currectYear - person.year &gt;=19 ){\n        return true;\n      }\n    });\n</code></pre>\n<p>簡化成箭頭函式後的寫法</p>\n<pre><code class=\"language-javascript\">const isAdult = people.some( person=&gt; (new Date()).getFullYear() - person.year &gt;= 19);\n</code></pre>\n<p>只要有一人符合 就會回傳 ture\n<a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/some\">MDN-Array.prototype.some()</a></p>\n<h2 id=\"every\">every</h2>\n<p>people 是否全部人滿 19 歲</p>\n<pre><code class=\"language-javascript\">const allAdults = people.every( person=&gt; (new Date()).getFullYear() - person.year &gt;= 19);\n</code></pre>\n<p>需要全部符合 才會回傳 true，否則會是 false\n<a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/every\">Array.prototype.every()</a></p>\n<h2 id=\"find(es6-新增的新函式)\">find(es6 新增的新函式)</h2>\n<pre><code class=\"language-javascript\">const comm = comments.find(function( comment ){\n        if( comment.id === 823423 ){\n          return true;\n        }\n      });\n\n//簡化成箭頭函式後的寫法\nconst comm = comments.find( comment =&gt; comment.id === 823423 );\n</code></pre>\n<p>find 會回傳第一個等於 true 的值，也只會回傳第一個找到的物件\n<a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/find\">Array.prototype.find()</a></p>\n<h2 id=\"fineindex(es6-新增的新函式)\">fineIndex(es6 新增的新函式)</h2>\n<pre><code class=\"language-javascript\">const idx = comments.findIndex( comment =&gt; comment.id === 823423 );\n</code></pre>\n<p>與 find 不同的是 它回傳的是索引值，也一樣只會回傳第一筆\n<a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\">Array.prototype.findIndex()</a></p>\n<h2 id=\"splice\">splice</h2>\n<pre><code class=\"language-javascript\">comments.splice( idx, 1 );\n</code></pre>\n<p>承上 刪除 <code>id 823423</code> 這一筆</p>\n<p>comments.splice( 從哪一筆開始刪除, 刪幾筆, 這區間再插入新筆數 );</p>\n<p><a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\">Array.prototype.splice()</a></p>\n<h2 id=\"slice-(另一種刪除筆數的方式)\">slice (另一種刪除筆數的方式)</h2>\n<pre><code class=\"language-javascript\">const newComments = [\n  ...comments.slice( 0, idx ),\n  ...comments.slice( idx + 1 )\n];\n</code></pre>\n<p>取出陣列裡某區域的值\ncomments.slice( 從哪一筆開始取, 從索引值 0 開始算來取到第幾個 (負數則表示從後面開始算) )</p>\n<p>另外一提 <code>...</code> 是 ES6 的新增的 展開語法 方便陣列或物件的合併\n在過去 陣列裡會使用 <code>push</code> 或是 <code>concat</code> 物件則是使用 <code>extend</code>\n比起來 <code>...</code> 方便多啦</p>\n<p><a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\">Array.prototype.slice()</a></p>\n<p><a target='_blank' href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">…展開語法</a></p>\n<h2 id=\"後記\">後記</h2>\n<p>陣列處理有許多方式可以使用 只要能了解其中的優缺點 相信用起來便是如魚得水啊 (還在努力學習中 加油！)\n題外話 英文不好的我還是常常把 splice 跟 slice 搞混 (囧~~~)</p>\n<p><a target='_blank' href=\"https://www.youtube.com/watch?v=QNmRfyNg1lw\">YOUTUBE 影片教學連結</a></p>\n"},{"directory":"JS30","layout":"JavaScript","slug":"30_Whack-A-Mole","title":"JS30：30_Whack A Mole!","date":"2018/11/26","categories":["JS30"],"tags":["JavaScript","JavaScript 30 天"],"summary":"Whack A Mole! (打地鼠)摘要先規劃地鼠出現時間 ( 亂數時間出現 )設定地鼠出現位置將出現時間跟地鼠出現位置整合點按鈕控制遊戲開始打地鼠計分!!初始變數設定const holes = d","content":"<h1 id=\"whack-a-mole!-(打地鼠)\">Whack A Mole! (打地鼠)</h1>\n<h2 id=\"摘要\">摘要</h2>\n<ul>\n<li>先規劃地鼠出現時間 ( 亂數時間出現 )</li>\n<li>設定地鼠出現位置</li>\n<li>將出現時間跟地鼠出現位置整合</li>\n<li>點按鈕控制遊戲開始</li>\n<li>打地鼠計分!!</li>\n</ul>\n<h2 id=\"初始變數設定\">初始變數設定</h2>\n<pre><code class=\"language-javascript\">const holes = document.querySelectorAll('.hole');\nconst scoreBoard = document.querySelector('.score');\nconst moles = document.querySelectorAll('.mole');\n</code></pre>\n<h2 id=\"地鼠出現時間\">地鼠出現時間</h2>\n<pre><code class=\"language-javascript\">// 取最小值&amp;最大值 區間的亂數值\n// Math.round 四捨五入到最近整數的值。\nfunction randTime(min, max) {\n  return Math.round(Math.random() * (max - min) + min);\n}\n</code></pre>\n<ul>\n<li>上述算法的產生可參考 <a target='_blank' href=\"https://ithelp.ithome.com.tw/articles/10197920\">[筆記][JavaScript]用 Math.random()取得亂數的技巧</a></li>\n</ul>\n<h2 id=\"地鼠出現位置(隨機)\">地鼠出現位置(隨機)</h2>\n<pre><code class=\"language-javascript\">let lastHole;\n</code></pre>\n<p>新增變數 <code>lastHole</code> 做撮記</p>\n<pre><code class=\"language-javascript\">// Math.floor 取最大整數(無條件進位)\nfunction randomHole(holes) {\n  const idx = Math.floor(Math.random() * holes.length);\n  const hole = holes[idx];\n\n  // 假如 重覆出現同個tag 就回傳 重新再跑一次\n  if (hole === lastHole) {\n    console.log('same');\n    return randomHole(holes);\n  }\n  // 最後一次出現位置 做撮記記下來\n  lastHole = hole;\n  return hole;\n}\n</code></pre>\n<h2 id=\"地鼠出來玩\">地鼠出來玩</h2>\n<pre><code class=\"language-javascript\">let timeUP = false;\n</code></pre>\n<p>新增<code>timeUP</code> 時間到變數</p>\n<pre><code class=\"language-javascript\">function peep() {\n  const time = randTime(200, 1000);\n  const hole = randomHole(holes);\n  hole.classList.add('up');\n  // 設定地鼠縮頭時間，與結束\n  setTimeout(function() {\n    hole.classList.remove('up');\n    if (!timeUP) peep();\n  }, time);\n}\n</code></pre>\n<p>整合剛剛的時間與出現位置，地鼠會隨機探出頭\n<code>timeUP = true</code> 表示時間到 遊戲結束</p>\n<h2 id=\"設定遊戲開始按鈕(-把值都調回初使值-)\">設定遊戲開始按鈕( 把值都調回初使值 )</h2>\n<pre><code class=\"language-javascript\">function startGame() {\n  scoreBoard.textContent = 0;\n  timeUP = false;\n  score = 0;\n  peep();\n\n  // 設定結束時間\n  setTimeout(function() {\n    timeUP = true;\n    console.log('timeup');\n  }, 10000);\n}\n</code></pre>\n<h2 id=\"打地鼠囉，時間內打到就-+1-分\">打地鼠囉，時間內打到就 +1 分</h2>\n<pre><code class=\"language-javascript\">function bonk(e) {\n  if (!e.isTrusted) return; //騙子!\n  //計算分數\n  score++;\n  this.classList.remove('up');\n  scoreBoard.textContent = score;\n}\n\nmoles.forEach(function(e, i) {\n  e.addEventListener('click', bonk);\n});\n</code></pre>\n<p><code>e.isTrusted</code> 可透過此屬性來判斷事件是否由使用者操控來產生\n可參照 <a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Event/isTrusted\">MDN-Event.isTrusted</a></p>\n<p><a target='_blank' href=\"https://www.youtube.com/watch?v=toNFfAaWghU\">YOUTUBE 影片教學連結</a></p>\n"},{"directory":"JSBOSS","layout":"JavaScript","slug":"10f","title":"JS地下城：10F-Chrome 應用程式(幹話產生器)","date":"2019/04/14","categories":["JS地下城"],"tags":["css","JavaScript","JS地下城"],"summary":"規則【特定技術】請開發 Chrome extension，不需上架，投稿時請提供安裝檔放在雲端，以供 GM 下載測試。【特定技術】打開 Chrome 新頁(tab)時，會隨機顯示你自己新增的語錄，或者","content":"<img src=\"assets/images/JSBOSS/10f/cover.png\" width=\"100%\" loading=\"lazy\" />\n<h2 id=\"規則\">規則</h2>\n<ul>\n<li>【特定技術】請開發 Chrome extension，不需上架，投稿時請提供安裝檔放在雲端，以\n供 GM 下載測試。</li>\n<li>【特定技術】打開 Chrome 新頁(tab)時，會隨機顯示你自己新增的語錄，或者是幹話。</li>\n<li>【特定技術】可切換夜間/日間模式</li>\n<li>【特定技術】新增語錄時，有兩種方式新增，一種是在頁面裡新增，另一種是點選瀏覽器\n右上角 icon 來新增</li>\n<li>【特定技術】背景插圖固定即可，</li>\n</ul>\n<hr>\n<p><a target='_blank' href=\"https://github.com/mtwmt/jsboss/raw/master/sourse/10f/dist-zip/10f-v1.0.0.zip\">zip 下載</a>\n<a target='_blank' href=\"https://github.com/mtwmt/jsboss/tree/master/sourse/10f\">sourse code</a></p>\n<hr>\n<p>斷斷續續寫好久 終於寫完了 從來沒有想過會做瀏覽器的應用程式 剛好趁著這次機會 就來\n試試看囉 還是要動手做過才會知道</p>\n<p>先吐口水一下</p>\n<p>這次改用 webpak + vue 來處理原本是試了 vue-cli 來 處理 但 vue-cli 有太多的預設值\n在裡面</p>\n<p>直接寫 vue 會發生</p>\n<pre><code class=\"language-bash\">vue CSP\n[Vue warn]: It seems you are using the standalone build of Vue.js in an environment with Content Security Policy that prohibits unsafe-eval. The template compiler cannot work in this environment. Consider relaxing the policy to allow unsafe-eval or pre-compiling your templates into render functions.\n</code></pre>\n<p><a target='_blank' href=\"https://segmentfault.com/a/1190000016755248\">CSP (Content Security Policy) 内容安全策略</a>\n算是小小雷之一需要封裝後才能正常顯示在封裝發佈過程中也搞蠻久的 主要也是對\nwebpack 不熟的原因 QQ</p>\n<hr>\n<h3 id=\"檢示擴充功能頁面\">檢示擴充功能頁面</h3>\n<img src=\"assets/images/JSBOSS/10f/001.png\" width=\"100%\"/>\n<img src=\"assets/images/JSBOSS/10f/002.png\" width=\"100%\"/>\n<pre><code>id = ID：ofhppbjbjineikemijlgmbflohenglaa\n檔案名稱：pupup.html\nchrome-extension://ofhppbjbjineikemijlgmbflohenglaa/popup.html\n</code></pre>\n<hr>\n<h3 id=\"chrome-預設頁面\">chrome 預設頁面</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">bookmarks</th>\n<th style=\"text-align:left\">history</th>\n<th style=\"text-align:left\">newtab</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">書籤管理器</td>\n<td style=\"text-align:left\">歷史記錄</td>\n<td style=\"text-align:left\">新預增分頁</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">chrome://bookmarks</td>\n<td style=\"text-align:left\">chrome://history</td>\n<td style=\"text-align:left\">chrome://newtab</td>\n</tr>\n</tbody>\n</table>\n<p>Override 替代頁\n<a target='_blank' href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/chrome_url_overrides\">MDN-chrome_url_overrides</a></p>\n<hr>\n<h2 id=\"chrome-extension-的架構\">Chrome Extension 的架構</h2>\n<p><a target='_blank' href=\"https://crxdoc-zh.appspot.com/extensions/manifest\">文件清單格式</a></p>\n<p><code>manifest.json</code>: 很重要的一支檔案，用來定義整個 Chrome Extension 的描述，權限等\n等各種資訊。 <code>icon.png</code>: 瀏覽器右上角的 icon</p>\n<h3 id=\"開發頁面\">開發頁面</h3>\n<p>基本上會有以下幾種頁面可供選擇 <code>background.js</code>：背景頁面</p>\n<p><code>popup.html</code>: 擊點瀏覽器右上角 icon 所彈出的小視窗 <code>popup.js</code>: popup.html 執行的\n互動事件(腳本)</p>\n<p><code>newtab.html</code>：開新分頁 <code>newtab.js</code>：newtab.html 執行的互動事件(腳本)</p>\n<hr>\n<p>卡了許多雷其中是又是以 <code>newtab</code> 與 <code>popup</code> 同步的問題處理最久，後來証明其實是自\n己想太多 簡單的在 vue 上 宣告好 就可以了</p>\n<pre><code class=\"language-javascript\">// 獲取chrome 瀏覽器資料\nchrome.storage.sync.get(null, function (items) {\n  // 將資料以物件方式丟入\n  chrome.storage.sync.set({ quote: _self.quote }, function () {\n    // callback\n  });\n});\n\n// 監聽 chrome.storage.sync 是否更新，有更新即執行\nchrome.storage.onChanged.addListener((data, type) =&gt; {\n  for (let i in data) {\n    _self[i] = data[i].newValue;\n  }\n});\n</code></pre>\n<p>基本上 可以正確取得 <code>chrome.storage</code> 裡的東西後再將要更動的資料以 <code>set</code> 方式傳入\n再去進行 <code>onChanged</code> 監聽 即可達到 <code>popup</code> 與 <code>newtab</code> 同步</p>\n<hr>\n<h2 id=\"實作部份\">實作部份</h2>\n<p><code>個人小記錄 供參</code></p>\n<h2 id=\"隨機顯示語錄\">隨機顯示語錄</h2>\n<p>開新頁面後會隨機產生語錄在撰寫的過程中，發現 只要新增或刪除資料後，原本的語錄就\n會跳掉</p>\n<p>為了固定一開始的語錄 另外做了些小處理</p>\n<p><code>新增</code> 最新一筆會放在整個陣列的第一筆裡所以 當新增一筆資料的時後，原本隨機的數值\n就會+1</p>\n<p><code>刪除</code> 若是刪除的資料比隨機產生的資料還新 數值就會 -1，否則不變</p>\n<hr>\n<h2 id=\"vue-filters-處理語錄斷行\">vue filters 處理語錄斷行</h2>\n<pre><code class=\"language-js\">&lt;p @click=&quot;isPageEdit()&quot; v-if=&quot;!pagequote&quot;&gt;{{ quote[random].text | txtformat }}&lt;/p&gt;\n&lt;p @click=&quot;isPageEdit()&quot; v-if=&quot;!pagequote&quot; v-html=&quot;$options.filters.txtformat(quote[random].text)&quot;&gt;&lt;/p&gt;\n</code></pre>\n<p>參考：<a target='_blank' href=\"https://www.jianshu.com/p/29b7eaabd1ba\">https://www.jianshu.com/p/29b7eaabd1ba</a></p>\n"},{"directory":"JSBOSS","layout":"JavaScript","slug":"11f","title":"JS地下城：11F-燈箱效果","date":"2019/06/30","categories":["JS地下城"],"tags":["css","JavaScript","JS地下城"],"summary":"規則【特定技術】不可用 JS 框架，只能單純用原生 JS。【特定技術】需符合響應式設計。【特定技術】當螢幕伸縮(resize)時，介面與 JS 功能也需正常這次的關卡大部份就是練習 JS 的語法主要就","content":"<img src=\"assets/images/JSBOSS/11f/cover.png\" width=\"100%\" loading=\"lazy\" />\n<h2 id=\"規則\">規則</h2>\n<ul>\n<li>【特定技術】不可用 JS 框架，只能單純用原生 JS。</li>\n<li>【特定技術】需符合響應式設計。</li>\n<li>【特定技術】當螢幕伸縮(resize)時，介面與 JS 功能也需正常</li>\n</ul>\n<hr>\n<p>這次的關卡大部份就是練習 JS 的語法主要就是語法不熟 需要花時間去找出寫法 囧~</p>\n<p>這次燈箱的圖片 花了點時間 去 <a target='_blank' href=\"https://unsplash.com/\">unsplash</a> 申請這個網站的\napi 直接從 api 裡去下載圖片就不用再一張一張去把圖片下載回來也能產圖了 蠻好玩的\n有興趣的朋友可以試試</p>\n<p><a target='_blank' href=\"https://unsplash.com/documentation\">API 串接文件</a></p>\n<p><a target='_blank' href=\"https://mtwmt.github.io/jsboss/public/11f/\">demo 頁</a>\n<a target='_blank' href=\"https://github.com/mtwmt/jsboss/tree/master/sourse/11f\">sourse code</a></p>\n<hr>\n<h2 id=\"lightbox-概念\">LightBox 概念</h2>\n<p>首先我先將所有的資訊都放在 photo 的列表裡點了圖後 直接取得 li 裡的 data 資訊後\n放到 lightbox 上有助後續若要修改圖片的話 只要改一個地方就好</p>\n<h2 id=\"fetch\">fetch</h2>\n<p>在取圖片的時後 使用<code>fetch</code>來取發現 <code>fetch</code> 在請求 api 資料時 沒有帶參數的功能，\n必需寫在網址上</p>\n<p><a target='_blank' href=\"https://unsplash.com/documentation#search\">照片搜尋參數</a></p>\n<table>\n<thead>\n<tr>\n<th>參數</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>w，h</td>\n<td>用於調整照片的寬度和高度</td>\n</tr>\n<tr>\n<td>crop</td>\n<td>用於對照片進行裁剪</td>\n</tr>\n<tr>\n<td>fm</td>\n<td>用於轉換圖像格式</td>\n</tr>\n<tr>\n<td>auto=format</td>\n<td>用於根據用戶瀏覽器自動選擇最佳圖像格式</td>\n</tr>\n<tr>\n<td>q</td>\n<td>用於在使用有損文件格式時更改壓縮質量</td>\n</tr>\n<tr>\n<td>fit</td>\n<td>用於在指定尺寸內更改圖像的適合度</td>\n</tr>\n<tr>\n<td>dpr</td>\n<td>用於調整圖像的設備像素比率</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"rwd\">RWD</h2>\n<p>在頁面製作上，使用了 <code>rem</code> 來處理詳細部份 可以參考我先前寫的這篇文章\n<a target='_blank' href=\"https://mtwmt.github.io/blog/rwd-fontSize/\">rwd 自適應文字大小</a></p>\n<hr>\n<p>大致上就是這樣囉 也請多多指教^_^</p>\n"},{"directory":"JSBOSS","layout":"JavaScript","slug":"1f","title":"JS地下城：1F-9x9 乘法表","date":"2019/05/18","categories":["JS地下城"],"tags":["css","JavaScript","JS地下城"],"summary":"規則【特定技術】需使用 JS for 迴圈技巧，裡頭數字不能直接寫在 HTML 上，需使用 JS 印出。需使用 HTML、CSS、JS 技術介面需與設計稿一致demo 頁sourse code其實這篤","content":"<img src=\"assets/images/JSBOSS/1f/cover.png\" width=\"100%\" loading=\"lazy\" />\n<h2 id=\"規則\">規則</h2>\n<ul>\n<li>【特定技術】需使用 JS for 迴圈技巧，裡頭數字不能直接寫在 HTML 上，需使用 JS 印\n出。</li>\n<li>需使用 HTML、CSS、JS 技術</li>\n<li>介面需與設計稿一致</li>\n</ul>\n<hr>\n<p><a target='_blank' href=\"https://mtwmt.github.io/jsboss/public/1f/\">demo 頁</a>\n<a target='_blank' href=\"https://github.com/mtwmt/jsboss/tree/master/sourse/1f\">sourse code</a></p>\n<hr>\n<p>其實這篤文也拖了蠻久才產出來的，算是新手入門題目，for 迴圈的練習，css 排版練習此\n次挑戰也剛好用來練習 js 的寫法</p>\n<p>css 部份 外部使用 <code>flex</code> 排版。裡面數字則是使用適合處理文繞圖的 <code>float</code></p>\n<h2 id=\"createelement\">createElement</h2>\n<pre><code class=\"language-js\">(function () {\n  let $main = document.querySelector('.main');\n\n  for (let i = 2; i &lt;= 9; i++) {\n    let $block = document.createElement('div'),\n      $num = document.createElement('div'),\n      $cal = document.createElement('div'),\n      numtext = document.createTextNode(i);\n\n    $block.classList.add('ninetable');\n    $num.classList.add('num');\n    $cal.classList.add('cal');\n\n    $num.appendChild(numtext);\n    $block.appendChild($num);\n    $block.appendChild($cal);\n    $main.appendChild($block);\n\n    for (let j = 1; j &lt;= 9; j++) {\n      let $item = document.createElement('span');\n      let itemtext = document.createTextNode(`${i} X ${j} = ${i * j}`);\n      $item.appendChild(itemtext);\n      $cal.appendChild($item);\n    }\n  }\n})();\n</code></pre>\n<p>使用 <code>createElement</code> 建立新的 tag <code>classList.add</code> 加上 className\n<code>createTextNode</code> 建文文字結點</p>\n<hr>\n<h2 id=\"直接塞字串\">直接塞字串</h2>\n<pre><code class=\"language-js\">(function () {\n  let str = '';\n  for (let i = 2; i &lt;= 9; i++) {\n    str += '&lt;div class=&quot;ninetable&quot;&gt;';\n    str += '&lt;div class=&quot;num&quot;&gt;' + i + '&lt;/div&gt;';\n    str += '&lt;div class=&quot;cal&quot;&gt;';\n    for (let j = 1; j &lt;= 9; j++) {\n      str += '&lt;span&gt;' + i + 'X' + j + '=' + i * j + '&lt;/span&gt;';\n    }\n    str += '&lt;/div&gt;';\n    str += '&lt;/div&gt;';\n  }\n  document.querySelector('.main').insertAdjacentHTML('beforeend', str);\n})();\n</code></pre>\n<p>使用字串方式直接寫入 再使用 <code>insertAdjacentHTML()</code> 把傳入的字串解析成 HTML 或\nXML，並把該節點插入到 DOM 樹指定的位置。它不會重新解析被使用的元素，因此他不會破\n壞該元素裡面原有的元素。這避免了序列化的複雜步驟，使得它比直接操作 innerHTML 快\n上許多。</p>\n<p><a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Element/insertAdjacentHTML\">Element​.insert​Adjacent​HTML() </a></p>\n<hr>\n"},{"directory":"JSBOSS","layout":"JavaScript","slug":"2f","title":"JS地下城：2F-時鐘","date":"2019/02/07","categories":["JS地下城"],"tags":["css","JavaScript","JS地下城"],"summary":"規則【特定技術】需使用 JS 原生語法的 getDate() 撈取時間，不可用套件【特定技術】需使用 JS 原生語法的 setTimeout() 或 setInterval()，持續讓秒針、分針、時針","content":"<img src=\"assets/images/JSBOSS/2f/cover.png\" width=\"100%\" loading=\"lazy\" />\n<h2 id=\"規則\">規則</h2>\n<ul>\n<li>【特定技術】需使用 JS 原生語法的 getDate() 撈取時間，不可用套件</li>\n<li>【特定技術】需使用 JS 原生語法的 setTimeout() 或 setInterval()，持續讓秒針、分\n針、時針能夠以台北時區移動</li>\n</ul>\n<hr>\n<p>這次時鐘的關卡，之\n前<a target='_blank' href=\"https://mtwmt.github.io/blog/JS30/02_JS-and-CSS-Clock/\">js30 天的第二單元</a>已\n經練習過了，所以這次主要挑戰的就是用 css 畫出設計稿上的內容!!!</p>\n<p><a target='_blank' href=\"https://mtwmt.github.io/jsboss/public/2f/\">demo 頁</a>\n<a target='_blank' href=\"https://github.com/mtwmt/jsboss/tree/master/sourse/2f\">sourse code</a></p>\n<hr>\n<h2 id=\"準備\">準備</h2>\n<p>寫這個題目時 也算晚了，所以在這之前已經有很多大大的作品在上面了，看到幾位大大的\n時鐘都是使用三角函式算角度去繪製出來，所以也爬了一些三角函數的教學，奈何資質駑鈍\n，看了好久 怎麼看都看不懂…… 角度怎麼麼算都算不出來… (真的很灰心啊… 所以決定使用\n土法煉鋼的方式來處理</p>\n<h2 id=\"開始\">開始</h2>\n<p>首先 當然是先把外框簡單的部份先畫完再來就是處理刻度，算了一下刻度有 72 格 (普通\n不是都 60 格嗎?) 不管了 沒關係</p>\n<h3 id=\"畫刻度\">畫刻度</h3>\n<p>先設定中心點在 css3 裡 有個 <code>transform-origin</code> 它可以定中心點 以這個點為中心做旋\n轉先試著畫出一個刻度 把位置找出來 如圖\n<img src=\"assets/images/JSBOSS/2f/001.png\" width=\"300px\"/> 再試著使用 css3 的\n<code>transform: rotate</code> 轉轉看 看是不是如自己所想的轉動方向</p>\n<p>接著用 js 下去繪製出其他 71 個刻度\n<img src=\"assets/images/JSBOSS/2f/002.png\" width=\"300px\"/> 果然沒問題 是我要的!\n接著把刻度的間距拉開</p>\n<p>一個圓是 360 度 (這個國小有讀過 我還記得 XDDD) 360 / 72 得證 每個刻度的間距是 5\n在 for 迴圈裡 每個刻度再加上 5 的距離 如圖\n<img src=\"assets/images/JSBOSS/2f/003.png\" width=\"300px\"/></p>\n<p>接下來就是一連串的樣式處理啦利用 css 的 <code>nth-child( 6n+1 )</code> (以 6 為單位取第 1\n個… 以此類推畫出如下圖\n<img src=\"assets/images/JSBOSS/2f/004.png\" width=\"300px\"/> 圖中的刻度的半經離圓\n心有點近，就使用 <code>transform: translateY</code> 將半徑拉開</p>\n<h3 id=\"把數字時間填上\">把數字時間填上</h3>\n<p>都完成後 接著就將數字補上去( 再次遇到問題 ) 原本想將 <code>am</code> 跟 <code>pm</code> 的數字 利用\ncss 的 data 屬性來顯示，但發現在 js 裡面不能更改 <code>:before</code>,<code>:after</code>的 css 樣式(\n調整樣式的原因是要修改數字的旋轉角度)，只能用 css 寫死，只好又放棄老實的幫數字加\n上 tag 這裡要注意的一點是 要把數字放在刻度的下一層，以刻度當定位點 數字才能跟著\n刻度的角度放好<br>\n數字放上去後 如下圖 <img src=\"assets/images/JSBOSS/2f/005.png\" width=\"300px\"/></p>\n<h3 id=\"將數字轉正\">將數字轉正</h3>\n<p>花了一點時間下去找數字旋轉的角度的規則原本是倒的字加上 180 度就會變成正的所以就\n是 <code>180 - i(第幾個) * 5(先前得到數值)</code> 就能把所有數字轉正了</p>\n<p>再來就是使用 css 的 <code>top</code> <code>left</code> 將數字拉開了，轉到想要的位置成果如下!!\n<img src=\"assets/images/JSBOSS/2f/006.png\" width=\"300px\"/></p>\n<h3 id=\"畫秒針\">畫秒針</h3>\n<p>接下來就是用 css 處理時鐘的指針了時針 跟 分針較簡單 所以略過不提了來說說複雜的秒\n針吧困難點在於他中間有兩個小折痕這裡我使用三角形來處理在一個 tag 裡的 <code>before</code>\n<code>after</code> 分別寫上兩個三角形重疊 做出三角形的邊框做兩個 另一個做水平鏡向處理\n<code>transform: scaleX(-1);</code> 再來 就是花時間做微調了 成功!!\n<img src=\"assets/images/JSBOSS/2f/007.png\" width=\"300px\"/></p>\n"},{"directory":"JSBOSS","layout":"JavaScript","slug":"3f","title":"JS地下城：3F-計算機","date":"2019/02/21","categories":["JS地下城"],"tags":["css","JavaScript","JS地下城"],"summary":"規則【特定技術】數字位數過多時，不能因此而破版，計算機功能皆須齊全這次使用 原生 JS 來挑戰這次關卡demo 頁sourse code處理的問題有以下ieee754 浮點數字數過長 不造成破版eva","content":"<img src=\"assets/images/JSBOSS/3f/cover.png\" width=\"100%\" loading=\"lazy\" />\n<h2 id=\"規則\">規則</h2>\n<ul>\n<li>【特定技術】數字位數過多時，不能因此而破版，計算機功能皆須齊全</li>\n</ul>\n<hr>\n<p>這次使用 原生 JS 來挑戰這次關卡</p>\n<p><a target='_blank' href=\"https://mtwmt.github.io/jsboss/public/3f/\">demo 頁</a>\n<a target='_blank' href=\"https://github.com/mtwmt/jsboss/tree/master/sourse/3f\">sourse code</a></p>\n<hr>\n<p>處理的問題有以下</p>\n<ul>\n<li>ieee754 浮點數</li>\n<li>字數過長 不造成破版</li>\n<li>eval 加總</li>\n<li>千分位進位</li>\n<li>決定面版顯示資訊 做個 flag</li>\n<li>鍵盤輸入</li>\n</ul>\n<hr>\n<p>這裡我做兩個空陣列儲存健入的數值 分別為 <code>tempFormula</code> <code>tempResult</code></p>\n<p><code>tempFormula</code> 用來顯示所有的算式 <code>tempResult</code> 當遇到運算式的時後會清空 做下一個\n動作，最後用來顯示計算結果</p>\n<p>使用 switch case 過濾鍵入的資訊</p>\n<h2 id=\"ieee754-浮點數\">ieee754 浮點數</h2>\n<p><a target='_blank' href=\"https://zh.wikipedia.org/wiki/IEEE_754\">ieee754 維基百科</a> 我這裡的處理方式是 加\n總後 *100 再做四捨五入<code>Math.round()</code> 後 再除以 100 因為小於 1 的數不能做四捨五\n入 所以 先*100 讓數值大於 1 後 做四捨五入 再除 100 回來 *100 /100 就是取到小數\n點第二位做處理，所以最多也只能計算到小數點第二位的值算是有點偷吃步的寫法 XD</p>\n<h2 id=\"字數過長-不造成破版\">字數過長 不造成破版</h2>\n<p>當字數的總寬大於輸入框的總寬時 字型大小就自動 -2px 持續執行 直到字數總寬小於輸入\n框這裡我學到了 while 的用法(參考其他人的寫法)，跟 for 迴圈的用法比較不一樣</p>\n<p>題外話 在寫這篇文時 試著用 for 迴圈的寫法來寫，我想它們的不同處應該就是差在效率\n吧</p>\n<pre><code class=\"language-javascript\">// while\ntextSize = function (textW){\n  let fz = parseInt($hdresult.style.fontSize, 10);\n  while (textW &gt; calboxW) {\n    fz -= 2;\n    $hdresult.style.fontSize = `${fz}px`;\n    textW = $hdresult.clientWidth;\n  }\n}\n\n// for\ntextSize = function (textW){\n  let fz = parseInt($hdresult.style.fontSize, 10);\n  if( fz; textW &gt; calboxW; fz - 2  ){\n    $hdresult.style.fontSize = `${fz}px`;\n    textW = $hdresult.clientWidth;\n  }\n}\n</code></pre>\n<h2 id=\"eval-加總\">eval 加總</h2>\n<p>這次是使用 eval 加總 處理一連串的算式 蠻方便的 可參照\n<a target='_blank' href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval\">MDN-eval()</a></p>\n<h2 id=\"千分位進位(正規表示)\">千分位進位(正規表示)</h2>\n<p>參照了這篇的正規做處理\n<a target='_blank' href=\"https://segmentfault.com/q/1010000012664753\">正規千分位處理</a> 另外也看到了\n<a target='_blank' href=\"https://cloudlab.tw/wp/sampleFiles/RegExp/\">正規表示 線上產生器</a></p>\n<h2 id=\"決定面版顯示資訊-做個-flag\">決定面版顯示資訊 做個 flag</h2>\n<p>在計算的過程中 會遇到一些顯示上的問題比如 按了 +−×÷ 後 再次輸入新的數字結果框會\n清空之前的數值 然後新的值填上去按了 = 後全部清空 等等的這些呈現方式</p>\n<p>我使用 flag 去做記錄 處理這些顯示問題</p>\n<h2 id=\"鍵盤輸入\">鍵盤輸入</h2>\n<p>最後!! 我真的覺得用滑鼠點的計算很難按 所以就加上了鍵盤輸入先前在\n<a target='_blank' href=\"https://mtwmt.github.io/blog/JS30/01_JavaScript-Drum-Kit/\">js30 天的第一個單元</a>\n有練習到了鍵盤監聽事件 不過當時 是使用 keyCode 來監聽 這次使用的是 key</p>\n<p>以上是我在寫這次計算機的處理過程如有看不懂的地方 也歡迎詢問 XDD</p>\n"},{"directory":"JSBOSS","layout":"JavaScript","slug":"4f","title":"JS地下城：4F-時區","date":"2019/05/20","categories":["JS地下城"],"tags":["css","JavaScript","JS地下城"],"summary":"規則【特定技術】僅能使用原生 JS 開始，不能使用套件【特定技術】特別注意必須用 JS 處理各國時區【書寫能力】請寫一篇 BLOG 來介紹你的挑戰過程，並介紹 JavaScript 如何提供GMT、U","content":"<img src=\"assets/images/JSBOSS/4f/cover.png\" width=\"100%\" loading=\"lazy\" />\n<h2 id=\"規則\">規則</h2>\n<ul>\n<li>【特定技術】僅能使用原生 JS 開始，不能使用套件</li>\n<li>【特定技術】特別注意必須用 JS 處理各國時區</li>\n<li>【書寫能力】請寫一篇 BLOG 來介紹你的挑戰過程，並介紹 JavaScript 如何提供\nGMT、UTC 時區語法，以及何謂 TimeStamp。</li>\n</ul>\n<hr>\n<h2 id=\"gmt\">GMT</h2>\n<p>這次使用了兩種寫法來寫這關卡 分別為 <code>toLocaleString</code> 與 <code>timestamp</code></p>\n<ul>\n<li>toLocaleString\n<a target='_blank' href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat</a></li>\n</ul>\n<p><a target='_blank' href=\"https://juejin.im/post/5ac7079f5188255c637b3233\">了解一下 toLocaleString 處理時間部份</a></p>\n<img src=\"assets/images/JSBOSS/4f/DateTimeFormat.png\" width=\"100%\"/>\n<p><a target='_blank' href=\"http://www.ecma-international.org/ecma-402/1.0/#sec-12.1.1\">http://www.ecma-international.org/ecma-402/1.0/#sec-12.1.1</a></p>\n<p><a target='_blank' href=\"https://www.ibm.com/support/knowledgecenter/zh-tw/SS6PD2_2.2.3/doc/psapsys_restapi/time_zone_list.html\">時區清單</a></p>\n<h2 id=\"timestamp\">Timestamp</h2>\n<p>timestamp 一般被指為 Unix 時間戳，以 Unix 紀元開始算起 (西元 1970 年 1 月 1 日\n00:00:00) 並且通常以秒為單位，在某些系統會採用這種時間格式，在各種語言也都支援這\n種時間戳格式轉換</p>\n<p><a target='_blank' href=\"https://stackoverflow.com/questions/221294/how-do-you-get-a-timestamp-in-javascript\">如何取得 timestamp</a></p>\n<p><a target='_blank' href=\"https://www.techrepublic.com/article/convert-the-local-time-to-another-time-zone-with-this-javascript/\">使用 js 將本地時間轉排為另一個時區</a></p>\n<p>1 秒 = 1000 毫秒 1 分鐘 = 60 秒 1 小時 = 3600 秒</p>\n<p>將 1 分鐘轉換為毫秒 = <code>60*1000 = 60000</code> 1 小時 = <code>60000*60 = 3600000</code></p>\n<p><a target='_blank' href=\"https://zh.wikipedia.org/wiki/%E5%8D%8F%E8%B0%83%E4%B8%96%E7%95%8C%E6%97%B6\">UTC</a></p>\n<p><a target='_blank' href=\"https://pansci.asia/archives/84978\">到底是 GMT+8 還是 UTC+8 ?</a></p>\n"},{"directory":"JSBOSS","layout":"JavaScript","slug":"5f","title":"JS地下城：5F-全台空氣指標儀表板","date":"2019/02/11","categories":["JS地下城"],"tags":["css","JavaScript","JS地下城","cors"],"summary":"規則【特定技術】必須使用 AJAX 技術串接資料 API，不可直些寫死資料在變數上。【特定技術】上方切換城市(高雄、台北)後，下方會切換該城市的各地區這次的關卡比較大的問題點就應該就是在 CORS 的","content":"<img src=\"assets/images/JSBOSS/5f/cover.png\" width=\"100%\" loading=\"lazy\" />\n<h2 id=\"規則\">規則</h2>\n<ul>\n<li>【特定技術】必須使用 AJAX 技術串接資料 API，不可直些寫死資料在變數上。</li>\n<li>【特定技術】上方切換城市(高雄、台北)後，下方會切換該城市的各地區</li>\n</ul>\n<hr>\n<p>這次的關卡比較大的問題點就應該就是在 <code>CORS</code> 的問題處理上畢竟要用前端處理公開 api\n這件事，本應由後經由後端處理，前端只要負責串接即可但因為安全考量，API 端如果沒有\n開啟 CORS 的話，就變成只能看得到吃不到 RRRRR</p>\n<p>選用 vue 來處理這次關卡</p>\n<p><a target='_blank' href=\"https://mtwmt.github.io/jsboss/public/5f/\">demo 頁</a>\n<a target='_blank' href=\"https://github.com/mtwmt/jsboss/tree/master/sourse/5f\">sourse code</a></p>\n<hr>\n<h2 id=\"將-api-資料撈出來\">將 api 資料撈出來</h2>\n<p>因為先前在寫另一個 ubike 練習時就遇過<code>CORS</code>這問題了，當時花了近一天的時間才找到\n答案可參考\n<a target='_blank' href=\"https://mtwmt.com/blog/js/api_cors_error/\">利用 google apps script 做中繼點跨網域遠端取得 api 資料</a>\n這篇文章</p>\n<p>所以次非常快速的就處理掉這個問題 XDDD</p>\n<h2 id=\"切換區域\">切換區域</h2>\n<p>我這裡的處理方式 就是先將 API 的縣市 用 filter 篩選出來 將他放到下拉式選單裡做選\n取值選到對應的縣市後 再列出縣市區域下去做篩選 做出頁面上的互動效果</p>\n<h2 id=\"底層-xmlhttprequest、fetch-api-的差異\">底層 XMLHttpRequest、Fetch API 的差異</h2>\n<p>簡單來說 <code>Fetch</code> 的出現，補足了 <code>XMLHttpRequest</code> 的缺陷這篇文章寫的還蠻清楚\n<a target='_blank' href=\"https://www.ithome.com.tw/voice/121435\">從 XHR 到 Fetch</a></p>\n<h4 id=\"xmlhttprequest-請求方式\">XMLHttpRequest 請求方式</h4>\n<pre><code class=\"language-javascript\">var xhr = new XMLHttpRequest();\nxhr.open('GET', url);\nxhr.responseType = 'json';\nxhr.onload = function () {\n  console.log(xhr.response);\n};\nxhr.onerror = function () {\n  console.log('error');\n};\nxhr.send();\n</code></pre>\n<p>更多介紹\n<a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/XMLHttpRequest\">MDN-XMLHttpRequest</a></p>\n<h4 id=\"fetch-請求方式\">fetch 請求方式</h4>\n<pre><code class=\"language-javascript\">fetch(url)\n  .then(response =&gt; response.json())\n  .then(data =&gt; console.log(data))\n  .catch(e =&gt; console.log('error', e));\n</code></pre>\n<p>更多介紹\n<a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Fetch_API/Using_Fetch\">MDN-Using Fetch</a></p>\n<hr>\n<p>這次選用了 <code>axios</code> 來處理 api 也是 Vue 官方推薦的 ajax 套件\n<a target='_blank' href=\"https://github.com/axios/axios\">axios github</a>\n<a target='_blank' href=\"https://www.kancloud.cn/yunye/axios/234845\">axios 中文文檔</a></p>\n<p>處理的過程大致上就是這樣囉，如有任何問題歡迎留言給我 也請各位多多請教！！</p>\n"},{"directory":"JSBOSS","layout":"JavaScript","slug":"6f","title":"JS地下城：6F-60秒算數遊戲","date":"2019/02/17","categories":["JS地下城"],"tags":["css","JavaScript","JS地下城"],"summary":"規則【特定技術】 0 ~ 20 秒為 1 位數計算 (5-3)，21 ~ 40 秒為 2 位數計算(30*19)，41 ~ 60 秒為 3 位數計算 (332+312)，加減乘除規則請用隨機產生，不可","content":"<img src=\"assets/images/JSBOSS/6f/cover.png\" width=\"100%\" loading=\"lazy\" />\n<h2 id=\"規則\">規則</h2>\n<ul>\n<li>\n<p>【特定技術】 0 ~ 20 秒為 1 位數計算 (5-3)，21 ~ 40 秒為 2 位數計算\n(30*19)，41 ~ 60 秒為 3 位數計算 (332+312)，加減乘除規則請用隨機產生，不可寫\n死題目，60 秒內可無限次數答題。 0~40 秒答對加一分，41 ~ 60 秒答對加五分，答錯\n扣一分，最多僅能扣到零分</p>\n</li>\n<li>\n<p>【特定技術】不可設計跳轉頁面，都得在同一頁內部切換頁面完成。</p>\n</li>\n</ul>\n<hr>\n<p>這次使用 vue 挑戰此次的關卡</p>\n<p><a target='_blank' href=\"https://mtwmt.github.io/jsboss/public/6f/\">demo 頁</a>\n<a target='_blank' href=\"https://github.com/mtwmt/jsboss/tree/master/sourse/6f\">sourse code</a></p>\n<hr>\n<h2 id=\"刻畫面\">刻畫面</h2>\n<ul>\n<li>字型載入設計稿所使用的的字型 為 <code>Roboto Condensed</code> 並非電腦裡的內建字型所以需\n要到 <a target='_blank' href=\"https://fonts.google.com/\">GoogleFont</a> 裡搜尋後取得字型連結 讓頁面載入使\n用</li>\n</ul>\n<p>使用 flex 排版 處理畫面</p>\n<h2 id=\"程式開始\">程式開始</h2>\n<h3 id=\"畫面切分\">畫面切分</h3>\n<p>將畫面拆分成三個子組件分別為初始畫面 <code>start</code> 遊戲進行 <code>play</code> 遊戲結束 <code>end</code></p>\n<ul>\n<li>雷 1 原本是使用 display 的 block 跟 none 做作畫面切換後來發現在程式執行時 三個\n畫面會同時執行(這不是我要的結果 rrrrr) 試了許多方式後，改用 <code>v-if</code> <code>v-else</code> 後\n才能分別執行</li>\n</ul>\n<p>template 如下</p>\n<pre><code class=\"language-javascript\">var vm = new Vue({\n  el: '#app',\n  data: {\n    page: 'start',\n  },\n  template: `\n    &lt;div&gt;\n      &lt;start v-if=&quot;page === 'start'&quot; /&gt;\n      &lt;play v-else-if=&quot;page === 'play'&quot; /&gt;\n      &lt;end v-else=&quot;page === 'end'&quot; /&gt;\n    &lt;/div&gt;``\n  `,\n});\n</code></pre>\n<p>當 data 裡的 page ==‘start’ 時則 start 的畫面就會顯示，其他兩個畫面則不會顯示在\nhtml 裡 code 也不會存在</p>\n<h3 id=\"倒數計時\">倒數計時</h3>\n<p>這裡我選用 <code>setTimeout</code> 做倒數計時或許是因為對程式還沒很熟練 這部份我寫了好久</p>\n<p>在 <code>methods</code> 裡做一個 <code>countdown</code> 的函式 處理倒數計時</p>\n<pre><code class=\"language-javascript\">countdown(){\n  let t;\n  if( --this.time === 0 ){\n    clearTimeout(t);\n  }else{\n    t = setTimeout( this.countdown, 1000 );\n  }\n}\n</code></pre>\n<p>這裡學到了另一種運算式的處理方式</p>\n<blockquote>\n<p>假如 x 是 3，那 --x 將把 x 設定為 2 並回傳 2，而 x-- 會回傳 3 ， 接著才把 x 設\n定為 2。</p>\n</blockquote>\n<p>可參考\n：<a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Expressions_and_Operators#%E8%B3%A6%E5%80%BC%E9%81%8B%E7%AE%97%E5%AD%90\">MDN-運算式與運算子</a></p>\n<p>另一種方式(過去常用的方式)</p>\n<pre><code class=\"language-javascript\">countdown(){\n  let t;\n  if( this.time === 0 ){\n    clearTimeout(t);\n  }else{\n    this.time--;\n    t = setTimeout( this.countdown, 1000 );\n  }\n}\n</code></pre>\n<ul>\n<li>雷 2 之前在 <code>computed</code> 裡做 發現倒數計時跳很快，後來才想到 <code>computed</code> 會根\n據<code>data</code>裡面的數值變動 自動執行程式 才會導致時間錯亂</li>\n</ul>\n<h3 id=\"亂數取值\">亂數取值</h3>\n<p>之前在\n<a target='_blank' href=\"https://mtwmt.github.io/blog/JS30/30_Whack-A-Mole/\">js30 天的最後一個單元</a> 有練\n習到亂數取值所以就直接將程式拿來用了</p>\n<pre><code class=\"language-javascript\">randTime(min, max) {\n  return Math.round(Math.random() * (max - min) + min);\n}\n</code></pre>\n<h3 id=\"題目製作\">題目製作</h3>\n<p>再來就是一連串的算式處理了</p>\n<p>數字 跟 加減乘除 都跑亂數</p>\n<p>過程中也有使用過 <code>eval</code> 處理數字運算但爬了文後 文裡都說\n<a target='_blank' href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval#Don.27t_use_eval.21\">避免在不必要的情况下使用 eval</a></p>\n<p>所以就選用 if else 的處理方式</p>\n<p>在題目處理上 我這裡過濾掉了一些題目答案裡有小數點的 、除不盡的 、 負數的</p>\n<p>遇到這些題目 就回傳 重新再跑一次</p>\n<h3 id=\"答題得分\">答題得分</h3>\n<p>這裡使用 <code>input</code> <code>v-model</code> 跟答案做比對輸入的數值跟 答案一樣 就加分，不一樣就減\n分將分數紀錄到 <code>play</code> 子組件裡的 <code>score</code> 等到 <code>countdown</code> 倒數計時時間為 0 秒時\n再將 <code>score</code>的分數 回傳到父組件 做記綠( 因為要給<code>end</code>子組件取分 )</p>\n<ul>\n<li>雷 3( 雙向綁定 子組件溝通 ) 之前以為 只要直接改子組件 data 裡的值 父組件也會跟\n著改 結果發現 console 裡一直報錯 所傳的值也並非我預期(被 vuex 寵壞了) 後來估狗\n了一下 要使用 <code>this.$emit</code> 方式才能將子組件裡的值 回傳到父組件 供其他子組件取\n用</li>\n</ul>\n<p>父組件</p>\n<pre><code class=\"language-html\">&lt;play @getscore=&quot;getscore&quot;&gt;&lt;/play&gt;\n</code></pre>\n<pre><code class=\"language-javascript\">data:{\n  score: '',\n},\nmethods: {\n  getscore( data ){\n    this.score = data;\n  },\n},\n</code></pre>\n<p>子組件 將值傳到父組件</p>\n<pre><code class=\"language-javascript\">// this.$emit('綁定名稱',值);\nthis.$emit('getscore', this.score);\n</code></pre>\n<p>40 秒前 跟 40 秒後的計分方式有改變，且題目也有變動所以在 40 前出現的題目 超過 40\n秒後答完題 一樣也是 40 秒前的計分方式</p>\n<p>所以我多加了題目判斷當題目還是 2 位數時 跟 40 秒前的處理方式是一樣的</p>\n<ul>\n<li>雷 4 <code>.length</code> 在<code>number</code> 型態處理時 會出現<code>undefined</code>，必須先轉字串後 才能得\n到所要的長度</li>\n</ul>\n<p>到這裡就處理的差不多囉再來就是遊戲測試囉 以上！如有更好的建議 或 寫法上有錯誤 不\n吝賜教 感謝您花時間觀看</p>\n<h2 id=\"後記\">後記</h2>\n<p>有些地方還能再更優化些倒數計時上可以改時間方式處理</p>\n"},{"directory":"JSBOSS","layout":"JavaScript","slug":"7f","title":"JS地下城：7F-畫版","date":"2019/03/08","categories":["JS地下城"],"tags":["JS地下城","JavaScript","canvas"],"summary":"規則【特定技術】繪圖區請使用 Canvas 來設計，上方的控制列與下方的畫筆調整可不用SAVE ：點擊後可直接下載轉出的 PNG 圖片 CLEAR ALL：清除畫版樣式 UNDO、REDO：上一步、下","content":"<img src=\"assets/images/JSBOSS/7f/cover.png\" width=\"100%\" loading=\"lazy\" />\n<h2 id=\"規則\">規則</h2>\n<ul>\n<li>【特定技術】繪圖區請使用 Canvas 來設計，上方的控制列與下方的畫筆調整可不用\nSAVE ：點擊後可直接下載轉出的 PNG 圖片 CLEAR ALL：清除畫版樣式 UNDO、REDO：上\n一步、下一步點擊箭頭時，功能列介面皆可進行收闔</li>\n<li>【擴充功能】請再自行增加「兩個功能」</li>\n</ul>\n<hr>\n<p>這次最大的收獲應該就是克服了 canvas 的心理障礙 XDD 寫完後發現 其實也還好嘛 (笑～</p>\n<p><a target='_blank' href=\"https://mtwmt.github.io/jsboss/public/7f/\">demo 頁</a>\n<a target='_blank' href=\"https://github.com/mtwmt/jsboss/tree/master/sourse/7f\">sourse code</a></p>\n<hr>\n<p>canvas 起手式先在 html 上 訂出一塊 canvas 的畫布 決定這次的繪畫範圍</p>\n<pre><code class=\"language-html\">&lt;canvas&gt;&lt;/canvas&gt;\n</code></pre>\n<h2 id=\"設定畫布\">設定畫布</h2>\n<pre><code class=\"language-javascript\">var $canvas = document.querySelector('canvas');\nvar ctx = $canvas.getContext('2d');\n</code></pre>\n<p>這此的繪圖環境是以 2D 方式呈現 所以 <code>getContext</code> 上 就是輸入 2d 設定好後 接下來\n我們就必需緊抓著 <code>ctx</code> 這個名字不放</p>\n<hr>\n<h2 id=\"設定筆畫樣式\">設定筆畫樣式</h2>\n<pre><code class=\"language-javascript\">ctx.lineWidth = 10; //設定線寬\nctx.lineCap = 'round'; //設定線頭樣式\nctx.strokeStyle = '#000000'; //設定顏色\n</code></pre>\n<hr>\n<h2 id=\"繪製路徑\">繪製路徑</h2>\n<pre><code class=\"language-javascript\">ctx.beginPath(); //開始繪製\nctx.moveTo(10, 10); //起始點\nctx.lineTo(500, 10); //結束點\nctx.stroke(); //進行繪製\n</code></pre>\n<p>當我們知道線條是這樣畫出來時那我們就能開始思考</p>\n<p>當滑鼠按下時 去取得當下的坐標位置，移動時，邊存儲存邊繪置當下移動的路徑如此反覆\n循環，即可繪製出</p>\n<hr>\n<h2 id=\"滑鼠事件\">滑鼠事件</h2>\n<pre><code class=\"language-javascript\">// mousedown 當滑鼠按下時\nvar status = false, //控制狀態，避免事件連續發生\n  posX,\n  posY;\n\n$canvas.addEventListener('mousedown', function (e) {\n  if (status) return;\n  status = true;\n  // 將得到值存到變數裡\n  posX = e.offsetX;\n  posY = e.offsetY;\n});\n\n// mousemove 當滑鼠移動時\nwindow.addEventListener('mousemove', function () {\n  if (!status) return;\n  ctx.beginPath(); //開始繪製\n  ctx.moveTo(posX, posY); //起始點\n  ctx.lineTo(e.offsetX, e.offsetY); //結束點\n  ctx.stroke();\n  // 儲存當下的結束點，在滑鼠移動時 這個動作一直持繽進行著\n  posX = e.offsetX;\n  posY = e.offsetY;\n});\n\n// mouseup 當滑鼠放開時\nwindow.addEventListener('mouseup', function (e) {\n  status = false;\n});\n</code></pre>\n<p>如此一來 就能繪製出一條隨心所欲的路徑</p>\n<hr>\n<h2 id=\"影像儲存\">影像儲存</h2>\n<pre><code class=\"language-javascript\">document.querySelector('.save').addEventListener('click', function () {\n  // 將剛剛繪製好的圖像存成 base64 格式\n  var dataURL = $canvas.toDataURL('image/png');\n\n  // 將圖檔存出來\n  this.href = dataURL;\n  this.setAttribute('download', Date.now());\n});\n</code></pre>\n<h2 id=\"影像匯入\">影像匯入</h2>\n<pre><code class=\"language-javascript\">document.querySelector('[type=&quot;file&quot;]').addEventListener('change', function () {\n  var file = this.files[0];\n  var reader = new FileReader();\n  // 將圖像轉 base64 格式\n  reader.readAsDataURL(file);\n  reader.onload = function () {\n    var img = new Image();\n    img.src = this.result;\n    img.onload = function () {\n      // 將圖像匯製到 canvas畫布上\n      ctx.drawImage(img, 0, 0);\n    };\n  };\n});\n</code></pre>\n<p>了解 影像儲存 跟 匯入後做一個陣列 把 繪製完後 的圖像 存 base64 存到陣列裡就能處\n理上一步一下步的動作囉</p>\n<hr>\n<h2 id=\"矩型繪製\">矩型繪製</h2>\n<p>在畫矩形方面 試過了很多方試 一開始在 mousemove 上直接畫 但發現矩形會一直重疊如下\n圖 <img src=\"assets/images/JSBOSS/7f/001.png\" /> 找不到如何清除掉上一個矩形的方\n式，後來鎖性先使用 css 繪製，在 mouseup 後 再把整塊矩形用 canvas 畫上去</p>\n<p>目前還卡在無法順利的將文字輸入，囧~~~ 希望有高手大大能夠指點一下了</p>\n<p>基本大致就是這樣囉 其他的就留給各位慢慢去探索啦</p>\n<p>此篇文章 若有新的收穫會再持續更新</p>\n"},{"directory":"JSBOSS","layout":"JavaScript","slug":"8f","title":"JS地下城：8F-井字遊戲","date":"2019/03/06","categories":["JS地下城"],"tags":["css","JavaScript","JS地下城"],"summary":"規則【特定技術】先手為 O，後手為 X，某方獲勝時，上方會紀錄各方的獲勝戰績【特定技術】每回合結束後，會判定結果頁(平手、Ｏ 獲勝、X 獲勝)【特定技術】需符合 RWD，能在低螢幕解析度也能遊玩，介面","content":"<img src=\"assets/images/JSBOSS/8f/cover.png\" width=\"100%\" loading=\"lazy\" />\n<h2 id=\"規則\">規則</h2>\n<ul>\n<li>【特定技術】先手為 O，後手為 X，某方獲勝時，上方會紀錄各方的獲勝戰績</li>\n<li>【特定技術】每回合結束後，會判定結果頁(平手、Ｏ 獲勝、X 獲勝)</li>\n<li>【特定技術】需符合 RWD，能在低螢幕解析度也能遊玩，介面不能超出 x 軸，至少在以\n下解析度能夠遊玩。 iPhone SE 320px iPhone 8 375px iPhone PLUS 414px</li>\n<li>【特定技術】請使用瀏覽器離線儲存技術，將戰績保留起來，重新打開遊戲也仍可觀看到\n歷史戰績。技術請任選以下幾種 Cookie localStorage</li>\n</ul>\n<hr>\n<p>這次使用 vue 挑戰此次的關卡</p>\n<p><a target='_blank' href=\"https://mtwmt.github.io/jsboss/public/8f/\">demo 頁</a>\n<a target='_blank' href=\"https://github.com/mtwmt/jsboss/tree/master/sourse/8f\">sourse code</a></p>\n<hr>\n<h2 id=\"css-外框字\">css 外框字</h2>\n<h3 id=\"文字陰影方式(text-shadow)\">文字陰影方式(text-shadow)</h3>\n<p>此為最常見的一種方式</p>\n<pre><code class=\"language-css\">text-shadow: -5px 5px #fff, 5px 5px #fff, 5px 5px #fff, 5px -5px #fff;\n</code></pre>\n<h3 id=\"css3(text-stroke)\">css3(text-stroke)</h3>\n<p>有了 css3 後 可直接畫出外框字</p>\n<pre><code>-webkit-text-stroke: 5px #fff;\n</code></pre>\n<h2 id=\"思維\">思維</h2>\n<p>初始值 全部都是歸 0 開始遊戲後 O 的這一方 +1 X 的這一方 -1</p>\n<p>連上一條線後 總數 = 3 時 代表 O 方獲勝 反之 =-3 則 X 如果到最後一步 都沒出現 3\n這個值 就是平手</p>\n<h2 id=\"程式開始\">程式開始</h2>\n<p>這個遊戲加起來總共有八條線可以連所以設計出了以下這個陣列 ps.個人龜毛了些 所以從\n1 開始算</p>\n<pre><code class=\"language-javascript\">watch:{\n  step(){\n    this.score.map( e=&gt;{\n      if( e !== 0 ){\n        this.cal = [\n          this.score[1] + this.score[2] + this.score[3],\n          this.score[4] + this.score[5] + this.score[6],\n          this.score[7] + this.score[8] + this.score[9],\n          this.score[1] + this.score[4] + this.score[7],\n          this.score[2] + this.score[5] + this.score[8],\n          this.score[3] + this.score[6] + this.score[9],\n          this.score[1] + this.score[5] + this.score[9],\n          this.score[3] + this.score[5] + this.score[7]\n        ]\n      }\n    });\n    this.playing;\n  },\n},\n</code></pre>\n<p>由 watch 監控 每走一步就計算一次，當有連成一直線時 就會直接跳到勝利畫面如下(總覺\n得這串程式碼 應該可以再更優化些!)</p>\n<pre><code class=\"language-javascript\">computed:{\n  playing(){\n    if( this.cal.indexOf(3) &gt;=0 ){\n      return this.gopage('winner','〇');\n    }else if( this.cal.indexOf(-3) &gt;=0 ){\n      return this.gopage('winner','✖');\n    }else{\n      if( this.step === 9 &amp;&amp; this.cal.indexOf(3) &gt;= -1 &amp;&amp; this.cal.indexOf(-3) &gt;= -1 ){\n        return this.gopage('flat','');\n      }\n    }\n  }\n},\n</code></pre>\n<h3 id=\"localstorage-紀錄戰績\">localStorage 紀錄戰績</h3>\n<p>這裡我選用 <code>localStorage</code> 來紀錄戰績</p>\n<p>下面是 <code>Cookie</code> 與 <code>localStorage</code> 的比較他們的共同點都是保存在瀏覽器裡面</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特性</th>\n<th style=\"text-align:left\">Cookie</th>\n<th style=\"text-align:left\">localStorage</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">生命週期</td>\n<td style=\"text-align:left\">可以設定到期時間，如果是由瀏覽器自動產生的 cookie 的話，則瀏覽器關掉後就失效了</td>\n<td style=\"text-align:left\">不會過期，除非手動清除(<code>localStorage.clear()</code>)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">存放大小</td>\n<td style=\"text-align:left\">4KB</td>\n<td style=\"text-align:left\">5MB</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">http 請求</td>\n<td style=\"text-align:left\">主要是用於 server 端 但保存過多的資料會帶來效能上的問題</td>\n<td style=\"text-align:left\">主要用於本地端(即瀏覽器)中保存</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">易用性</td>\n<td style=\"text-align:left\">需要自己封裝程式碼 較不方便</td>\n<td style=\"text-align:left\">原生的 function 就能使用的 也可以再次封裝對 object 跟 array 支援度較高</td>\n</tr>\n</tbody>\n</table>\n<p>闖關過程大約就是這樣了 程式碼部份可以到我\n的<a target='_blank' href=\"https://github.com/mtwmt/jsboss/tree/master/sourse/8f\">sourse code</a>上看囉</p>\n<p>感謝您看到這裡若是對我的文章 或是 程式碼方面有任何問題的話 也請多多指教!</p>\n"},{"directory":"JSBOSS","layout":"JavaScript","slug":"9f","title":"JS地下城：9F-抽獎轉盤","date":"2019/03/12","categories":["JS地下城"],"tags":["css","JavaScript","JS地下城"],"summary":"規則【特定技術】2017 遊戲輪盤規則輪盤只能轉 20 次，人人有獎 Flight：1 份 Child：4份 Anything：5 份 Wifi：5 份 Wish：5 份已經被抽到的獎項，就不可再次出","content":"<img src=\"assets/images/JSBOSS/9f/cover.png\" width=\"100%\" loading=\"lazy\" />\n<h2 id=\"規則\">規則</h2>\n<ul>\n<li>\n<p>【特定技術】2017 遊戲輪盤規則輪盤只能轉 20 次，人人有獎 Flight：1 份 Child：4\n份 Anything：5 份 Wifi：5 份 Wish：5 份已經被抽到的獎項，就不可再次出現</p>\n</li>\n<li>\n<p>【特定技術】2018 遊戲輪盤規則編號 20：69 份編號 19：20 份編號 18：10 份編號\n17：5 份編號 16~2：各編號皆 1 份編號 1：1 份</p>\n<p>請移除獎品名稱與 icon，僅單純顯示編號已經被抽到的獎項，就不可再次出現</p>\n</li>\n<li>\n<p>【特定技術】以上兩個遊戲轉盤，不可直接寫死樣式在網頁上，請將品項以「JSON」格式\n來儲存，再藉由 JS 跑迴圈依序顯示獎項在輪盤上，此舉用意為若日後輪盤會新增獎項時\n，只要在 JSON 格式上新增即可。</p>\n</li>\n<li>\n<p>【特定技術】點選中間的「PRESS」後，指針開始滾動，滾動到一定時間後，就會停止並\n指向到獎項上。</p>\n</li>\n<li>\n<p>【特定技術】請考量中獎機率，以 2018 來說，總計有 120 份獎品，所以編號 1 的獎品\n第一次抽中機率是 1/120，而隨著品項變少也會跟著重新計算中獎率。</p>\n</li>\n</ul>\n<hr>\n<p><a target='_blank' href=\"https://mtwmt.github.io/jsboss/public/9f/\">demo 頁</a>\n<a target='_blank' href=\"https://github.com/mtwmt/jsboss/tree/master/sourse/9f\">sourse code</a></p>\n<p>使用 vue 挑戰此次的關卡</p>\n<p>此次的關卡 需要大量計算圓形角度利用這些角度 再去繪製出輪盤的圓餅圖這次依然選用\ncss 去繪製(跟它比較熟 XDD 在計算方式上，沒有用到很複雜的公式</p>\n<hr>\n<h2 id=\"前置\">前置</h2>\n<ul>\n<li>請考量中獎機率，以 2018 來說，總計有 120 份獎品，所以編號 1 的獎品第一次抽中機\n率是 1/120，</li>\n<li>而隨著品項變少也會跟著重新計算中獎率。</li>\n</ul>\n<p>在中獎機率上，我把所有的獎項依照他的份數去分配比例，份數多面積佔的大，反之份數少\n則面積小被抽中後的獎項會 -1 後 會再次調整每個獎項的圓餅圖大小</p>\n<ul>\n<li>因應色系的底色 必需要有顏色交錯呈現 (一藍一灰(?)</li>\n</ul>\n<p>代表上面的獎項需為雙數，但在這之前 獎項若被抽光了 其品項就會有單數的機率所以我這\n裡調整為若是當下被抽掉的項目 獎項會變成單數時，就暫時不要抽掉 (若剛好轉到的獎項\n是 0 時 就會再重轉一次)等下一個獎項被抽光 變雙數時 再一起抽掉 直到最後兩個 被抽\n光的時後 就會跳出 獎項全被抽光的 alert</p>\n<hr>\n<p>這裡的命名我會與我的 sourse code 取名一樣，在看的時後會比較好對照</p>\n<h2 id=\"css-圓餅圖\">css 圓餅圖</h2>\n<img src=\"assets/images/JSBOSS/9f/001.png\"/>\n如圖 淺黃色 `item` 部份 可以將他視為遮罩 \n藍色`fill` 則是主要顯示區域，紅色框框就是被遮住的部份 \n然後中心點設計在藍色半圓形的中間，層層堆疊後，這樣就能畫出每個獎項所要的範圍\n<pre><code class=\"language-html\">&lt;div class=&quot;item&quot;&gt;\n  &lt;div class=&quot;fill&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.item {\n  position: relative;\n  top: 50px;\n  left: 300px;\n  width: 100px;\n  height: 200px;\n  background: #ffc;\n  border-radius: 0px 0 0 0;\n  overflow: hidden;\n  .fill {\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 200px;\n    height: 100px;\n    background: #159;\n    border-radius: 200px 200px 0 0;\n    transform: rotate(-90deg);\n    transform-origin: 50% 100%;\n  }\n}\n</code></pre>\n<p>在 <code>transform: rotate(0deg)</code> 的時後 圓餅所呈現的是 90 度，所以我們必需將它 減\n-90 度 <code>transform: rotate(-90deg)</code> 才會是圓餅圖範圍的起始點</p>\n<p>但!! 人生就是有這個 but!! 這樣的圓餅圖最多只能畫到 180 度 那若是其中一種獎項的份\n數太多超過 180 度 多出的角度就會空出一塊!!!</p>\n<p>我這裡處理的方式是 再多畫一塊 fill，命名為 <code>fill2</code> (超沒創意 XD) 去補足另一塊所\n缺的角度例 有一塊的角度 算出來是 235 度，那就是 235-180 = 55 那多出的那一塊就是\n畫 55 度去補上</p>\n<p>要注意的是 因為補上的這一塊是另一半的圓，所以這個半圓的啟起點要從 180 度下去計算\n<code>transform: rotate(90deg)</code> 才會是多出來的這一塊半圓的起始點 然後記得 這要把這個\n<code>item</code> 的 <code>overflow:hidden</code> 打開 多出的那一塊才會看的見 如下圖</p>\n<img src=\"assets/images/JSBOSS/9f/002.png\"/>\n<p>這裡看到我畫出來的樣子：</p>\n<!-- <img src=\"iframe //codepen.io/mtw/embed/NJaepN/ 100% 400\" /> -->\n<iframe src=\"//codepen.io/mtw/embed/NJaepN/\"></iframe>\n<h2 id=\"用程式畫大餅\">用程式畫大餅</h2>\n<p>基本的圖形畫完後，接著就可以讓程式把大餅畫出來啦～</p>\n<p>2017 年獎項 ( 因為題目上似乎有 bug 圖上的顯示有 6 款品項，而列出來的只有 5 項，\n所以在份數這方面我就另外自訂啦～</p>\n<p>Flight：1 份 Wish：5 份 Anything：3 份 Wifi：4 份 Child：2 份 Movie : 5 份</p>\n<p>合計共 20 份</p>\n<p>360 / 20 = 18</p>\n<p>每份所分得的角度是 18 度 然後再用這角度分別 算出每個獎項所需要的角度</p>\n<h3 id=\"json-列表設計\">json 列表設計</h3>\n<pre><code class=\"language-json\">&quot;item&quot;: {\n  // 名稱: [ 份數, ICON ]\n  &quot;Flight&quot;: [1,&quot;fas fa-plane&quot;],\n  &quot;Wish&quot;: [7,&quot;fas fa-birthday-cake&quot;],\n  &quot;Anything&quot;: [3,&quot;fas fa-star&quot;],\n  &quot;Wifi&quot;: [1,&quot;fas fa-star&quot;]\n}\n</code></pre>\n<h3 id=\"取出物件名稱\">取出物件名稱</h3>\n<pre><code class=\"language-javascript\">getItem(){\n  return Object.keys(this.item);\n},\n</code></pre>\n<p>可用 <code>Object.keys</code> 取 或 <code>for-in</code>\n<a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\">MDN-Object.keys()</a></p>\n<h3 id=\"算出每個獎項的角度\">算出每個獎項的角度</h3>\n<pre><code class=\"language-javascript\">\ngetAngle(){\n  let _self = this,\n      cnt = cnt || 0,\n      angle,\n      angleTemp = [],\n      angleAccu = [],\n      angleItem = [];\n\n  // 先將份數加總\n  _self.getItem.map(e=&gt;{\n    cnt += _self.item[e][0];\n\n    // 暫存每個獎項的份數\n    angleTemp.push( _self.item[e][0]);\n  });\n  // 算出每份所需的角度\n  angle = Math.round(360 / cnt);\n  angleTemp.map((e,i)=&gt;{\n    // 每個獎項的角度\n    e = e * angle;\n\n    // 陣列累加 算出每個大餅要放的位置(註)\n    // angleItem[0] = 0;\n    // angleItem[1] = angleTemp[0] * angle;\n    // angleItem[2] = angleItem[1] + angleTemp[1] * angle;\n    // angleItem[3] = angleItem[2] + angleTemp[2] * angle;\n    // angleItem[4] = angleItem[3] + angleTemp[3] * angle;\n    // angleItem[5] = angleItem[4] + angleTemp[4] * angle;\n\n    angleAccu[i] = angleAccu[i] || 0;\n    angleAccu[i+1] = angleAccu[i] + e;\n    angleItem.push( e )\n  });\n  return {\n    angleItem: angleItem,\n    angleAccu: angleAccu\n  }\n},\n</code></pre>\n<ul>\n<li>註：在陣列累加這部份有稍微小小卡了一下，一直在思考要怎麼寫出來，後來鎖性一個一\n個寫出來出來 列到最後 看出它的規律 再用迴圈跑</li>\n</ul>\n<p>大餅畫好後 就是把指針放上去轉 指到哪個 哪個就中獎所以一樣也是 css 找出中心點 把\n指針位置放上去這裡就不多說了</p>\n<h2 id=\"轉出得獎品\">轉出得獎品</h2>\n<p>先前我們已經利用 <code>angleAccu</code> 取得每塊大餅的位置我們就可以用這個角度去取得中獎品\n項</p>\n<pre><code class=\"language-javascript\">press(){\n  // 按下 press 後 開始轉動\n  // 轉動前將上一位中將品項重置\n  // 做個亂數決定要轉幾圈\n  // 可參照 sourse code\n  // 儲存轉動狀態，當在轉的時後 再按下會失效\n  this.run = true;\n  ....\n  // 開轉\n  this.runTrun()\n},\nrunTrun(){\n  // 使用 setTimeout 去做圈數累加\n  let _self = this,\n      t;\n\n  if( _self.deg &gt;= _self.stopdeg ){\n    clearTimeout(t);\n    // 清除轉動狀態。\n    _self.run = false;\n    // 停止後 算出角度的餘數 丟到 getWinner\n    this.getWinner( Math.round(_self.deg) % 360);\n  }else{\n    _self.deg = parseFloat( _self.deg,10 ) || 0;\n    t = setTimeout( _self.runTurn ,2);\n    // 轉圈速率\n    if( _self.deg &lt; 720 ){\n      _self.deg += 10;\n    }else if( _self.deg &lt; 1800 ){\n      _self.deg += 8;\n    }else if( _self.deg &lt; 2520 ){\n      _self.deg += 4;\n    }else if( _self.deg &lt; 2880 ){\n      _self.deg += 2;\n    }else{\n      _self.deg += 1;\n    }\n  }\n},\ngetWinner( obj ){\n  let _self = this;\n  _self.getAngle.angleAccu.map((e,i)=&gt;{\n    if( obj &gt; _self.getAngle.angleAccu[i] &amp;&amp; obj &lt;= _self.getAngle.angleAccu[i+1] ){\n      _self.winner = _self.getItem[i];\n    }\n  });\n}\n</code></pre>\n<hr>\n<p>處理到這 大致上也完成的差不多啦，剩下的就是一些細節的調整是說調細節也是需要花很\n多時間去處理，再來就自行發揮囉～</p>\n<p>以上是個人絞盡腦汁後所想到的處理方式了若是看到我以上的處理方式有更好的建議也歡迎\n分享一起討論^_^</p>\n<h2 id=\"後記\">後記</h2>\n<p>這次要算的數學好多啊…常常算到一半時 腦袋就亂掉 思緒中斷後 又要重來所以花了很\n多時間去處理數字這部份不過看到完成後的成果 還是很開心的啦</p>\n"},{"directory":"life","layout":"life","slug":"A50_root","title":"Samsung Galaxy A50 root","date":"2019/08/27","categories":["life"],"tags":["life","mobile","root","刷機"],"summary":"ROOT 機型 Samsung Galaxy A50 (SM-A505GN/DS)請詳閱以下公開說明書再刷機請先備份所有重要資料刷機有風險，失敗手機掛點一概不負責，請仔細考慮清楚檔案準備三星驅動程式S","content":"<h1 id=\"root-機型-samsung-galaxy-a50-(sm-a505gn/ds)\">ROOT 機型 Samsung Galaxy A50 (SM-A505GN/DS)</h1>\n<h1 id=\"請詳閱以下公開說明書再刷機\">請詳閱以下公開說明書再刷機</h1>\n<ul>\n<li>請先備份所有重要資料</li>\n<li>刷機有風險，失敗手機掛點一概不負責，請仔細考慮清楚</li>\n</ul>\n<h2 id=\"檔案準備\">檔案準備</h2>\n<ul>\n<li>\n<p>三星驅動程式\n<a target='_blank' href=\"https://developer.samsung.com/galaxy/others/android-usb-driver-for-windows\">SAMSUNG_USB_Driver_for_Mobile_Phones.zip (35.12MB)</a></p>\n</li>\n<li>\n<p>刷機程式 <a target='_blank' href=\"https://odindownload.com/\">Odin3_v3.13.1</a></p>\n</li>\n<li>\n<p><a target='_blank' href=\"https://github.com/topjohnwu/Magisk/releases/download/manager-v7.3.2/MagiskManager-v7.3.2.apk\">MagiskManager-v7.3.2.apk</a></p>\n</li>\n<li>\n<p><a target='_blank' href=\"https://boycracked.com/portfolio/samsung-galaxy-a50-sm-a505gn-ds-repair-firmware/\">Samsung Galaxy A50 SM-A505GN/DS Repair Firmware</a>\n下載 下列這五個 md5 檔案 <img src=\"assets/images/A50_root/download.jpg\"  loading=\"lazy\" /></p>\n</li>\n</ul>\n<h2 id=\"a50-按鍵組合\">A50 按鍵組合</h2>\n<p>強制關機 <code>音量下鍵 + 電源鍵</code> 兩個按著不放約七秒開啟 download 畫面 <code>在關機模式時</code>\n<code>音量上鍵 + 音量下鍵 + 插入type-c線</code></p>\n<h2 id=\"步驟\">步驟</h2>\n<ol>\n<li>\n<p>OEM 解鎖：設定 &gt; 關於手機 &gt; 軟體資訊 &gt; 版本號碼( 點擊 5~8 次 ) 會跳出\n<code>開發者模式</code>&gt; 回到設定下面會多出 <code>開發人員選項</code> 接著把 OEM 解鎖 與 USB 偵錯\n這兩個選項都打開 接著將手機完全關機</p>\n</li>\n<li>\n<p>完全關機後 按著 <code>音量上鍵 + 音量下鍵 + 插入type-c線</code> 選第二個 <code>長按音量上鍵</code>\n<img src=\"assets/images/A50_root/root01.jpg\"  width=\"60%\"/> 會進入解鎖模式 (\n忘了拍) 再按一次 <code>音量上鍵</code> (註:一旦解鎖 oem 鎖，原本在手機裡的資料就會全部消\n失。執行前請三思！) 接下來會自動關機又開機</p>\n</li>\n<li>\n<p>開機時會出現 <code>淺藍底白色的安卓機器人</code>畫面 接著會再自動重新開機 出現新機設定設\n定完後 再執行一次第一點 把 <code>開發者模式</code> 打開 再設定一次\n<img src=\"assets/images/A50_root/root02.jpg\"  width=\"60%\"/> 會看到 OEM 解鎖\n已經變成灰色 不能更改 這時才真的是解鎖成功 ( 如果還沒變灰色 表示失敗 重覆步驟\n2 再來一次)</p>\n</li>\n<li>\n<p>再來將\n<code>AP_A505GNDXU1ASBA_CL15423456_QB22223752_REV00_user_low_ship_meta_OS9.tar.md5</code>\n與<code>MagiskManager-v7.3.2.apk</code> 這兩支檔案 放到手機裡的 download 資料夾接著安裝\n<code>MagiskManager-v7.3.2.apk</code> 再來執行 <code>MagiskManager</code> 如下面影片中的步驟</p>\n</li>\n</ol>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/s2Xp-lQg1xs?start=470\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<ol start=\"5\">\n<li>\n<p><img src=\"assets/images/A50_root/root03.jpg\" width=\"60%\"/> 跑完這個畫面後 在\n手機的 download 資料夾裡 會多出一個 <code>magisk_patched.tar</code> 這個檔案，把它存到電\n腦上 我們要用這個檔案來刷機 然後 將手機完全關機</p>\n</li>\n<li>\n<p>完全關機後 按著 <code>音量上鍵 + 音量下鍵 + 插入type-c線</code> 進入畫面淺藍色後 選第一\n個 <code>短按音量上鍵</code> 會進入圖中這畫面確認 OEM LOCK OFF 後 就準備刷機囉\n<img src=\"assets/images/A50_root/root04.jpg\" width=\"60%\"/></p>\n</li>\n</ol>\n<ol start=\"7\">\n<li>\n<p>打開 <code>Odin3</code> 如圖 切換到 options 記得將 <code>auto reboot</code> 點掉再將剛剛做好的\n<code>magisk_patched.tar</code> 拉到 AP 上 接著按 start 開始刷機\n<img src=\"assets/images/A50_root/root05.jpg\" /> 成功後會出現 左上角會出現 綠\n色 pass! 失敗會出現 紅色 fail! (就變磚了) 後續會教如何救</p>\n</li>\n<li>\n<p>接著拔掉傳輸續，按著 <code>音量下鍵 + 電源鍵</code> 關機</p>\n</li>\n</ol>\n<ul>\n<li>營幕熄掉後 馬上按著 <code>音量上鍵 + 電源鍵</code></li>\n<li>看到警告畫面時放開<code>電源鍵</code> 成功的話會進入原廠的 recovery，如果是出現 SAMSUNG\n的 logo 的話，請立刻重新按 <code>著音量下鍵和電源鍵</code> 7 秒再重覆第八步驟直到成功進入\nrecovery</li>\n</ul>\n<ol start=\"9\">\n<li>\n<p>進入 recovery，找到 Wipe data/factory reset (註:音量上下鍵是切換選項、電源鍵\n則是確定鍵) 將資料重設</p>\n</li>\n<li>\n<p>重設完成後找到 <code>Reboot system now</code> 把手機重新開機 &gt; 按下去的同時請立刻按著電\n源鍵和音量上鍵 &gt; 出現警告畫面再放開</p>\n</li>\n<li>\n<p>如果成功，手機會自動重新開機兩次，重新開機的過程會有些不自然(像死當那樣重開\n，屬於正常現象)，會再次出現新機設定的頁面，完成新機設定之前都有可能會自動重\n開(也是正常現象)</p>\n</li>\n<li>\n<p>程式集裡應該會多了 magisk manager，如果沒有的話 再安裝一次\nMagiskManager-v7.3.2.apk (需要連上網) 出現 已安裝 就表示 root 成功了\n<img src=\"assets/images/A50_root/root06.jpg\" width=\"60%\" /></p>\n</li>\n</ol>\n<h2 id=\"影片參考\">影片參考</h2>\n<p>ps 因影片上所刷的機子不是 A50 所以在一些手勢上會不太一樣 請參考上面的按鍵組合\n<a target='_blank' href=\"https://www.youtube.com/watch?v=s2Xp-lQg1xs\">https://www.youtube.com/watch?v=s2Xp-lQg1xs</a></p>\n<hr>\n<h1 id=\"救磚\">救磚</h1>\n<ol>\n<li>\n<p>刷機失敗後 營幕如圖 <img src=\"assets/images/A50_root/gg01.jpg\" width=\"60%\" /></p>\n</li>\n<li>\n<p>接著打開 <code>Odin3</code> 將之前下載的 md5 放上去 照著檔名開頭放 按下 start\n<img src=\"assets/images/A50_root/gg02.jpg\"/></p>\n</li>\n<li>\n<p>按下 start 後 手機會開始跑等重新開機後 手機就救回來了\n<img src=\"assets/images/A50_root/gg03.jpg\" width=\"60%\" /></p>\n</li>\n</ol>\n<hr>\n<p>花了一整天才刷機成功</p>\n<p>神魔不能轉的原因 我想應該是 這個問題要把 se 狀態 從 Enforcing 改成 Permissive 但\n目前在網路上找到的方法完全改不動 只能看看還有沒有神提供修改過後的 img 檔來刷機了</p>\n<img src=\"assets/images/A50_root/selinux.jpg\" width=\"80%\"/>\n<hr>\n<p>參考資料\n<a target='_blank' href=\"https://www.youtube.com/watch?v=s2Xp-lQg1xs\">How to Root Galaxy S10, S10e, S10 Plus, or A50! [Exynos Only]</a>\n<a target='_blank' href=\"https://apk.tw/thread-914293-1-1.html\">[教學] Galaxy A50 root 安裝教學(magisk) 測試中~</a></p>\n"},{"directory":"life","layout":"life","slug":"createblog","title":"建置第一個blog","date":"2017/06/20","categories":["Hexo"],"tags":["Hexo","life"],"summary":"一直以來都以為架設一個專屬於自己的 blog 需要一個後台來建置後來直到某天在群組裡看到有人分享他的心得文其實本來只是要問他頁面上的 js 效果是如何呈現的後來他給了我一個答案是用 hexo 搭配 n","content":"<p>一直以來都以為架設一個專屬於自己的 blog 需要一個後台來建置<br>\n後來直到某天在群組裡看到有人分享他的心得文<br>\n其實本來只是要問他頁面上的 js 效果是如何呈現的<br>\n後來他給了我一個答案<br>\n是用 hexo 搭配 next 模板樣式所架設出來的<br>\n好奇心如我，立馬估狗了下<br>\n原來 <a target='_blank' href=\"https://hexo.io/zh-tw/docs/\">hexo</a> 是用來架設 blog 的套件 它能解析 <a target='_blank' href=\"https://www.markdownguide.org/cheat-sheet\">markdown</a> 語言!\n而且不需要任何後台資料庫就能辦到!</p>\n<p>天啊!這不就是我一直以來 在心裡萌芽想找的東西嗎<br>\n先前有一陣子在 gitbook 裡寫了一些自己的學習記錄\n就一直在思考著 如果有更好的介面來放 不是件很美好的事嗎!</p>\n<p>心動不如馬上行動!<br>\n花了幾天的時間來玩 hexo\n慢慢的架設起來\n結果花了最久的時間是卡在評論分享這塊\n後來才發現 這部份有點像是介接 api 的東西\n需要介接的 id-name 來做窗口才得以用來分享討論(這部份經驗太少完全沒想到)</p>\n<p>後來估狗了一下 就選定了 <a target='_blank' href=\"https://disqus.com/\">disqus</a> 來做分享評論\n但照著網路上的教學去做 怎麼試就試不成功，為什麼就是接不起來</p>\n<p>然後再回去仔細看了下 <a target='_blank' href=\"https://theme-next.iissnan.com/\">next</a> 的文件<br>\n才發現 原來版本更新 串接的方式也改了\n啊啊啊啊!!崩潰\n原本的設定是</p>\n<pre><code class=\"language-yml\">disqus_shortname: your-disqus-shortname\n</code></pre>\n<p>新版本的設定改為</p>\n<pre><code class=\"language-yml\">disqus:\n  enable: false\n  shortname: your-disqus-shortname\n  count: true\n</code></pre>\n<p>再試一次! 成功</p>\n<p>此時看看時間，天色已晚，也該睡了 明天還要上班&gt;&lt;</p>\n<ul>\n<li>筆記 <a target='_blank' href=\"https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/\">hexo 插入圖片</a></li>\n</ul>\n"},{"directory":"life","layout":"GitHub","slug":"github_page_custom_domain","title":"GitHub Pages 設定 Google Domain 個人網域","date":"2022/02/17","categories":["GitHub"],"tags":["life","GitHub","Google"],"summary":"隔了好久，終於也買了個人網域啦～短網址就是爽！Google Domain 設定DNS 設定建立兩筆新的記錄設定四組 IP185.199.108.153185.199.109.153185.199.11","content":"<p>隔了好久，終於也買了個人網域啦～\n短網址就是爽！</p>\n<h2 id=\"google-domain-設定\">Google Domain 設定</h2>\n<h3 id=\"dns-設定\">DNS 設定</h3>\n<p>建立兩筆新的記錄</p>\n<ol>\n<li>\n<p>設定四組 IP</p>\n<blockquote>\n<p>185.199.108.153\n185.199.109.153\n185.199.110.153\n185.199.111.153</p>\n</blockquote>\n</li>\n<li>\n<p>設定 CNAME 如下圖</p>\n</li>\n</ol>\n<img src=\"assets/images/life/github_page_custom_domain/002.jpg\"  width=100%  loading=\"lazy\" />\n<hr>\n<h2 id=\"github-設定\">GitHub 設定</h2>\n<ol>\n<li>切換到 <code>Setting</code> 點選右邊的 <code>Pages</code></li>\n<li>設定 Custom domain</li>\n<li>都設定好後，等一段時間後，記得回來再 <code>Enforce HTTPS</code> 打勾</li>\n</ol>\n<img src=\"assets/images/life/github_page_custom_domain/001.jpg\"  width=100% />\n"},{"directory":"life","layout":"life","slug":"happyhome","title":"人生第一間房：從無到有全記錄","date":"2022/09/25","categories":["home"],"tags":["home","life"],"summary":"交屋前剛完成的工地結構隔局出來囉是磚牆格局舖上水泥上油漆建商附的是金利登的玫瑰白完工，準備驗屋交屋囉驗屋這部份沒有另外請驗屋公司，就上網爬文，將相關注意事項記下來，在驗屋的時後，代銷這裡也有跟著我們一","content":"<h2 id=\"交屋前\">交屋前</h2>\n<h3 id=\"剛完成的工地結構\">剛完成的工地結構</h3>\n<p><img src=\"assets/images/home/happyhome/IMG_7151.JPG\" alt=\"\"></p>\n<h3 id=\"隔局出來囉\">隔局出來囉</h3>\n<p>是磚牆格局\n<img src=\"assets/images/home/happyhome/IMG_7626.JPG\" alt=\"\"></p>\n<h3 id=\"舖上水泥\">舖上水泥</h3>\n<p><img src=\"assets/images/home/happyhome/IMG_7912.JPG\" alt=\"\"></p>\n<h3 id=\"上油漆\">上油漆</h3>\n<p>建商附的是金利登的玫瑰白\n<img src=\"assets/images/home/happyhome/IMG_8108.JPG\" alt=\"\"></p>\n<h3 id=\"完工，準備驗屋交屋囉\">完工，準備驗屋交屋囉</h3>\n<p>驗屋這部份沒有另外請驗屋公司，就上網爬文，將相關注意事項記下來，在驗屋的時後，代銷這裡也有跟著我們一起驗，一起測試，有問題幫忙記錄，請建商一起修繕。</p>\n<p>當時驗的部份有</p>\n<ul>\n<li>漏水測試</li>\n<li>水管是否有阻塞，通不通</li>\n<li>地板碰供</li>\n<li>網路與電路等是否有通</li>\n<li>馬桶順不順暢等…</li>\n</ul>\n<p><img src=\"assets/images/home/happyhome/IMG_8923.JPG\" alt=\"\"></p>\n<hr>\n<h2 id=\"交屋後\">交屋後</h2>\n<p>開始裝潢囉。\n因原物料大漲，當時規劃好後，設計師一直遲遲沒有給報價單，等到木工要進料了，報價單才出來，\n看到報價單後，完全爆預算(當初在設計規劃時，已有給預算了)，所以在裝潢這部份就只做了木工，\n其他部份就自行處理\n水電有強力的另一半自行牽線，油漆、細清等另外找，這時後才知道，原來在裝潢這部份的水也是蠻深的 XD</p>\n<h3 id=\"天花板先上骨架\">天花板先上骨架</h3>\n<p><img src=\"assets/images/home/happyhome/IMG_0542.JPG\" alt=\"\"></p>\n<p>在進料的過程中，監工有拍照讓業主看所進來的材料，照片上物品是符合報價單上所寫的，但實際上卻發現裝上後矽酸鈣板與叫進來的料是有落差!!\n當下各種疑問，立馬詢問設計師情況，原來是被木工偷換料，當時心裡各種 OS 出現，不管是好的壞的都有，心想要是沒來巡場的話，等油漆上上去後 跟本就不會發現 RRR。\n尤其是像我們這種第一次買房的新手，跟本就辨示不出。<code>這個故事告訴我們不要太相信人性(?</code></p>\n<p>當時剛好疫情關係公司居家辦公，中午吃飯時間過來看看(當時木工去吃飯)，才發現的怎麼會有兩種不一樣的矽酸鈣板！ 如圖\n在此之前沒發現的原因是木工收工後，會將不是正確的料帶走 &gt;.&lt;\n<img src=\"assets/images/home/happyhome/IMG_0564.JPG\" alt=\"\"></p>\n<p>仔細比較矽酸鈣板的顏色是有落差的\n<img src=\"assets/images/home/happyhome/IMG_0568.JPG\" alt=\"\"></p>\n<p>請設計師處理，將天花板拆掉重裝，換回正確的矽酸鈣板，報價單上寫的牌子是<code>日本神島</code>的矽酸鈣板，其實這事件當時是可以大做文章的，但為了讓事情進行順利，且有處理好，就不計較了。</p>\n<p>也因為這次事件，所以後面都會多加留意物料是不是正確的</p>\n<h3 id=\"天花板完工\">天花板完工</h3>\n<p><img src=\"assets/images/home/happyhome/IMG_0649.JPG\" alt=\"\"></p>\n<h3 id=\"油漆第一次批土\">油漆第一次批土</h3>\n<p><img src=\"assets/images/home/happyhome/IMG_0798.JPG\" alt=\"\"></p>\n<h3 id=\"第二次批土\">第二次批土</h3>\n<p>第二次批土有加上顏色做識別，才知道哪裡沒處理到\n<img src=\"assets/images/home/happyhome/IMG_1242.JPG\" alt=\"\"></p>\n<h3 id=\"油漆完工\">油漆完工</h3>\n<p>全室使用得利特白乳膠漆\n<img src=\"assets/images/home/happyhome/IMG_1300.JPG\" alt=\"\"></p>\n<p>電視牆上上的是藝術漆，藝術漆報價與一般報價方式不太一樣，價格有點高，就請師傅幫忙批土，上漆的部份就自己來了!!</p>\n"},{"directory":"life","layout":"life","slug":"headphone","title":"DIY耳罩式耳機","date":"2017/07/03","categories":["life"],"tags":["life","耳機","DIY"],"summary":"第一次參加 diy 耳機的活動 可以做出屬於自己的耳機覺得蠻開心的準備材料先使用 3d 列印將東西印出來　接著就開始組裝了　單體上有顏色的是正極使用烙鐵(焊筆)把線跟單體焊起來單體是整個耳機中的精華啊","content":"<p>第一次參加 diy 耳機的活動 可以做出屬於自己的耳機覺得蠻開心的</p>\n<h2 id=\"準備材料\">準備材料</h2>\n<p>先使用 3d 列印將東西印出來　\n<img src=\"assets/images/headphone/01.jpg\"  width=100%  loading=\"lazy\" />\n<img src=\"assets/images/headphone/02.jpg\"  width=100% /></p>\n<p>接著就開始組裝了　單體上有顏色的是正極<br>\n使用烙鐵(焊筆)把線跟單體焊起來<br>\n單體是整個耳機中的精華啊，注意不要手去碰到裡面的模<br>\n好的單體帶你上天堂 <img src=\"assets/images/headphone/03.jpg\"  width=100% /></p>\n<h2 id=\"成型囉!\">成型囉!</h2>\n<img src=\"assets/images/headphone/04.jpg\"  width=100% />\n"},{"directory":"life","layout":"life","slug":"hexotoscully","title":"Blog 改版 使用 Scully 翻寫","date":"2021/05/01","categories":["life"],"tags":["life","scully"],"summary":"前情提要在這裡 https://mtwmt.github.io/angular/scully_install因為這個契機，使得開始動手這一切，將原本使用 hexo 改用 Angular Scully ","content":"<h2 id=\"前情提要\">前情提要</h2>\n<p>在這裡 <a target='_blank' href=\"https://mtwmt.github.io/angular/scully_install\">https://mtwmt.github.io/angular/scully_install</a></p>\n<p>因為這個契機，使得開始動手這一切，將原本使用 hexo 改用 Angular Scully 建置 Blog</p>\n<p>嗯…花了快半年的時間 看我有奪會拖就知道，畢竟平常也是要上班的嘛(牽拖)</p>\n<p>第一版終於略略搞定上線了 耶～灑花～～</p>\n<hr>\n<h2 id=\"使用技術\">使用技術</h2>\n<p>這次使用的技術有：<code>Anaular</code>、<code>Scully</code>、<code>Tailwind CSS</code></p>\n<p>其中 Tailwind CSS 是第一次使用，因還不是很熟悉，所以 scss 檔有些地方還是寫了很多\n自訂樣式 XDDD</p>\n<hr>\n<h2 id=\"卡卡卡\">卡卡卡</h2>\n<p>這次花了一些時間的地方有：</p>\n<ul>\n<li>內頁的索引</li>\n<li>內頁的 GA 發送(就是因為它 讓我遲遲未更新，怕流量沒被記錄到)</li>\n<li>內頁的圖片顯示 (是的，由此可知 我對 NG 還是有盲點在，還不夠熟練 XD)</li>\n<li>再來就是一些版面的配置了，懶的畫 Layout 全部都是想到什麼做什麼，所以花了很多時\n間在調版面 (還沒很滿意 還會再繼續調！)</li>\n<li>列表的分頁，太久沒寫，邏輯都忘光光，還好之前的 code 還在，再翻出來抄一下，花了\n一些時間回憶 XD</li>\n</ul>\n<hr>\n<h2 id=\"待辦事項\">待辦事項</h2>\n<p>後續應該會陸陸續續加上一些其他的東西，</p>\n<ul>\n<li>留言系統</li>\n<li>donate 連結 (我也想喝杯咖啡嘛 XD)</li>\n<li>回到正確的列表頁，而不是每次都回到第一頁</li>\n<li>把之前的作品集搬過來，這次的改版，主要也是慢慢建置為個人網站，不是只有 Blog</li>\n<li>themes 切換</li>\n<li>評估：因想導為個人網站，所以在 Blog 上的章網址應該再多個 <code>/blog</code> 做切分，但網\n址改了後，就會影響在 google 上的搜尋，有一段時間會變 404，所以應該要來做個導址\n頁面，就算有網友先前有連結到這裡的文章頁面，也不至於看不到內容</li>\n</ul>\n<p>先把待辦事項寫下來才會有動力去做(!?</p>\n<hr>\n<p>什麼時後做完 不知道 啊哈哈哈</p>\n<p>沒有時程的壓力 94 爽 耶～</p>\n<hr>\n<h2 id=\"參考連結\">參考連結</h2>\n<p>哦！對了　然後要感謝兩位大大的在 github 裡提供的 sourse code\n裡面很完整的範例讓我參考，同時也學到了許多 angular 的小技巧，而且也有持續在更新哦!!!</p>\n<p>分別是</p>\n<ul>\n<li><a target='_blank' href=\"https://github.com/notiz-dev/notiz\">notiz</a></li>\n<li><a target='_blank' href=\"https://github.com/nartc/tnc-scully\">tnc-scully</a></li>\n</ul>\n"},{"directory":"life","layout":"life","slug":"mask","title":"口罩地圖","date":"2020/04/17","categories":["life"],"tags":["Angular","life"],"summary":"契機因為 NOVID-19 (武漢病毒) 造成了全世界的罩慌，使得口罩供不應求在這此時The F2E - 前端修練精神時光屋也發起了 口罩地圖 side project 的製作同時也提供了 API 還","content":"<img src=\"assets/images/mask.png\" width=\"50%\" loading=\"lazy\" />\n<h2 id=\"契機\">契機</h2>\n<p>因為 NOVID-19 (武漢病毒) 造成了全世界的罩慌，使得口罩供不應求</p>\n<p>在這此時\n<a target='_blank' href=\"https://www.facebook.com/groups/173311386703334/permalink/488655631835573/\">The F2E - 前端修練精神時光屋</a>\n也發起了 口罩地圖 side project 的製作同時也提供了 API 還有徵求了許多設計師的設計\n稿也就搭上了這一波的疫情列車!</p>\n<hr>\n<h2 id=\"使用技術\">使用技術</h2>\n<h3 id=\"rwd\">RWD</h3>\n<p>響應適已成為現今網頁不可或缺的設計了</p>\n<h3 id=\"angular\">Angular</h3>\n<p>近期轉職的關係 公司需求開始使用 <code>Angular</code> 框架也正好用來檢示這陣子學習的成效如何</p>\n<h3 id=\"圖資\">圖資</h3>\n<p>使用的 <a target='_blank' href=\"https://leafletjs.com/\">leaflet</a> + <a target='_blank' href=\"https://www.mapbox.com/\">mapbox</a> 畢\n竟 google 要收錢了呀 QQ</p>\n<p>最後採用了<a target='_blank' href=\"https://challenge.thef2e.com/user/2988?schedule=4433\">Shan</a> 設計師的\n設計稿她所設計的介面第一眼就吸引到我的目光，裡面顯示口罩數量是帶著可愛的人物\nicon 呈現比其他設計師只有文字的呈現 看起來活潑許多</p>\n<hr>\n<h2 id=\"過程\">過程</h2>\n<p>一開始照著設計稿切版產出，過程中發現使用上有點卡卡的，於是就加上了自己的想法下去\n做修改，最後變成了自己的形狀 XDDD</p>\n<p>一開始資料一次呈現 然後再選區域 發現會造成等待時間過長，所以邊思考著改成顯示當地\n縣市資訊</p>\n<h3 id=\"加上定位，顯示當下縣市區域\">加上定位，顯示當下縣市區域</h3>\n<p>加上了定位資訊\n<a target='_blank' href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Geolocation/Using_geolocation\">Geolocation</a></p>\n<p>在處理這部份的時後 卡了一小段時間，因為 <code>leaflet</code> 沒有提供經緯度反查縣市的 API\n所以 就將目前得到的定位資訊 拿去比對最近的藥局，進而找到當下縣市，一次呈現當地的\n口罩資訊</p>\n<h3 id=\"顯示附近藥局\">顯示附近藥局</h3>\n<p>但後來發現 縣市的範圍太廣了，需求者想知道的是 離他最近的藥局剩下多少口罩，以便查\n買所以就再多加了附近 <code>2km</code> 藥局的資訊。</p>\n<p>因為一開始是呈現只有地圖的畫面的情況，親友回報剛開啟畫面的時後 一頭霧水 不知道該\n如何使用，後來就改成 一開始直接呈現附近藥局的列表狀態，讓使用者第一眼就能知道 家\n裡附近藥局還剩多少口罩</p>\n<h3 id=\"幫親友買口罩，發現使用不順\">幫親友買口罩，發現使用不順</h3>\n<p>清明連假返鄉，要幫親友買口罩，也就順手拿起了自己寫的口罩地圖來使用，一開始寫的是\n固定距離範圍搜尋，發現偏鄉地區的藥局距離好遠，不能擴大搜尋，當下十分困擾所以也就\n加上了可更改搜尋範圍功能。 自己的問題自己救 XD</p>\n<hr>\n<h2 id=\"小結\">小結</h2>\n<p>很開心這次可以使用自己的專業做出這次的口罩地圖讓有需要的人使用查找，滿滿的成就感\n也算是滿足自己小小的虛榮心 XDD</p>\n<p>感謝你看到這裡 ^_^</p>\n<p>若您正在使用它，也歡迎給我建議與使用心得哦</p>\n<p>口罩地圖連結：<a target='_blank' href=\"https://mtwmt.github.io/maskmap/\">https://mtwmt.github.io/maskmap/</a></p>\n"},{"directory":"life","layout":"life","slug":"newcomputer","title":"礦潮下的新電腦","date":"2021/04/23","update":"2021/10/20","categories":["life"],"tags":["life"],"summary":"20211020 更新排了三個月的顯卡終於到貨啦!!!20211015 收到通知立馬刷下去 (五倍卷就這樣用掉惹 XD)20211019 到貨還好機殼很給力 沒有讓我失望! 安裝成功!!!結果發現 3","content":"<p>20211020 更新</p>\n<p>排了三個月的顯卡終於到貨啦!!!\n<img src=\"assets/images/life/newcomputer/014.png\" width=\"300px\" loading=\"lazy\" /></p>\n<p>20211015 收到通知\n<img src=\"assets/images/life/newcomputer/015.png\" width=\"300px\"/></p>\n<p>立馬刷下去 (五倍卷就這樣用掉惹 XD)\n<img src=\"assets/images/life/newcomputer/016.jpg\"/></p>\n<p>20211019 到貨\n<img src=\"assets/images/life/newcomputer/017.jpg\"/></p>\n<p>還好機殼很給力 沒有讓我失望! 安裝成功!!!\n<img src=\"assets/images/life/newcomputer/018.jpg\"/></p>\n<p>結果發現 3080 四孔裡面 只有一個 HDMI 接頭 其他都是 displayport，我暈!\n只好先開啟內顯才能同時使用雙營幕，HDMI 轉 DP 線 有空再買了～</p>\n<hr>\n<h2 id=\"源起\">源起</h2>\n<p>桌機用了很久，印象中是 2010 年時組的 i5，嗯…現在是 2021 有點年代了\n原本 win7 用的爽爽的，就因為 node 14 以上的版本只支援 win10…\n升級後發現這台年代久遠的電腦跟 win10 不合，裝好後一直會毫無預警的重新開機…\n才開始有了組新電腦的想法…</p>\n<p>太久沒碰硬體類的東西，想當然爾就先做了一下功課，看目前趨勢如何，後來發現\n因為礦潮的關係，市場顯卡缺貨，顯卡無法單買，勢必要組一台新機台能搭買一張新的顯卡，許多礦工為了顯卡買了許多組裝電腦，出售顯卡以外的零件。</p>\n<hr>\n<h2 id=\"感謝礦老闆，讓我有礦渣渣可以買\">感謝礦老闆，讓我有礦渣渣可以買</h2>\n<p>接下來就開始上海鮮拍賣網找便宜的電腦零組件啦</p>\n<img src=\"assets/images/life/newcomputer/001.jpg\" width=\"300px\"/>\n<img src=\"assets/images/life/newcomputer/002.jpg\" width=\"300px\" />\n<p>其中 SSD 硬碟 跟散熱 是直接與賣家面交，所以價錢就是取最便宜的那部份</p>\n<p>總 total 加起來，一台 i9 約莫兩萬七不到 RRR</p>\n<p>從 I5 晉升到 I9，整個人仿佛都高大尚了起來啊哈哈哈哈</p>\n<hr>\n<h2 id=\"開箱啦\">開箱啦</h2>\n<img src=\"assets/images/life/newcomputer/003.jpg\" width=\"500px\" />\n圖片中還缺少了一條記憶體，當時還在路上。沒關係 就先來組啦，\n這次的機殼延用\n<img src=\"assets/images/life/newcomputer/004.jpg\" width=\"300px\" />\n顯卡也暫時延用，等礦潮過後，價錢不再黃牛，再補買了。\n<hr>\n<h2 id=\"飛天般的速度\">飛天般的速度</h2>\n<img src=\"assets/images/life/newcomputer/011.png\" />\n<img src=\"assets/images/life/newcomputer/012.png\" />\n<img src=\"assets/images/life/newcomputer/013.png\" />\n<p>嘿嘿 大致上看起來都不錯</p>\n<hr>\n<h2 id=\"疑惑點\">疑惑點</h2>\n<p>這次收到的記憶體，因為是跟不同賣家買的，但外包裝都一樣，如圖示\n<img src=\"assets/images/life/newcomputer/005.jpg\" width=\"500px\" />\n<img src=\"assets/images/life/newcomputer/006.jpg\" width=\"500px\" /></p>\n<p>兩條一樣的包裝，一條是單面晶片，另一條是雙面，其中還真不知道是什麼原因，有可能是被其中一名賣家偷調包(?\n希望不是如我所想，或許是出廠時間不同，所以製程不一樣(?\n這部份我還沒去搞清楚…XD</p>\n"},{"directory":"life","layout":"life","slug":"paint","title":"人生第一間房：藝術漆牆面DIY","date":"2022/09/27","categories":["home"],"tags":["home","life"],"summary":"起因如上篇所述因為請師傅來刷藝術漆在太貴了，一般行情約 6000~8000 / 坪，且需要上漆的部份有電視牆面與床頭背板，加起來大約三坪上下。做完也是要上萬塊嗯…太貴了 &gt;.&lt; 摸摸口袋深","content":"<h2 id=\"起因\">起因</h2>\n<p>如上篇所述因為請師傅來刷藝術漆在太貴了，一般行情約 6000~8000 / 坪，且需要上漆的部份有電視牆面與床頭背板，加起來大約三坪上下。做完也是要上萬塊</p>\n<p>嗯…太貴了 &gt;.&lt; 摸摸口袋深度，也順便了解了下藝術漆到底是在做什麼的，得到一些刷藝術漆的結論就是，刷藝術漆，需要的就是藝術!!\n藝術這種東西就是見仁見智，不像一般刷油漆時，需要的是把漆塗的平整，沒有刷痕，吃技術的</p>\n<p>看了一些網路上的教學，加上以前所學背景，心裡想著，嗯…我應該也能辦得到，當下決定這筆錢就自己賺了，不能開源總是要節流嘛。</p>\n<h2 id=\"開始著手\">開始著手</h2>\n<p>這次所選用的是 斯曼特 SVL406 (電視牆)、SVL410(床頭背牆)\n比價了下，某電商的油漆價格優惠還有附贈油漆組，當下決定下訂，但!! SVL406 居然缺貨，囧~~~\n本想等電商到貨後再下訂，等啊等的，發現! 油漆居然漲價了，天啊!!!，只好立馬轉向另一個購物平台，趁尚未漲價時快點下單，時機歹歹，能省一點是一點</p>\n<p>油漆到貨!\n<img src=\"assets/images/home/paint/IMG_1303.JPG\" alt=\"\"></p>\n<h2 id=\"開工\">開工</h2>\n<p><img src=\"assets/images/home/paint/IMG_1302.JPG\" alt=\"\">\n一開始原本想先刷電視牆的，結果刷到一半發現，哦靠，刷錯色了，笑死 XDD\n<img src=\"assets/images/home/paint/IMG_1310.JPG\" alt=\"\"></p>\n<p>但油漆開都開了，若是放置不管很快就乾了，只好轉頭先去主臥刷背牆。\n人生嘛，計劃總是趕不上變化。沒事！問題不大！</p>\n<p><img src=\"assets/images/home/paint/IMG_1280.JPG\" alt=\"\">\n第一層底漆\n<img src=\"assets/images/home/paint/IMG_1307.JPG\" alt=\"\">\n第二層底漆\n<img src=\"assets/images/home/paint/IMG_1308.JPG\" alt=\"\"></p>\n<p>還記得這天是某天的星期五晚上，刷完這些都凌晨了，所以就先洗洗睡。隔日再戰。\n底漆上完，先拿砂紙稍微磨一下(真的只是磨一下 因為好累 XD)，接著再上主漆\n主漆上完後，嗯 感覺出來了呢!! 讚讚\n<img src=\"assets/images/home/paint/IMG_1315.JPG\" alt=\"\"></p>\n<p>接著就回到電視牆上繼續\n底漆\n<img src=\"assets/images/home/paint/IMG_1318.JPG\" alt=\"\"></p>\n<p>主色\n<img src=\"assets/images/home/paint/IMG_1323.JPG\" alt=\"\"></p>\n<p>上完，等油漆都乾了後，再上層保護漆。完工!</p>\n<p>這時後的手已呈現廢掉的狀態，提也提不起來，這時後真心配服師傅可以每天手舉高高刷天花板</p>\n<h3 id=\"耗時\">耗時</h3>\n<p>星期五晚上 9 點多，到凌晨兩點\n星期六中午開工，到晚上快 11 點才處理好。</p>\n<h2 id=\"完工照\">完工照</h2>\n<p>主臥背牆\n<img src=\"assets/images/home/paint/IMG_1326.JPG\" alt=\"\"></p>\n<p>電視牆\n<img src=\"assets/images/home/paint/IMG_1325.JPG\" alt=\"\"></p>\n<h2 id=\"心得\">心得</h2>\n<p>其實刷藝術漆個人覺得不難，難的是要刷很多次，費工，不用怕失敗，因為失敗了還能再蓋過去，我想工錢貴的就是在這裡吧 QQ</p>\n"},{"directory":"life","layout":"life","slug":"price-generator","title":"報價單產生器","date":"2022/03/21","categories":["life"],"tags":["life"],"summary":"https://mtwmt.com/price-generator/寫了個報價單產生器，下次遇到接案要報價時就方便多囉使用技術javascript ES6Gulp 4.0用來編譯 html、js 以及","content":"<p><a target='_blank' href=\"https://mtwmt.com/price-generator/\">https://mtwmt.com/price-generator/</a></p>\n<p>寫了個報價單產生器，下次遇到接案要報價時就方便多囉</p>\n<h2 id=\"使用技術\">使用技術</h2>\n<ul>\n<li>javascript ES6</li>\n<li>Gulp 4.0\n<blockquote>\n<p>用來編譯 html、js 以及部署到 github</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"套件\">套件</h2>\n<ul>\n<li><a target='_blank' href=\"http://validatejs.org/\">validate</a> 驗証</li>\n<li><a target='_blank' href=\"https://tabler.io/\">tabler</a> 一個架構在 bootstrap 的框架</li>\n</ul>\n"},{"directory":"life","layout":"life","slug":"process-planning","title":"程式碼流程規劃之日記文","date":"2021/09/18","categories":["life"],"tags":["life","ironman2021"],"summary":"今天，依然是篇日記文，每天遇到的事有太多好寫了。一早同事：Mandy, 今天是 deadline 囉，做好了嗎?我：還差了 bala bala…同事：有什麼需要協助的話，要快說哦我：嗯…好 ! XD接","content":"<p>今天，依然是篇日記文，每天遇到的事有太多好寫了。</p>\n<p>一早\n同事：Mandy, 今天是 deadline 囉，做好了嗎?\n我：還差了 bala bala…\n同事：有什麼需要協助的話，要快說哦\n我：嗯…好 ! XD</p>\n<p>接著繼續處理未完的專案</p>\n<hr>\n<h2 id=\"情境\">情境</h2>\n<p>這次的情境是，表單裡有包含著圖片上傳，機制是當表單需要\n新增圖片時，需要先將圖檔上傳，得到後端給的圖片 id 後再把這個 id 塞到表單裡\n更新圖片時，把原有的圖檔 id 包含新的圖檔一起傳送給後端，\n刪除圖片時，就要把原有的圖片 id 打到後端\n以上這些動作都要先處理完，接著再一起更新表單</p>\n<p>所以流程會是，先傳送圖片，等圖片處理完後更新表單，再將表單送出。</p>\n<hr>\n<h2 id=\"實作\">實作</h2>\n<p>一開始我的程式碼是這樣寫的\n<img src=\"assets/images/ironman/process-planning/u2TPLuf.png\" alt=\"\"></p>\n<p>結果遇到了圖片非同步問題，當我按 <code>submit</code> 後，每傳完一張圖片，就會打一次表單 api,\n傳了三次 表單送出就會打三次，這不是我要的RRRR !</p>\n<hr>\n<h2 id=\"修改後\">修改後</h2>\n<p>將程式碼流程改這樣\n<img src=\"assets/images/ironman/process-planning/vY7D11q.png\" alt=\"\"></p>\n<p>是我要的結果！但其實這樣寫下來 邏輯上有點複雜\n但時程上有點趕，就先將 code 傳到 gitlab 上</p>\n<hr>\n<h2 id=\"codereview\">CodeReview</h2>\n<p>經過同事神一般的巧手，將程式碼的流程改為如圖所示，流程看起來清楚多了(心裡充滿感激)\n<img src=\"assets/images/ironman/process-planning/YooG1uC.png\" alt=\"\"></p>\n<p><code>action</code>是<code>ngrx</code>裡的狀態管理的一部份</p>\n<p><code>combineLatest</code> 為 rxjs 裡的組合符\n<code>concatMap</code> 與 <code>switchMap</code> 皆是 rxjs 裡的 operators</p>\n<p>concatMap 還有另外處理邏輯(crud)流程</p>\n<hr>\n<h2 id=\"後記\">後記</h2>\n<p>今天，主要的記事是對程式碼的流程規畫，所以沒有實作面\n這次也學到了<code>concatMap</code>的處理方式\n(看了很多次 還沒實際使用過，所以一開始在使用時，對<code>concatMap</code>的流向有所誤解)</p>\n<p>這天在回家的路上，火車坐過頭，連 ubike 也騎超過站點忘了要還車 QQ\n一定是我太累惹 囧~~</p>\n"},{"directory":"life","layout":"life","slug":"taobao","title":"支付寶被鎖 淘寶不能付款","date":"2019/09/02","categories":["life"],"tags":["life"],"summary":"第二次買淘寶，很開心的刷了一堆想要的東西，隔了幾天後不知道為什麼，要刷卡時就出現支付寶就把我的帳號凍結了，無法支付集運運費下載了支付寶 他要我綁定銀行卡但我就是沒有大陸的銀行卡啊!! 所以我被凍結了咨","content":"<p>第二次買淘寶，很開心的刷了一堆想要的東西，隔了幾天後不知道為什麼，要刷卡時就出現\n支付寶就把我的帳號凍結了，無法支付集運運費</p>\n<img src=\"assets/images/taobao/001.jpg\" width=\"60%\" loading=\"lazy\" />\n<p>下載了支付寶 他要我綁定銀行卡</p>\n<img src=\"assets/images/taobao/002.jpg\" width=\"60%\"/>\n<p>但我就是沒有大陸的銀行卡啊!! 所以我被凍結了</p>\n<img src=\"assets/images/taobao/003.jpg\" width=\"60%\"/>\n<p>咨詢了一下支付寶的在線客服</p>\n<img src=\"assets/images/taobao/004.jpg\" width=\"60%\"/>\n<p>星期日一大早就打了客服電話過去，不得不說他們的客服處理的非常有效率打過去後 馬上\n就接通 ( 不像台灣的信用卡客服 等等等…趁機抱怨 ) 經過一連串的轉接 中間電話還一\n度不小心斷掉 他們還回撥 ( 實在大心 )</p>\n<p>客服跟我要了 mail 寄給我一封需要身份驗証的信讓我上傳身份証，其中還有這項規定 =\n=+</p>\n<img src=\"assets/images/taobao/005.png\"/>\n<p>送出後 客服要我等一個工作天</p>\n<p>中間還去問了一下淘寶的小蜜</p>\n<img src=\"assets/images/taobao/006.jpg\" width=\"60%\"/>\n<p>所以還是需要支付寶解鎖後，所有後續動作才能繼續進行…</p>\n<p>但 實際情況是 我晚上再開支付寶帳號 就已經被解鎖 可以順利支付集運費用了不得不說\n這個效率真的是…出乎我意料之外的快 XD</p>\n"},{"directory":"life","layout":"life","slug":"working","title":"新工作 新生活","date":"2019/10/01","categories":["life"],"tags":["Angular"],"summary":"到職滿三個月，就來說說這三個月帶給我的改變通勤時間變短了 有別於過去火車捷運通勤 現在轉變為機車一族餐費變少了 由於公司有提供公司餐，能用少少的費用吃到飽飽的一餐再來就是工作上所使用到的技術 也是跟過","content":"<p>到職滿三個月，就來說說這三個月帶給我的改變\n通勤時間變短了 有別於過去火車捷運通勤 現在轉變為機車一族\n餐費變少了 由於公司有提供公司餐，能用少少的費用吃到飽飽的一餐\n再來就是工作上所使用到的技術 也是跟過去差蠻多的\n從一個人 heandle 一個專案 轉變到整個團隊都在做著同一個專案\n從過去需要客製化的畫面，改為使用模版，這些對我而言都是些大大的改變</p>\n<hr>\n<p>再來就是這三個月所接觸到的技術</p>\n<ul>\n<li>\n<p>Angular\n之前有稍稍用 vue 寫過小小的專案 所以在轉換的過程中 帶著一些 vue 的概念 再買了幾堂線上課程，也這樣跌跌撞撞的踏入了</p>\n</li>\n<li>\n<p>Angular Material\n類似 bootstrap 的模板，這裡選用了 material 所幸有大大寫了\n<a target='_blank' href=\"https://ithelp.ithome.com.tw/users/20020617/ironman/1263\">Angular Material 完全攻略</a>\n能讓我快速的踏入了解這款框架應用</p>\n</li>\n<li>\n<p>Typescript\n強型別語言</p>\n</li>\n<li>\n<p>RxJS\n用來處理同步與非同步的 Library</p>\n</li>\n<li>\n<p>D3\n用來使用圖表繪製</p>\n</li>\n<li>\n<p>ag-grid\n表格處理</p>\n</li>\n<li>\n<p>gitlab\n版本控管，與github非常類似</p>\n</li>\n</ul>\n<p>以上這些技術 都是過去尚未碰過的技術\n所以需要閱讀大量的文件來了解這整些套件的用法\n學習沒有捷徑，所以就是加油!!!\n唯一好處就是 只要有努力就會有收穫的!!!(自我洗腦)</p>\n<p>沒辦法 前端的坑就是如此的深\n後續也會將這些學習過程一一紀錄上來\n也算是個人的一些成長過程 XDDD</p>\n"},{"directory":"python","layout":"python","slug":"py_getpage","title":"初探 Python，用 Python 來寫個爬蟲吧","date":"2022/10/23","categories":["python"],"tags":["python"],"summary":"安裝 python可到 https://www.python.org/ 這裡進行下載符合作業系統的 python 使用。網路上有很多 python 安裝教學，這裡就不再贅述囉安裝的版本是 Python","content":"<h2 id=\"安裝-python\">安裝 python</h2>\n<p>可到 <a target='_blank' href=\"https://www.python.org/\">https://www.python.org/</a> 這裡進行下載符合作業系統的 python 使用。\n網路上有很多 python 安裝教學，這裡就不再贅述囉</p>\n<p>安裝的版本是 <code>Python 3.10.8</code></p>\n<hr>\n<h2 id=\"pip-指令筆記\">pip 指令筆記</h2>\n<p>這裡只有列出目前有在使用的。</p>\n<ul>\n<li>查詢 python 版本</li>\n</ul>\n<pre><code class=\"language-bash\">pip -V\n</code></pre>\n<ul>\n<li>查詢目前已安裝套件</li>\n</ul>\n<pre><code class=\"language-bash\">pip list\n</code></pre>\n<ul>\n<li>安裝套件</li>\n</ul>\n<pre><code class=\"language-bash\">pip install &lt;packageName&gt;\n</code></pre>\n<ul>\n<li>移除套件</li>\n</ul>\n<pre><code class=\"language-bash\">pip uninstall &lt;packageName&gt;\n</code></pre>\n<hr>\n<h2 id=\"新增-python-爬蟲套件\">新增 python 爬蟲套件</h2>\n<p>開啟 CMD</p>\n<h3 id=\"requests\">requests</h3>\n<ul>\n<li>使用 python requests 函式庫向伺服器發送請求\ninstall requests</li>\n</ul>\n<pre><code class=\"language-bash\">pip install requests\n</code></pre>\n<p><a target='_blank' href=\"https://requests.readthedocs.io/projects/cn/zh_CN/latest/\">requests 官方文件</a></p>\n<h3 id=\"beautiful-soup-4\">Beautiful Soup 4</h3>\n<ul>\n<li>用來解析網頁資料</li>\n</ul>\n<pre><code class=\"language-bash\">pip install bs4\n</code></pre>\n<p><a target='_blank' href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/\">bs4 官方文件</a></p>\n<hr>\n<h2 id=\"開始爬蟲世界\">開始爬蟲世界</h2>\n<p>這次主要爬的是 2022 年 ithome 鐵人賽的主題</p>\n<h3 id=\"撰寫程式注意事項\">撰寫程式注意事項</h3>\n<p>要是一不小心沒注意到很容易就會踩到雷哦！</p>\n<ul>\n<li>python 的程式語言裡是有分大小寫</li>\n<li>使用縮排區分程式區塊，所以縮排必須保持一致，否則可能會出縮排的錯誤。</li>\n</ul>\n<p>下面是練習的第一版程式</p>\n<pre><code class=\"language-python\"># import 需要使用到的套件\nimport requests\nfrom bs4 import BeautifulSoup\nimport json\n\nurl  = 'https://ithelp.ithome.com.tw/2022ironman/signup/list'\n\n# ithome 這裡有防毒惡意程式爬資料，所以將爬蟲程式偽裝成瀏覽器，放在headers裡\nuserAgent = {&quot;user-agent&quot;:&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&quot;}\n\n# 向伺服器發送請求\nr = requests.get(url, headers=userAgent)\n\nif r.status_code == 200: # 請求成功\n  nums = []\n  cacheData = []\n  soup = BeautifulSoup(r.text, 'html.parser')\n  # 開始爬網頁內容，此為網頁裡的 class name\n  pages = soup.select('nav.pagination-container span.pagination-inner')\n\n  # 取得頁碼裡的資訊\n  for item in pages:\n    for num in item.find_all('a'):\n      if num.text.isdigit():\n        nums.append(int(num.text))\n  # 取得總頁數\n  maxPage = max(nums)\n\n  # 取得所有頁面的資料\n  for page in range(maxPage):\n    # f'{url}?page={page + 1}' 格式化網址\n    res = requests.get(f'{url}?page={page + 1}', headers=userAgent)\n    soup1 = BeautifulSoup(res.text, 'html.parser')\n    topic = soup1.find_all('a', {'class':'contestants-list__title'})\n    for tag in topic:\n      # 得到資料後，將需要的資訊存到 cacheData\n      cacheData.append({\n        'year': '2022',\n        'title': tag.text.strip(),\n        'url': tag.get('href', None),\n      })\n\n  # 打開要存的 json 檔，注意資料夾裡要有這個檔案哦。不然會噴錯\n  f = open('ironman2022.json', 'a')\n  # 把資料寫進 json裡\n  f.write(json.dumps(cacheData))\n  # 關閉 json 檔\n  f.close()\nelse: # 請求失敗\n  print('error', r.status_code)\n</code></pre>\n<p>完成後到 CMD 執行程式</p>\n<pre><code class=\"language-bash\">py &lt;檔案名稱&gt;.py\n</code></pre>\n<h3 id=\"優化程式碼\">優化程式碼</h3>\n<p>上面的程式看起來有點落落長，其實有些能包成 function 去處理，找了一下 function 的寫法\npython 的 function 是使用 <code>def</code> 來宣告</p>\n<pre><code class=\"language-python\">import requests\nfrom bs4 import BeautifulSoup\nimport json\n\nurl  = 'https://ithelp.ithome.com.tw/2022ironman/signup/list'\nuserAgent = {&quot;user-agent&quot;:&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&quot;}\n\ndef getMaxPageNumber(pagination):\n  nums = []\n  for item in pagination:\n    for num in item.find_all('a'):\n      if num.text.isdigit():\n        nums.append(int(num.text))\n  return max(nums)\n\nr = requests.get(url, headers=userAgent)\nif r.status_code == 200:\n  soup = BeautifulSoup(r.text, 'html.parser')\n  pages = soup.select('nav.pagination-container span.pagination-inner')\n  maxPage = getMaxPageNumber(pages)\n  cacheData = []\n  for page in range(maxPage):\n    res = requests.get(f'{url}?page={page + 1}', headers=userAgent)\n    soup1 = BeautifulSoup(res.text, 'html.parser')\n    topic = soup1.find_all('a', {'class':'contestants-list__title'})\n    for tag in topic:\n      cacheData.append({\n        'year': '2022',\n        'title': tag.text.strip(),\n        'url': tag.get('href', None),\n      })\n  f = open('ironman2022.json', 'a')\n  f.write(json.dumps(cacheData))\n  f.close()\nelse:\n  print('error', r.status_code)\n</code></pre>\n<p>優化後，可讀性看起來好多了 ^_^</p>\n<hr>\n<p>初探 python 成功！！\n如果有更好的作法也歡迎與我分享哦</p>\n<!-- 在 瀏覽器上執行 python https://realpython.com/brython-python-in-browser/ -->\n"},{"directory":"rxjs","layout":"RxJS","slug":"rxjs","title":"RxJS 概念","date":"2020/03/27","categories":["RxJS"],"tags":["RxJS"],"summary":"Observable 可觀察物件連續性發生的資料 (主體) ，沒有寫 subscribe 是不會被執行的要下了後才會被啟動 在執行過程中 隨時可以中斷行為var click$ = fromEvent(","content":"<h2 id=\"observable-可觀察物件\">Observable 可觀察物件</h2>\n<p>連續性發生的資料 (主體) ，沒有寫 subscribe 是不會被執行的\n要下了後才會被啟動 在執行過程中 隨時可以中斷行為</p>\n<pre><code class=\"language-js\">var click$ = fromEvent(document, 'click');\n</code></pre>\n<h2 id=\"observer-觀察者物件\">Observer 觀察者物件</h2>\n<p>註冊到(Observable)</p>\n<p>next: Observer 接收到一個值 (.then\nerror: Observer 接收到一個錯誤 (.error\ncomplete: Observer 接收到完成的訊息 (額外</p>\n<pre><code class=\"language-js\">var observer = { next: (x) =&gt; console.log(x) };\n</code></pre>\n<h2 id=\"subscription-訂閱物件\">Subscription 訂閱物件</h2>\n<p>用來訂閱正在執行的 Observable / Observer\n離開時必需取消訂閱 ( 很重要 )</p>\n<pre><code class=\"language-js\">// 訂閱：\nvar subs$ = click$.subscribe(observer);\n\n// 取消訂閱：\nsubs$.unsubscribe();\n</code></pre>\n<p>簡化寫法</p>\n<pre><code class=\"language-js\">var subs$ = click$.subscribe( x =&gt; console.log(x) );\n</code></pre>\n<h2 id=\"operators-(lodash)-運算式\">Operators (lodash) 運算式</h2>\n<p>做轉型 過濾類別</p>\n<pre><code class=\"language-js\">// 透過解構賦值取得 operators 的屬性\nconst { filter, take } = rxjs.operators\n\nclick$ = click$.pipe(\n  filter( x =&gt; x.clientX &lt; 100),\n  take(2)\n)\n</code></pre>\n<p><a target='_blank' href=\"https://blog.miniasp.com/post/2018/09/06/Clarify-some-confused-RxJS-operators\">釐清幾個超容易混淆又很常用的 RxJS 運算子 (Operators)</a></p>\n<h2 id=\"subject-像是一個報社的概念-純手工控制流程\">Subject 像是一個報社的概念 純手工控制流程</h2>\n<p>本身就是一個 Observable 也是 一個 Observer\n可以手動 push 東西進去 就會有結果出來\n可以手動控制值如何傳遞</p>\n<p>可以用在廣播概念</p>\n<hr>\n<h3 id=\"rxjs-寫法\">RxJS 寫法</h3>\n<p>主要是以聲明式的思考邏輯下去做撰寫\n可參考 <a target='_blank' href=\"https://blog.csdn.net/longzhoufeng/article/details/78802836\">JavaScript函數式編程：聲明式與命令式</a></p>\n<pre><code class=\"language-js\">const { interval } = rxjs;\nconst { take } = rxjs.operators;\n\n// 建立運算子\ninterval(500)\n  .pipe(\n    //過濾運算子\n    take(4)\n  )\n  // 回傳訂閱物件(Subscription)\n  .subscribe( res =&gt; {\n    // 觀察者(Observer)\n    console.log(res);\n  })\n</code></pre>\n<p>在 pipe 裡 可以運用各式各樣的 operators 將觀察的值做轉換\n經過一連串的整理後 subscribe 出最後的值</p>\n<p>參考資料：\n<a target='_blank' href=\"https://www.facebook.com/will.fans/videos/1552089998288836/?notif_id=1584964670151136&amp;notif_t=live_video_schedule_viewer\">RxJS6 新手入門 影片</a>\n<a target='_blank' href=\"https://www.slideshare.net/WillHuangTW/rxjs-6-getting-started/\">RxJS6 新手入門 簡報</a>\n<a target='_blank' href=\"https://blog.techbridge.cc/2017/12/08/rxjs/\">希望是最淺顯易懂的 RxJS 教學</a>\n<a target='_blank' href=\"https://reactive.how/rxjs/takeWhile\">Explore all RxJS operators 探索所有RxJS運算符</a>\n<a target='_blank' href=\"https://cn.rx.js.org/\">RxJS6 中文手冊</a></p>\n"},{"directory":"rxjs","layout":"RxJS","slug":"rxjs_cancel_pending_request","title":"使用 RXJS 取消 http request","date":"2022/01/26","categories":["RxJS"],"tags":["Angular","RxJS"],"summary":"因為需求，有時後需要取消處理中的 http request所以就來做個筆記吧subscription 方式TSexport class AppComponent {  private subscrip","content":"<p>因為需求，有時後需要取消處理中的 http request\n所以就來做個筆記吧</p>\n<h2 id=\"subscription-方式\">subscription 方式</h2>\n<h3 id=\"ts\">TS</h3>\n<pre><code class=\"language-ts\">export class AppComponent {\n  private subscription: Subscription = new Subscription();\n\n  constructor(private httpClient: HttpClient) {}\n\n  fetchProd(): Observable&lt;any&gt; {\n    const url = `https://fakestoreapi.com/products`;\n    return this.httpClient.get&lt;any&gt;(url).pipe(\n      catchError((err, caught) =&gt; {\n        console.error(err);\n        throw err;\n      })\n    );\n  }\n\n  onRequest() {\n    this.subscription = this.fetchProd().subscribe((res) =&gt; {\n      console.log(&quot;getData&quot;, res);\n    });\n  }\n\n  onCancel() {\n    this.subscription.unsubscribe();\n    console.log(&quot;cancel&quot;);\n  }\n}\n</code></pre>\n<h3 id=\"html\">HTML</h3>\n<pre><code class=\"language-html\">&lt;button class=&quot;p-10&quot; (click)=&quot;onRequest()&quot;&gt;Request&lt;/button&gt;\n&lt;button class=&quot;p-10&quot; (click)=&quot;onCancel()&quot;&gt;Cancel&lt;/button&gt;\n</code></pre>\n<hr>\n<h2 id=\"takeuntil-方式\">takeUntil 方式</h2>\n<p>模擬另一種情境，比如說在 ngrx 裡處理，這裡寫的很簡略，只寫了方法，但沒有 ngrx 的寫法</p>\n<pre><code class=\"language-ts\">export class AppComponent {\n  private onDestroy$: BehaviorSubject&lt;boolean&gt; = new BehaviorSubject&lt;boolean&gt;(\n    false\n  );\n\n  constructor(private httpClient: HttpClient) {}\n\n  fetchProd(): Observable&lt;any&gt; {\n    const url = `https://fakestoreapi.com/products`;\n    return this.httpClient.get&lt;any&gt;(url).pipe(\n      catchError((err, caught) =&gt; {\n        console.error(err);\n        throw err;\n      })\n    );\n  }\n\n  onRequest() {\n    this.onDestroy$.next(false);\n\n    of(&quot;test&quot;)\n      .pipe(\n        switchMap((data) =&gt; {\n          return this.fetchProd().pipe(\n            takeUntil(this.onDestroy$.pipe(filter((v) =&gt; v)))\n          );\n        })\n      )\n      .subscribe((res) =&gt; {\n        console.log(&quot;getData&quot;, res);\n      });\n  }\n\n  onCancel() {\n    this.onDestroy$.next(true);\n    console.log(&quot;cancel&quot;);\n  }\n}\n</code></pre>\n"},{"directory":"rxjs","layout":"RxJS","slug":"rxjs_onDestroy","title":"Rxjs 各種解訂閱方式","date":"2021/09/24","categories":["RxJS"],"tags":["RxJS","Angular","ironman2021"],"summary":"昨天說到了將資料訂閱出來渲染在頁面上的事，那麼就就來說說 RxJs 解訂閱這件事吧。這也是為了避免 memory leak，或重覆訂閱所造成的 BUG，若非有限訂閱，通常在訂閱離開後，都需要解訂閱。轉","content":"<p>昨天說到了將資料訂閱出來渲染在頁面上的事，那麼就就來說說 RxJs 解訂閱這件事吧。\n這也是為了避免 memory leak，或重覆訂閱所造成的 BUG，若非有限訂閱，通常在訂閱離開後，都需要解訂閱。</p>\n<hr>\n<h2 id=\"轉換為的-observable\">轉換為的 Observable</h2>\n<h3 id=\"first\">first</h3>\n<p>只執行第一次，通常用於第一次進來讀取成功取得資料後，就不需再次執行</p>\n<pre><code class=\"language-ts\">export class RxjsOndestroyComponent implements OnInit, OnDestroy {\n  private destroy$: Subject&lt;boolean&gt; = new Subject();\n  private timer$: Observable&lt;number&gt; = timer(0, 1000);\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.timer$.pipe(first()).subscribe((time) =&gt; {\n      console.log(&quot;time&quot;, time);\n      this.count = time;\n    });\n  }\n}\n</code></pre>\n<hr>\n<h3 id=\"take(1)\">take(1)</h3>\n<p>只發生一次</p>\n<pre><code class=\"language-ts\">export class RxjsOndestroyComponent implements OnInit, OnDestroy {\n  private destroy$: Subject&lt;boolean&gt; = new Subject();\n  private timer$: Observable&lt;number&gt; = timer(0, 1000);\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.timer$.pipe(first()).subscribe((time) =&gt; {\n      console.log(&quot;time&quot;, time);\n      this.count = time;\n    });\n  }\n}\n</code></pre>\n<p><a target='_blank' href=\"https://stackoverflow.com/questions/42345969/take1-vs-first\">take1 與 first 差異</a></p>\n<hr>\n<h3 id=\"takeuntil\">takeUntil</h3>\n<p>持續執行，直到離開</p>\n<pre><code class=\"language-ts\">export class RxjsOndestroyComponent implements OnInit, OnDestroy {\n  private destroy$: Subject = new Subject&lt;void&gt;();\n  private timer$: Observable&lt;number&gt; = timer(0, 1000);\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.timer$.pipe(takeUntil(this.destroy$)).subscribe((time) =&gt; {\n      console.log(&quot;time&quot;, time);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.onDestroy$.next();\n    this.onDestroy$.complete();\n  }\n}\n</code></pre>\n<hr>\n<h2 id=\"unsubscribe\">unsubscribe</h2>\n<pre><code class=\"language-ts\">export class RxjsOndestroyComponent implements OnInit, OnDestroy {\n  private subscription: Subscription = new Subscription();\n  private timer$: Observable&lt;number&gt; = timer(0, 1000);\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.subscription.add(\n      this.timer$.subscribe((time) =&gt; {\n        console.log(&quot;time&quot;, time);\n      })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n</code></pre>\n<hr>\n<h2 id=\"使用-async-pipe\">使用 Async Pipe</h2>\n<p>template</p>\n<pre><code class=\"language-html\">&lt;div&gt;{{ timer$ | async }}&lt;/div&gt;\n</code></pre>\n<p>ts</p>\n<pre><code class=\"language-ts\">export class RxjsOndestroyComponent implements OnInit, OnDestroy {\n  timer$: Observable&lt;number&gt; = timer(0, 1000).pipe(\n    tap((time: number) =&gt; console.log(&quot;time&quot;, time))\n  );\n}\n</code></pre>\n<p>當 component 離開時，AsyncPipe 會自動取消訂閱</p>\n<hr>\n<h2 id=\"有限的-observable\">有限的 Observable</h2>\n<p>在 Angular 裡，有一些 Observable 離開後就會自動取消訂閱</p>\n<p>裡面包含了：</p>\n<ul>\n<li>HTTP</li>\n<li>router 與 ActivatedRoute</li>\n<li>reactive forms 裡的 valueChanges 與 statusChanges</li>\n</ul>\n<hr>\n<p>參考資料：\n<a target='_blank' href=\"https://angular.tw/guide/observables-in-angular\">Angular 中的可觀察物件</a></p>\n"},{"directory":"tailwindcss","layout":"tailwindcss","slug":"tailwind_ng_install","title":"使用 Angular 安裝 TailwindCSS","date":"2022/10/21","categories":["TailwindCss"],"tags":["TailwindCss","Angular"],"summary":"安裝環境Angular 14.2.3Node 14.16.1編輯器 vscode建立 Angular 新專案ng new &lt;project name&gt;cd &lt;project name","content":"<h2 id=\"安裝環境\">安裝環境</h2>\n<p>Angular 14.2.3\nNode 14.16.1\n編輯器 vscode</p>\n<h2 id=\"建立-angular-新專案\">建立 Angular 新專案</h2>\n<pre><code class=\"language-bash\">ng new &lt;project name&gt;\ncd &lt;project name&gt;\n</code></pre>\n<h2 id=\"安裝-tailwindcss\">安裝 TailwindCSS</h2>\n<pre><code class=\"language-bash\">npm install -D tailwindcss postcss autoprefixer\n</code></pre>\n<p>寫這篇文章的時後，所安裝的是 TailwindCSS v3 版本\n以下將是 TailwindCSS v3 版介紹</p>\n<h2 id=\"產生-tailwindcss-配置檔\">產生 tailwindcss 配置檔</h2>\n<pre><code class=\"language-bash\">npx tailwindcss init\n</code></pre>\n<p>在根目錄底下會多出一支 tailwind.config.js\n所有 <code>TailwindCSS</code> 配置都在 <code>tailwind.config.js</code> 設定</p>\n<h2 id=\"設定-tailwindcss-配置\">設定 tailwindcss 配置</h2>\n<pre><code class=\"language-ts\">module.exports = {\n  prefix: &quot;&quot;,\n  important: true,\n  darkMode: &quot;class&quot;,\n  content: [&quot;./src/**/*.{html,ts}&quot;],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n</code></pre>\n<p>在 tailwindcss v3 移除了 <code>mode: 'jit'</code> 設定,</p>\n<h3 id=\"prefix:-前綴設定\">prefix: 前綴設定</h3>\n<pre><code class=\"language-json\">prefix: 'tw-',\n</code></pre>\n<pre><code class=\"language-html\">&lt;!-- 生效 --&gt;\n&lt;div class=&quot;tw-text-red-500 tw-font-bold&quot;&gt;hello world&lt;/div&gt;\n\n&lt;!-- 無效 --&gt;\n&lt;div class=&quot;text-red-500&quot;&gt;hello world&lt;/div&gt;\n</code></pre>\n<h3 id=\"important:-tailwind-權重設定\">important: Tailwind 權重設定</h3>\n<p>設為 true 的話，有關於 T 中面 cstykele 後面都會加上 <code>!important</code>\n適用情境：有時後需要修改到套件框架裡的樣式\n<img src=\"https://i.imgur.com/SGCTSWJ.png\" alt=\"\"></p>\n<h3 id=\"content:-設定需要使用到-tailwind-的檔案路徑\">content: 設定需要使用到 Tailwind 的檔案路徑</h3>\n<h3 id=\"darkmode:-黑暗模式\">darkMode: 黑暗模式</h3>\n<pre><code class=\"language-html\">&lt;!-- Dark mode 關閉 --&gt;\n&lt;html&gt;\n  &lt;body&gt;\n    &lt;div class=&quot;bg-white dark:bg-black&quot;&gt;這是白色背景&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\n&lt;!-- Dark mode 開啟 --&gt;\n&lt;html class=&quot;dark&quot;&gt;\n  &lt;body&gt;\n    &lt;div class=&quot;bg-white dark:bg-black&quot;&gt;這是黑色背景&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"theme:-客製化設定\">theme: 客製化設定</h3>\n<p>例：顏色設定</p>\n<ul>\n<li>保留 Tailwind 預設顏色，新增顏色。</li>\n</ul>\n<pre><code class=\"language-js\">theme: {\n  extend: {\n    colors: {\n      brown: {\n        50: &quot;#fdf8f6&quot;,\n        100: &quot;#f2e8e5&quot;,\n        200: &quot;#eaddd7&quot;,\n        300: &quot;#e0cec7&quot;,\n        400: &quot;#d2bab0&quot;,\n        500: &quot;#bfa094&quot;,\n        600: &quot;#a18072&quot;,\n        700: &quot;#977669&quot;,\n        800: &quot;#846358&quot;,\n        900: &quot;#43302b&quot;,\n      },\n    },\n  },\n}\n</code></pre>\n<pre><code class=\"language-js\">theme: {\n  colors: ({ colors }) =&gt; {\n    return {\n      ...colors,\n      brown: {\n        50: &quot;#fdf8f6&quot;,\n        100: &quot;#f2e8e5&quot;,\n        200: &quot;#eaddd7&quot;,\n        300: &quot;#e0cec7&quot;,\n        400: &quot;#d2bab0&quot;,\n        500: &quot;#bfa094&quot;,\n        600: &quot;#a18072&quot;,\n        700: &quot;#977669&quot;,\n        800: &quot;#846358&quot;,\n        900: &quot;#43302b&quot;,\n      },\n    };\n  },\n  extend: {},\n}\n</code></pre>\n<ul>\n<li>自訂義顏色\ntailwind，給使用者很多預設顏色，但有些用不太到，只需要幾種特定的顏色，與一些特定顏色</li>\n</ul>\n<pre><code class=\"language-js\">//需引入 tailwind 顏色設定\nconst colors = require(&quot;tailwindcss/colors&quot;);\n\nmodule.exports = {\n  ...略\n  theme: {\n    colors: {\n      black: colors.black,\n      white: colors.white,\n      gray: colors.gray,\n      yellow: colors.yellow,\n      brown: {\n        50: &quot;#fdf8f6&quot;,\n        100: &quot;#f2e8e5&quot;,\n        200: &quot;#eaddd7&quot;,\n        300: &quot;#e0cec7&quot;,\n        400: &quot;#d2bab0&quot;,\n        500: &quot;#bfa094&quot;,\n        600: &quot;#a18072&quot;,\n        700: &quot;#977669&quot;,\n        800: &quot;#846358&quot;,\n        900: &quot;#43302b&quot;,\n      },\n    },\n  },\n  plugins: [],\n};\n</code></pre>\n<pre><code class=\"language-js\">module.exports = {\n  ...略\n  theme: {\n    colors: ({ colors }) =&gt; {\n      return {\n        black: colors.black,\n        white: colors.white,\n        gray: colors.gray,\n        yellow: colors.yellow,\n        brown: {\n          50: &quot;#fdf8f6&quot;,\n          100: &quot;#f2e8e5&quot;,\n          200: &quot;#eaddd7&quot;,\n          300: &quot;#e0cec7&quot;,\n          400: &quot;#d2bab0&quot;,\n          500: &quot;#bfa094&quot;,\n          600: &quot;#a18072&quot;,\n          700: &quot;#977669&quot;,\n          800: &quot;#846358&quot;,\n          900: &quot;#43302b&quot;,\n        },\n      };\n    },\n    extend: {},\n  },\n  plugins: [],\n};\n</code></pre>\n<hr>\n<h2 id=\"初始化-tailwind\">初始化 tailwind</h2>\n<p>在 <code>./src/styles.css</code> 或 <code>./src/styles.scss</code> 引入樣式</p>\n<pre><code class=\"language-scss\">@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre>\n<h3 id=\"開始使用\">開始使用</h3>\n<pre><code class=\"language-html\">&lt;h1 class=&quot;text-3xl font-bold underline&quot;&gt;Hello world!&lt;/h1&gt;\n</code></pre>\n<p>完成！</p>\n<hr>\n<h2 id=\"出現-sasserror\">出現 SassError</h2>\n<p>在一個專案裡 通常會有很多機率也會使用到其他框架，雖然這範疇不算是屬於 <code>tailwindcss</code> 裡。\n當出現 <code>SassError: @use rules must be written before any other rules.</code> 時</p>\n<p>解決方式：\n必須將引用 scss 檔的路徑 <code>@use '路徑'</code> 放置最上面</p>\n<hr>\n<h2 id=\"vscode-警示排除\">vscode 警示排除</h2>\n<p>檔案 =&gt; 喜好設定 =&gt; 設定</p>\n<p><img src=\"assets/images/tailwindcss/tailwind_ng_install/NGmLsWT.png\" alt=\"\"></p>\n<p>分別在 CSS、LESS、SCSS 裡都改為 <code>ignore</code>\n<img src=\"assets/images/tailwindcss/tailwind_ng_install/MSsV3K4.png\" alt=\"\"></p>\n<p>或是在 setting.json 裡加上這幾行</p>\n<pre><code class=\"language-json\">&quot;css.lint.unknownAtRules&quot;: &quot;ignore&quot;,\n&quot;scss.lint.unknownAtRules&quot;: &quot;ignore&quot;,\n&quot;less.lint.unknownAtRules&quot;: &quot;ignore&quot;\n</code></pre>\n<hr>\n<h2 id=\"vscode-必要套件安裝\">vscode 必要套件安裝</h2>\n<p><a target='_blank' href=\"https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss\">Tailwind CSS IntelliSense</a></p>\n<p><img src=\"assets/images/tailwindcss/tailwind_ng_install/installsense.jpg\" alt=\"\"></p>\n<hr>\n<h2 id=\"prettier-自動排序\">Prettier 自動排序</h2>\n<p><a target='_blank' href=\"https://github.com/tailwindlabs/prettier-plugin-tailwindcss\">Automatic class sorting with Prettier</a></p>\n<p>需安裝 prettier 套件 可到 <a target='_blank' href=\"https://mtwmt.com/blog/vscode/vscode_prettier\">vscode：Prettier 套件</a> 看介紹</p>\n<h3 id=\"安裝\">安裝</h3>\n<pre><code class=\"language-bash\">npm install -D prettier prettier-plugin-tailwindcss\n</code></pre>\n<p>安裝後 prettier 也會幫忙格式化 tailwindcss 囉</p>\n"},{"directory":"vscode","layout":"vscode","slug":"vscode","title":"vscode：vscode基本介紹與安裝","date":"2018/11/25","categories":["vscode"],"tags":["vscode"],"summary":"VSCODE 設定檔存放路徑設定檔文件路徑Windows %APPDATA%\\Code\\User\\settings.jsonMac $HOME/Library/Application Support/","content":"<h2 id=\"vscode-設定檔存放路徑\">VSCODE 設定檔存放路徑</h2>\n<h3 id=\"設定檔文件路徑\">設定檔文件路徑</h3>\n<ul>\n<li>Windows <code>%APPDATA%\\Code\\User\\settings.json</code></li>\n<li>Mac <code>$HOME/Library/Application Support/Code/User/settings.json</code></li>\n<li>Linux <code>$HOME/.config/Code/User/settings.json</code></li>\n</ul>\n<h3 id=\"擴充功能存放路徑\">擴充功能存放路徑</h3>\n<ul>\n<li>Windows <code>%USERPROFILE%\\.vscode\\extensions</code></li>\n<li>macOS <code>~/.vscode/extensions</code></li>\n<li>Linux <code>~/.vscode/extensions</code></li>\n</ul>\n<p><a target='_blank' href=\"//jeasonstudio.gitbooks.io/vscode-cn-doc/content/\">vscode 中文文檔(簡中)</a></p>\n<p>主要是以前端 <code>html scss js 再加點vue</code> 做為安裝設定</p>\n<h2 id=\"基本安裝\">基本安裝</h2>\n<p><code>(在此以個人使用習慣做安裝)</code></p>\n<pre><code class=\"language-js\">{\n  &quot;editor.tabSize&quot;: 2,\n  &quot;git.ignoreMissingGitWarning&quot;: true,\n  &quot;window.zoomLevel&quot;: 0,\n  &quot;editor.formatOnPaste&quot;: true,\n  &quot;explorer.confirmDelete&quot;: false,\n}\n</code></pre>\n<p><code>editor.tabSize</code> 設定 tab 間隔\n<code>editor.formatOnPaste</code> 貼上程式碼時自動排版\n<code>indow.zoomLevel</code> 調整視窗的縮放比例。\n<code>git.ignoreMissingGitWarning</code> 忽略遺漏 Git 時的警告\n<code>explorer.confirmDelete</code> 控制總管是否須在透過垃圾桶刪除檔案時要求確認。</p>\n<h2 id=\"掛件包\">掛件包</h2>\n<ul>\n<li>Chinese (Traditional) Language Pack for Visual Studio Code <code>vscode 中文繁體包</code></li>\n<li>Vetur <code>Vue 的集大成工具，寫 Vue 必裝</code></li>\n<li>cdnjs <code>檢示&gt;命令選擇區 找libraries 快速在編輯器內插入jquery之類的路徑</code></li>\n<li><a target='_blank' href=\"//mtwmt.github.io/vscode_liveserver/\">Live Server</a> <code>網頁伺服器</code></li>\n</ul>\n<h2 id=\"常用快捷鍵\">常用快捷鍵</h2>\n<ul>\n<li><code>markdown 預覽</code> ctrl + shift + v（Mac 的快捷鍵是 command + shift + V）</li>\n<li><code>直行選取</code> shift + alt + 滑鼠左鍵 (shift + alt + ctrl + 方向鍵)</li>\n</ul>\n"},{"directory":"vscode","layout":"vscode","slug":"vscode_cdnjs","title":"vscode：cdnjs","date":"2020/06/02","categories":["vscode"],"tags":["vscode"],"summary":"搜尋 js 套件名稱，並直接引入 CDN 連結網址蠻方便的其實如何安裝如何使用安裝後 按 ctrl + shift + p 鍵入 cdnjs search for libraries 輸入要引入的套件","content":"<p>搜尋 js 套件名稱，並直接引入 CDN 連結網址蠻方便的其實</p>\n<h2 id=\"如何安裝\">如何安裝</h2>\n<img src=\"assets/images/vscode/cdnjs/cdnjs.jpg\"  loading=\"lazy\" />\n<h2 id=\"如何使用\">如何使用</h2>\n<p>安裝後 按 <code>ctrl + shift + p</code> 鍵入 <code>cdnjs</code> <code>search for libraries</code> 輸入要引入的套\n件名稱接著選擇版本</p>\n<p>即可使用！</p>\n"},{"directory":"vscode","layout":"vscode","slug":"vscode_liveserver","title":"vscode：Live Server 套件","date":"2018/11/25","categories":["vscode"],"tags":["vscode"],"summary":"Live Server 網頁伺服器 在串接 api 測試的時後非常的好用如何安裝開始設定依需求在設定裡更改預設配置{  &quot;liveServer.settings.donotShowInfoM","content":"<p>Live Server 網頁伺服器 在串接 api 測試的時後非常的好用</p>\n<h2 id=\"如何安裝\">如何安裝</h2>\n<img src=\"assets/images/vscode/liveserver/001.png\"  loading=\"lazy\" />\n<h2 id=\"開始設定\">開始設定</h2>\n<p>依需求在設定裡更改預設配置</p>\n<pre><code class=\"language-js\">{\n  &quot;liveServer.settings.donotShowInfoMsg&quot;: true,\n  &quot;liveServer.settings.useLocalIp&quot;: true,\n  &quot;liveServer.settings.donotVerifyTags&quot;: true,\n}\n</code></pre>\n<p><code>donotShowInfoMsg</code> 關閉彈出訊息 <code>useLocalIp</code> 使用實體 ip 做為連線位址( 寫 rwd 頁\n面時很實用 方便手機瀏覽 ) <code>donotVerifyTags</code> 關閉 html 缺少的 tag 警告</p>\n<p><a target='_blank' href=\"//github.com/ritwickdey/vscode-live-server/blob/master/docs/settings.md\">Live Server 官方設定檔文件</a></p>\n"},{"directory":"vscode","layout":"vscode","slug":"vscode_prettier","title":"vscode：Prettier 套件","date":"2018/11/25","categories":["vscode"],"tags":["vscode"],"summary":"Prettier 是程式碼格式化工具，可設定為存檔時自動格式化，不用再花時間去手動格式化相對的對自己在撰寫習慣上 會易讀許多。如何安裝在 VSCODE 擴充功能 尋找 prettier 安裝 Pret","content":"<p>Prettier 是程式碼格式化工具，可設定為存檔時自動格式化，不用再花時間去手動格式化\n相對的對自己在撰寫習慣上 會易讀許多。</p>\n<h2 id=\"如何安裝\">如何安裝</h2>\n<p>在 VSCODE 擴充功能 尋找 prettier 安裝 <code>Prettier - Code formatter</code> 這個版本\n<img src=\"assets/images/vscode/prittier/001.png\"  loading=\"lazy\" /></p>\n<h2 id=\"開始設定\">開始設定</h2>\n<p>依需求在設定裡更改預設配置</p>\n<pre><code class=\"language-js\">{\n  &quot;editor.formatOnSave&quot;: true,\n  &quot;prettier.singleQuote&quot;: true,\n  &quot;prettier.printWidth&quot;: 120,\n  &quot;prettier.trailingComma&quot;: &quot;es5&quot;\n}\n</code></pre>\n<p><code>editor.formatOnSave</code> 儲存時自動格式化 <code>singleQuote</code> 使用單引號 <code>printWidth</code> 行\n寬 <code>trailingComma</code> 尾隨逗號</p>\n<p>其他設定 <code>semi</code> 結束是否加分號 <code>tabWidth</code> 縮排空幾格 <code>eslintIntegration</code> 支援\neslint 擴充套件 ( 需另安裝 eslint 此套件 ) <code>stylelintIntegration</code> 支援 stylelint\n( 需另安裝 stylelint 此套件 )</p>\n<p>這邊要注意 VSCODE 有分為 使用者設定 與 工作區設定，使用者設定則是套用到所有的個\n人設定工作區用來執行目前專案，若是怕影響到其他專案 可設定在此</p>\n<p><a target='_blank' href=\"//prettier.io/docs/en/options.html\">Prettier 官網</a></p>\n"}]