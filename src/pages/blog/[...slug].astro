---
import { CollectionEntry, getCollection } from "astro:content";
import BlogSideBar from "../../components/BlogSideBar.astro";
import MainLayout from "../../layouts/MainLayout.astro";
import Header from "../../components/Header.astro";
import ContentLayout from "../../layouts/ContentLayout.astro";
import AsideLayout from "../../layouts/AsideLayout.astro";
import GoTop from "../../components/GoTop.astro";
import Comments from "../../components/Comments.astro";
import { SITE_TITLE } from "../../consts";
import FormattedDate from "../../components/FormattedDate.astro";
import Tags from "../../components/Tags.astro";

// getStaticPaths 生成靜態頁面路徑
export async function getStaticPaths() {
  const posts = await getCollection("blog");

  // const categories = [
  //   ...new Set(posts.map((post: any) => post.data.categories).flat()),
  // ].filter((d) => !!d);

  return posts.map((post: any) => ({
    params: { slug: post.slug },
    props: post,
  }));
}
type Props = CollectionEntry<"blog">;

const post = Astro.props;
const { headings, Content } = await post.render();
const { data } = post;
---

<MainLayout title={post.data.title + " | " + SITE_TITLE}>
  <Header />
  <ContentLayout>
    <!-- <a onclick="history.back()" >回上頁</a> -->
    <div class="py-[3.35rem] px-[4vw]">
      <FormattedDate date={post.data.update || post.data.date} type="en" />

      <h1 class="text-3xl leading-loose text-default">{post.data.title}</h1>
      <div class="mt-2">
        {(<Tags tags={post.data?.tags} />)}
      </div>
    </div>
    <div class="border-y border-default py-10 px-[4vw]">
      <div class="post">
        <Content />
      </div>
      <Comments />
    </div>

    <AsideLayout slot="aside">
      <BlogSideBar {headings} />
    </AsideLayout>
  </ContentLayout>
</MainLayout>
<GoTop />

<style is:global lang="scss">
  [data-blog-toc] {
    .active {
      @apply bg-primary-500 bg-opacity-70;
    }
  }

  .post {
    @apply text-base text-default;

    h1 {
      @apply my-4 text-3xl text-default;
    }

    h2 {
      @apply mt-11 text-2xl font-bold text-default;
    }

    h3 {
      @apply mt-11 mb-2 text-xl font-bold text-default;
    }

    p {
      @apply my-4 leading-loose whitespace-pre-line;
    }

    pre {
      @apply my-4 p-4 rounded-md;
    }

    img {
      @apply my-4 mx-auto;
    }

    hr {
      @apply my-8 border-default;
    }

    iframe {
      @apply mt-4 mb-2 mx-auto h-80 max-w-full min-h-full;
      & + p {
        & > em {
          @apply text-sm;
        }
      }
      @apply w-full min-h-[128px];
    }

    blockquote {
      @apply text-dark my-8 px-5 border-l-4 border-gray-200 border-solid;
    }

    ol {
      @apply list-decimal;
    }

    ul {
      @apply list-disc;
    }

    ol,
    ul {
      @apply ml-5 my-4;
      & li:not(:last-of-type) {
        @apply mb-2;
      }
    }

    :not(pre) > code {
      @apply px-1 bg-red-50 text-red-700 rounded break-words;
    }

    a {
      @apply text-primary-700 transition duration-300 ease-in-out
       hover:text-opacity-70 dark:text-primary-200;
    }

    table {
      @apply my-4 w-full border-collapse;
      th {
        @apply text-white bg-light;
      }

      th,
      td {
        @apply py-2 px-2 leading-tight border border-solid border-default;
      }
    }

    .copy-code {
      @apply absolute top-0 right-0  text-white rounded-sm bg-primary-800 transition duration-300 hover:bg-primary-900 px-2 py-1 text-xs cursor-pointer;
    }
  }
</style>

<script>
  let copyButtonLabel = "Copy Code";
  let codeBlocks = Array.from(document.querySelectorAll("pre"));

  for (let codeBlock of codeBlocks) {
    let wrapper = document.createElement("div");
    wrapper.className = "relative";

    let copyButton = document.createElement("button");
    copyButton.className = "copy-code";
    copyButton.innerHTML = copyButtonLabel;

    codeBlock.setAttribute("tabindex", "0");
    codeBlock.appendChild(copyButton);
    // wrap codebock with relative parent element
    codeBlock.parentNode.insertBefore(wrapper, codeBlock);
    wrapper.appendChild(codeBlock);

    copyButton.addEventListener("click", async () => {
      await copyCode(codeBlock, copyButton);
    });
  }

  async function copyCode(block, button) {
    let code = block.querySelector("code");
    let text = code.innerText;

    await navigator.clipboard.writeText(text);

    // visual feedback that task is completed
    button.innerText = "Code Copied";

    setTimeout(() => {
      button.innerText = copyButtonLabel;
    }, 700);
  }
</script>
